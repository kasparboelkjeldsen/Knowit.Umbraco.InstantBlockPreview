@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<BlockGridItem<TestElement>>

@*The goal is to have every content type in here for testing*@

<div>
    @if(Model.Content.Tags != null)
    {
        <ul>
            @foreach(var tag in Model.Content.Tags)
            {
                <li>@tag</li>
            }
        </ul>
    }
</div>

<div>
    @if(Model.Content.ContentPicker != null)
    {
        <div>@Model.Content.ContentPicker.Name</div>
    }
</div>

<div>
    <p>@Model.Content.Decimal</p>
</div>

<div>
    @if(Model.Content.TextBox != null)
    {
        <p>@Model.Content.TextBox</p>
    }
</div>

<div>
    @if (Model.Content.Email != null)
    {
        <p>@Model.Content.Email</p>
    }
</div>

<div>
    Toggle is: @(Model.Content.Toggle ? "on" : "off")
</div>

@*pickers*@
<div>
    @if(Model.Content.MultiUrl != null)
    {
        <ul>
            @foreach(var url in Model.Content.MultiUrl)
            {
                <li>@url.Url @url.Name</li>
            }
        </ul>
    }
</div>

@*datepicker currently broken when using offsets*@

<div>
    @if(Model.Content.Color != null)
    {
        <p>@Model.Content.Color</p>
    }
</div>

<div>
    @if(Model.Content.Dropdown != null)
    {
        <ul>
        @foreach(var d in Model.Content.Dropdown)
        {
            <li>@d</li>
        }
        </ul>
    }
</div>

<div>
    @if(Model.Content.EyeDrop != null)
    {
        <p>@Model.Content.EyeDrop</p>
    }
</div>

<div>
    @if(Model.Content.ContentPickerMulti != null)     {
        <ul>
            @foreach(var item in Model.Content.ContentPickerMulti)
            {
                <li>@item.Name</li>
            }
        </ul>
    }
</div>

<div>
    @if(Model.Content.MarkDown != null)
    {
        <p>@Model.Content.MarkDown</p>
    }
</div>
@*
<div>
    @if(Model.Content.ImageCropper != null)
    {
        @Model.Content.ImageCropper.GetCropUrl(100,100,null);
    }
</div>*@

<div>
    @if (Model.Content.Image != null)
    {
        @Model.Content.Image.Url()
    }
</div>

<div>
    <p>@Model.Content.RichText</p>
</div>

<div>
    @if(Model.Content.CheckboxList != null)
    {
        <ul>
            @foreach(var item in Model.Content.CheckboxList)
            {
                <li>@item</li>
            }
        </ul>
    }
</div>

<div>
    @if (Model.Content.MultiString != null)
    {
        <ul>
            @foreach (var item in Model.Content.MultiString)
            {
                <li>@item</li>
            }
        </ul>
    }
</div>

<div>
    @if (Model.Content.RadioList != null)
    {
        <p>Radio: @Model.Content.RadioList</p>
    }
</div>