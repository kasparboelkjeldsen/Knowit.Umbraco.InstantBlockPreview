{"version":3,"file":"knowit-instant-block-preview-DuHtf16t.js","sources":["../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/core/ApiError.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/core/CancelablePromise.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/core/request.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/services.gen.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/elements/knowit-instant-block-preview.ts"],"sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n\tpublic readonly url: string;\n\tpublic readonly status: number;\n\tpublic readonly statusText: string;\n\tpublic readonly body: unknown;\n\tpublic readonly request: ApiRequestOptions;\n\n\tconstructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n\t\tsuper(message);\n\n\t\tthis.name = 'ApiError';\n\t\tthis.url = response.url;\n\t\tthis.status = response.status;\n\t\tthis.statusText = response.statusText;\n\t\tthis.body = response.body;\n\t\tthis.request = request;\n\t}\n}","export class CancelError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = 'CancelError';\n\t}\n\n\tpublic get isCancelled(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport interface OnCancel {\n\treadonly isResolved: boolean;\n\treadonly isRejected: boolean;\n\treadonly isCancelled: boolean;\n\n\t(cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n\tprivate _isResolved: boolean;\n\tprivate _isRejected: boolean;\n\tprivate _isCancelled: boolean;\n\treadonly cancelHandlers: (() => void)[];\n\treadonly promise: Promise<T>;\n\tprivate _resolve?: (value: T | PromiseLike<T>) => void;\n\tprivate _reject?: (reason?: unknown) => void;\n\n\tconstructor(\n\t\texecutor: (\n\t\t\tresolve: (value: T | PromiseLike<T>) => void,\n\t\t\treject: (reason?: unknown) => void,\n\t\t\tonCancel: OnCancel\n\t\t) => void\n\t) {\n\t\tthis._isResolved = false;\n\t\tthis._isRejected = false;\n\t\tthis._isCancelled = false;\n\t\tthis.cancelHandlers = [];\n\t\tthis.promise = new Promise<T>((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\n\t\t\tconst onResolve = (value: T | PromiseLike<T>): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._isResolved = true;\n\t\t\t\tif (this._resolve) this._resolve(value);\n\t\t\t};\n\n\t\t\tconst onReject = (reason?: unknown): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._isRejected = true;\n\t\t\t\tif (this._reject) this._reject(reason);\n\t\t\t};\n\n\t\t\tconst onCancel = (cancelHandler: () => void): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.cancelHandlers.push(cancelHandler);\n\t\t\t};\n\n\t\t\tObject.defineProperty(onCancel, 'isResolved', {\n\t\t\t\tget: (): boolean => this._isResolved,\n\t\t\t});\n\n\t\t\tObject.defineProperty(onCancel, 'isRejected', {\n\t\t\t\tget: (): boolean => this._isRejected,\n\t\t\t});\n\n\t\t\tObject.defineProperty(onCancel, 'isCancelled', {\n\t\t\t\tget: (): boolean => this._isCancelled,\n\t\t\t});\n\n\t\t\treturn executor(onResolve, onReject, onCancel as OnCancel);\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn \"Cancellable Promise\";\n\t}\n\n\tpublic then<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n\t\tonRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.promise.then(onFulfilled, onRejected);\n\t}\n\n\tpublic catch<TResult = never>(\n\t\tonRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null\n\t): Promise<T | TResult> {\n\t\treturn this.promise.catch(onRejected);\n\t}\n\n\tpublic finally(onFinally?: (() => void) | null): Promise<T> {\n\t\treturn this.promise.finally(onFinally);\n\t}\n\n\tpublic cancel(): void {\n\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isCancelled = true;\n\t\tif (this.cancelHandlers.length) {\n\t\t\ttry {\n\t\t\t\tfor (const cancelHandler of this.cancelHandlers) {\n\t\t\t\t\tcancelHandler();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Cancellation threw an error', error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.cancelHandlers.length = 0;\n\t\tif (this._reject) this._reject(new CancelError('Request aborted'));\n\t}\n\n\tpublic get isCancelled(): boolean {\n\t\treturn this._isCancelled;\n\t}\n}","import { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport const isString = (value: unknown): value is string => {\n\treturn typeof value === 'string';\n};\n\nexport const isStringWithValue = (value: unknown): value is string => {\n\treturn isString(value) && value !== '';\n};\n\nexport const isBlob = (value: any): value is Blob => {\n\treturn value instanceof Blob;\n};\n\nexport const isFormData = (value: unknown): value is FormData => {\n\treturn value instanceof FormData;\n};\n\nexport const base64 = (str: string): string => {\n\ttry {\n\t\treturn btoa(str);\n\t} catch (err) {\n\t\t// @ts-ignore\n\t\treturn Buffer.from(str).toString('base64');\n\t}\n};\n\nexport const getQueryString = (params: Record<string, unknown>): string => {\n\tconst qs: string[] = [];\n\n\tconst append = (key: string, value: unknown) => {\n\t\tqs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n\t};\n\n\tconst encodePair = (key: string, value: unknown) => {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (value instanceof Date) {\n\t\t\tappend(key, value.toISOString());\n\t\t} else if (Array.isArray(value)) {\n\t\t\tvalue.forEach(v => encodePair(key, v));\n\t\t} else if (typeof value === 'object') {\n\t\t\tObject.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\n\t\t} else {\n\t\t\tappend(key, value);\n\t\t}\n\t};\n\n\tObject.entries(params).forEach(([key, value]) => encodePair(key, value));\n\n\treturn qs.length ? `?${qs.join('&')}` : '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n\tconst encoder = config.ENCODE_PATH || encodeURI;\n\n\tconst path = options.url\n\t\t.replace('{api-version}', config.VERSION)\n\t\t.replace(/{(.*?)}/g, (substring: string, group: string) => {\n\t\t\tif (options.path?.hasOwnProperty(group)) {\n\t\t\t\treturn encoder(String(options.path[group]));\n\t\t\t}\n\t\t\treturn substring;\n\t\t});\n\n\tconst url = config.BASE + path;\n\treturn options.query ? url + getQueryString(options.query) : url;\n};\n\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\n\tif (options.formData) {\n\t\tconst formData = new FormData();\n\n\t\tconst process = (key: string, value: unknown) => {\n\t\t\tif (isString(value) || isBlob(value)) {\n\t\t\t\tformData.append(key, value);\n\t\t\t} else {\n\t\t\t\tformData.append(key, JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tObject.entries(options.formData)\n\t\t\t.filter(([, value]) => value !== undefined && value !== null)\n\t\t\t.forEach(([key, value]) => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tvalue.forEach(v => process(key, v));\n\t\t\t\t} else {\n\t\t\t\t\tprocess(key, value);\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn formData;\n\t}\n\treturn undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\n\nexport const resolve = async <T>(options: ApiRequestOptions<T>, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n\tif (typeof resolver === 'function') {\n\t\treturn (resolver as Resolver<T>)(options);\n\t}\n\treturn resolver;\n};\n\nexport const getHeaders = async <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\n\t\t// @ts-ignore\n\t\tresolve(options, config.TOKEN),\n\t\t// @ts-ignore\n\t\tresolve(options, config.USERNAME),\n\t\t// @ts-ignore\n\t\tresolve(options, config.PASSWORD),\n\t\t// @ts-ignore\n\t\tresolve(options, config.HEADERS),\n\t]);\n\n\tconst headers = Object.entries({\n\t\tAccept: 'application/json',\n\t\t...additionalHeaders,\n\t\t...options.headers,\n\t})\n\t\t.filter(([, value]) => value !== undefined && value !== null)\n\t\t.reduce((headers, [key, value]) => ({\n\t\t\t...headers,\n\t\t\t[key]: String(value),\n\t\t}), {} as Record<string, string>);\n\n\tif (isStringWithValue(token)) {\n\t\theaders['Authorization'] = `Bearer ${token}`;\n\t}\n\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\n\t\tconst credentials = base64(`${username}:${password}`);\n\t\theaders['Authorization'] = `Basic ${credentials}`;\n\t}\n\n\tif (options.body !== undefined) {\n\t\tif (options.mediaType) {\n\t\t\theaders['Content-Type'] = options.mediaType;\n\t\t} else if (isBlob(options.body)) {\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\n\t\t} else if (isString(options.body)) {\n\t\t\theaders['Content-Type'] = 'text/plain';\n\t\t} else if (!isFormData(options.body)) {\n\t\t\theaders['Content-Type'] = 'application/json';\n\t\t}\n\t}\n\n\treturn new Headers(headers);\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): unknown => {\n\tif (options.body !== undefined) {\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\n\t\t\treturn JSON.stringify(options.body);\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n\t\t\treturn options.body;\n\t\t} else {\n\t\t\treturn JSON.stringify(options.body);\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const sendRequest = async (\n\tconfig: OpenAPIConfig,\n\toptions: ApiRequestOptions,\n\turl: string,\n\tbody: any,\n\tformData: FormData | undefined,\n\theaders: Headers,\n\tonCancel: OnCancel\n): Promise<Response> => {\n\tconst controller = new AbortController();\n\n\tlet request: RequestInit = {\n\t\theaders,\n\t\tbody: body ?? formData,\n\t\tmethod: options.method,\n\t\tsignal: controller.signal,\n\t};\n\n\tif (config.WITH_CREDENTIALS) {\n\t\trequest.credentials = config.CREDENTIALS;\n\t}\n\n\tfor (const fn of config.interceptors.request._fns) {\n\t\trequest = await fn(request);\n\t}\n\n\tonCancel(() => controller.abort());\n\n\treturn await fetch(url, request);\n};\n\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n\tif (responseHeader) {\n\t\tconst content = response.headers.get(responseHeader);\n\t\tif (isString(content)) {\n\t\t\treturn content;\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const getResponseBody = async (response: Response): Promise<unknown> => {\n\tif (response.status !== 204) {\n\t\ttry {\n\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\tif (contentType) {\n\t\t\t\tconst binaryTypes = ['application/octet-stream', 'application/pdf', 'application/zip', 'audio/', 'image/', 'video/'];\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\n\t\t\t\t\treturn await response.json();\n\t\t\t\t} else if (binaryTypes.some(type => contentType.includes(type))) {\n\t\t\t\t\treturn await response.blob();\n\t\t\t\t} else if (contentType.includes('multipart/form-data')) {\n\t\t\t\t\treturn await response.formData();\n\t\t\t\t} else if (contentType.includes('text/')) {\n\t\t\t\t\treturn await response.text();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n\tconst errors: Record<number, string> = {\n\t\t400: 'Bad Request',\n\t\t401: 'Unauthorized',\n\t\t402: 'Payment Required',\n\t\t403: 'Forbidden',\n\t\t404: 'Not Found',\n\t\t405: 'Method Not Allowed',\n\t\t406: 'Not Acceptable',\n\t\t407: 'Proxy Authentication Required',\n\t\t408: 'Request Timeout',\n\t\t409: 'Conflict',\n\t\t410: 'Gone',\n\t\t411: 'Length Required',\n\t\t412: 'Precondition Failed',\n\t\t413: 'Payload Too Large',\n\t\t414: 'URI Too Long',\n\t\t415: 'Unsupported Media Type',\n\t\t416: 'Range Not Satisfiable',\n\t\t417: 'Expectation Failed',\n\t\t418: 'Im a teapot',\n\t\t421: 'Misdirected Request',\n\t\t422: 'Unprocessable Content',\n\t\t423: 'Locked',\n\t\t424: 'Failed Dependency',\n\t\t425: 'Too Early',\n\t\t426: 'Upgrade Required',\n\t\t428: 'Precondition Required',\n\t\t429: 'Too Many Requests',\n\t\t431: 'Request Header Fields Too Large',\n\t\t451: 'Unavailable For Legal Reasons',\n\t\t500: 'Internal Server Error',\n\t\t501: 'Not Implemented',\n\t\t502: 'Bad Gateway',\n\t\t503: 'Service Unavailable',\n\t\t504: 'Gateway Timeout',\n\t\t505: 'HTTP Version Not Supported',\n\t\t506: 'Variant Also Negotiates',\n\t\t507: 'Insufficient Storage',\n\t\t508: 'Loop Detected',\n\t\t510: 'Not Extended',\n\t\t511: 'Network Authentication Required',\n\t\t...options.errors,\n\t}\n\n\tconst error = errors[result.status];\n\tif (error) {\n\t\tthrow new ApiError(options, result, error);\n\t}\n\n\tif (!result.ok) {\n\t\tconst errorStatus = result.status ?? 'unknown';\n\t\tconst errorStatusText = result.statusText ?? 'unknown';\n\t\tconst errorBody = (() => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(result.body, null, 2);\n\t\t\t} catch (e) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})();\n\n\t\tthrow new ApiError(options, result,\n\t\t\t`Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\n\t\t);\n\t}\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): CancelablePromise<T> => {\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\n\t\ttry {\n\t\t\tconst url = getUrl(config, options);\n\t\t\tconst formData = getFormData(options);\n\t\t\tconst body = getRequestBody(options);\n\t\t\tconst headers = await getHeaders(config, options);\n\n\t\t\tif (!onCancel.isCancelled) {\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\n\t\t\t\t\tresponse = await fn(response);\n\t\t\t\t}\n\n\t\t\t\tconst responseBody = await getResponseBody(response);\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\n\n\t\t\t\tlet transformedBody = responseBody;\n\t\t\t\tif (options.responseTransformer && response.ok) {\n\t\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\n\t\t\t\t}\n\n\t\t\t\tconst result: ApiResult = {\n\t\t\t\t\turl,\n\t\t\t\t\tok: response.ok,\n\t\t\t\t\tstatus: response.status,\n\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\tbody: responseHeader ?? transformedBody,\n\t\t\t\t};\n\n\t\t\t\tcatchErrorCodes(options, result);\n\n\t\t\t\tresolve(result.body);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { CancelablePromise } from './core/CancelablePromise';\nimport { OpenAPI } from './core/OpenAPI';\nimport { request as __request } from './core/request';\nimport type { GetCultureData, GetCultureResponse, PostDataTypeData, PostDataTypeResponse, GetDataTypeByIdData, GetDataTypeByIdResponse, DeleteDataTypeByIdData, DeleteDataTypeByIdResponse, PutDataTypeByIdData, PutDataTypeByIdResponse, PostDataTypeByIdCopyData, PostDataTypeByIdCopyResponse, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedResponse, PutDataTypeByIdMoveData, PutDataTypeByIdMoveResponse, GetDataTypeByIdReferencesData, GetDataTypeByIdReferencesResponse, GetDataTypeConfigurationResponse, PostDataTypeFolderData, PostDataTypeFolderResponse, GetDataTypeFolderByIdData, GetDataTypeFolderByIdResponse, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdResponse, PutDataTypeFolderByIdData, PutDataTypeFolderByIdResponse, GetFilterDataTypeData, GetFilterDataTypeResponse, GetItemDataTypeData, GetItemDataTypeResponse, GetItemDataTypeSearchData, GetItemDataTypeSearchResponse, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsResponse, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenResponse, GetTreeDataTypeRootData, GetTreeDataTypeRootResponse, GetDictionaryData, GetDictionaryResponse, PostDictionaryData, PostDictionaryResponse, GetDictionaryByIdData, GetDictionaryByIdResponse, DeleteDictionaryByIdData, DeleteDictionaryByIdResponse, PutDictionaryByIdData, PutDictionaryByIdResponse, GetDictionaryByIdExportData, GetDictionaryByIdExportResponse, PutDictionaryByIdMoveData, PutDictionaryByIdMoveResponse, PostDictionaryImportData, PostDictionaryImportResponse, GetItemDictionaryData, GetItemDictionaryResponse, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsResponse, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenResponse, GetTreeDictionaryRootData, GetTreeDictionaryRootResponse, PostDocumentBlueprintData, PostDocumentBlueprintResponse, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdResponse, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdResponse, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdResponse, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveResponse, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderResponse, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdResponse, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdResponse, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdResponse, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentResponse, GetItemDocumentBlueprintData, GetItemDocumentBlueprintResponse, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsResponse, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenResponse, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootResponse, PostDocumentTypeData, PostDocumentTypeResponse, GetDocumentTypeByIdData, GetDocumentTypeByIdResponse, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdResponse, PutDocumentTypeByIdData, PutDocumentTypeByIdResponse, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenResponse, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintResponse, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesResponse, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyResponse, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportResponse, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportResponse, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveResponse, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootResponse, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsResponse, GetDocumentTypeConfigurationResponse, PostDocumentTypeFolderData, PostDocumentTypeFolderResponse, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdResponse, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdResponse, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdResponse, PostDocumentTypeImportData, PostDocumentTypeImportResponse, GetItemDocumentTypeData, GetItemDocumentTypeResponse, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchResponse, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsResponse, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenResponse, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootResponse, GetDocumentVersionData, GetDocumentVersionResponse, GetDocumentVersionByIdData, GetDocumentVersionByIdResponse, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupResponse, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackResponse, GetCollectionDocumentByIdData, GetCollectionDocumentByIdResponse, PostDocumentData, PostDocumentResponse, GetDocumentByIdData, GetDocumentByIdResponse, DeleteDocumentByIdData, DeleteDocumentByIdResponse, PutDocumentByIdData, PutDocumentByIdResponse, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogResponse, PostDocumentByIdCopyData, PostDocumentByIdCopyResponse, GetDocumentByIdDomainsData, GetDocumentByIdDomainsResponse, PutDocumentByIdDomainsData, PutDocumentByIdDomainsResponse, PutDocumentByIdMoveData, PutDocumentByIdMoveResponse, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinResponse, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsResponse, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsResponse, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessResponse, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessResponse, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessResponse, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessResponse, PutDocumentByIdPublishData, PutDocumentByIdPublishResponse, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsResponse, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByResponse, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsResponse, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishResponse, PutDocumentByIdValidateData, PutDocumentByIdValidateResponse, GetDocumentAreReferencedData, GetDocumentAreReferencedResponse, GetDocumentConfigurationResponse, PutDocumentSortData, PutDocumentSortResponse, GetDocumentUrlsData, GetDocumentUrlsResponse, PostDocumentValidateData, PostDocumentValidateResponse, GetItemDocumentData, GetItemDocumentResponse, GetItemDocumentSearchData, GetItemDocumentSearchResponse, DeleteRecycleBinDocumentResponse, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdResponse, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentResponse, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreResponse, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenResponse, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootResponse, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsResponse, GetTreeDocumentChildrenData, GetTreeDocumentChildrenResponse, GetTreeDocumentRootData, GetTreeDocumentRootResponse, PostDynamicRootQueryData, PostDynamicRootQueryResponse, GetDynamicRootStepsResponse, GetHealthCheckGroupData, GetHealthCheckGroupResponse, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameResponse, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckResponse, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionResponse, GetHelpData, GetHelpResponse, GetImagingResizeUrlsData, GetImagingResizeUrlsResponse, GetImportAnalyzeData, GetImportAnalyzeResponse, GetIndexerData, GetIndexerResponse, GetIndexerByIndexNameData, GetIndexerByIndexNameResponse, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildResponse, GetInstallSettingsResponse, PostInstallSetupData, PostInstallSetupResponse, PostInstallValidateDatabaseData, PostInstallValidateDatabaseResponse, GetItemLanguageData, GetItemLanguageResponse, GetItemLanguageDefaultResponse, GetLanguageData, GetLanguageResponse, PostLanguageData, PostLanguageResponse, GetLanguageByIsoCodeData, GetLanguageByIsoCodeResponse, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeResponse, PutLanguageByIsoCodeData, PutLanguageByIsoCodeResponse, GetLogViewerLevelData, GetLogViewerLevelResponse, GetLogViewerLevelCountData, GetLogViewerLevelCountResponse, GetLogViewerLogData, GetLogViewerLogResponse, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateResponse, GetLogViewerSavedSearchData, GetLogViewerSavedSearchResponse, PostLogViewerSavedSearchData, PostLogViewerSavedSearchResponse, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameResponse, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameResponse, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeResponse, GetManifestManifestResponse, GetManifestManifestPrivateResponse, GetManifestManifestPublicResponse, GetItemMediaTypeData, GetItemMediaTypeResponse, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedResponse, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersResponse, GetItemMediaTypeSearchData, GetItemMediaTypeSearchResponse, PostMediaTypeData, PostMediaTypeResponse, GetMediaTypeByIdData, GetMediaTypeByIdResponse, DeleteMediaTypeByIdData, DeleteMediaTypeByIdResponse, PutMediaTypeByIdData, PutMediaTypeByIdResponse, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenResponse, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesResponse, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyResponse, GetMediaTypeByIdExportData, GetMediaTypeByIdExportResponse, PutMediaTypeByIdImportData, PutMediaTypeByIdImportResponse, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveResponse, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootResponse, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsResponse, PostMediaTypeFolderData, PostMediaTypeFolderResponse, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdResponse, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdResponse, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdResponse, PostMediaTypeImportData, PostMediaTypeImportResponse, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsResponse, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenResponse, GetTreeMediaTypeRootData, GetTreeMediaTypeRootResponse, GetCollectionMediaData, GetCollectionMediaResponse, GetItemMediaData, GetItemMediaResponse, GetItemMediaSearchData, GetItemMediaSearchResponse, PostMediaData, PostMediaResponse, GetMediaByIdData, GetMediaByIdResponse, DeleteMediaByIdData, DeleteMediaByIdResponse, PutMediaByIdData, PutMediaByIdResponse, GetMediaByIdAuditLogData, GetMediaByIdAuditLogResponse, PutMediaByIdMoveData, PutMediaByIdMoveResponse, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinResponse, GetMediaByIdReferencedByData, GetMediaByIdReferencedByResponse, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsResponse, PutMediaByIdValidateData, PutMediaByIdValidateResponse, GetMediaAreReferencedData, GetMediaAreReferencedResponse, GetMediaConfigurationResponse, PutMediaSortData, PutMediaSortResponse, GetMediaUrlsData, GetMediaUrlsResponse, PostMediaValidateData, PostMediaValidateResponse, DeleteRecycleBinMediaResponse, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdResponse, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentResponse, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreResponse, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenResponse, GetRecycleBinMediaRootData, GetRecycleBinMediaRootResponse, GetTreeMediaAncestorsData, GetTreeMediaAncestorsResponse, GetTreeMediaChildrenData, GetTreeMediaChildrenResponse, GetTreeMediaRootData, GetTreeMediaRootResponse, GetItemMemberGroupData, GetItemMemberGroupResponse, GetMemberGroupData, GetMemberGroupResponse, PostMemberGroupData, PostMemberGroupResponse, GetMemberGroupByIdData, GetMemberGroupByIdResponse, DeleteMemberGroupByIdData, DeleteMemberGroupByIdResponse, PutMemberGroupByIdData, PutMemberGroupByIdResponse, GetTreeMemberGroupRootData, GetTreeMemberGroupRootResponse, GetItemMemberTypeData, GetItemMemberTypeResponse, GetItemMemberTypeSearchData, GetItemMemberTypeSearchResponse, PostMemberTypeData, PostMemberTypeResponse, GetMemberTypeByIdData, GetMemberTypeByIdResponse, DeleteMemberTypeByIdData, DeleteMemberTypeByIdResponse, PutMemberTypeByIdData, PutMemberTypeByIdResponse, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesResponse, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyResponse, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsResponse, GetTreeMemberTypeRootData, GetTreeMemberTypeRootResponse, GetFilterMemberData, GetFilterMemberResponse, GetItemMemberData, GetItemMemberResponse, GetItemMemberSearchData, GetItemMemberSearchResponse, PostMemberData, PostMemberResponse, GetMemberByIdData, GetMemberByIdResponse, DeleteMemberByIdData, DeleteMemberByIdResponse, PutMemberByIdData, PutMemberByIdResponse, PutMemberByIdValidateData, PutMemberByIdValidateResponse, GetMemberConfigurationResponse, PostMemberValidateData, PostMemberValidateResponse, PostModelsBuilderBuildResponse, GetModelsBuilderDashboardResponse, GetModelsBuilderStatusResponse, GetObjectTypesData, GetObjectTypesResponse, GetOembedQueryData, GetOembedQueryResponse, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationResponse, GetPackageConfigurationResponse, GetPackageCreatedData, GetPackageCreatedResponse, PostPackageCreatedData, PostPackageCreatedResponse, GetPackageCreatedByIdData, GetPackageCreatedByIdResponse, DeletePackageCreatedByIdData, DeletePackageCreatedByIdResponse, PutPackageCreatedByIdData, PutPackageCreatedByIdResponse, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadResponse, GetPackageMigrationStatusData, GetPackageMigrationStatusResponse, GetItemPartialViewData, GetItemPartialViewResponse, PostPartialViewData, PostPartialViewResponse, GetPartialViewByPathData, GetPartialViewByPathResponse, DeletePartialViewByPathData, DeletePartialViewByPathResponse, PutPartialViewByPathData, PutPartialViewByPathResponse, PutPartialViewByPathRenameData, PutPartialViewByPathRenameResponse, PostPartialViewFolderData, PostPartialViewFolderResponse, GetPartialViewFolderByPathData, GetPartialViewFolderByPathResponse, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathResponse, GetPartialViewSnippetData, GetPartialViewSnippetResponse, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdResponse, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsResponse, GetTreePartialViewChildrenData, GetTreePartialViewChildrenResponse, GetTreePartialViewRootData, GetTreePartialViewRootResponse, DeletePreviewResponse, PostPreviewResponse, GetProfilingStatusResponse, PutProfilingStatusData, PutProfilingStatusResponse, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedResponse, PostPublishedCacheCollectResponse, PostPublishedCacheRebuildResponse, PostPublishedCacheReloadResponse, GetPublishedCacheStatusResponse, GetRedirectManagementData, GetRedirectManagementResponse, GetRedirectManagementByIdData, GetRedirectManagementByIdResponse, DeleteRedirectManagementByIdData, DeleteRedirectManagementByIdResponse, GetRedirectManagementStatusResponse, PostRedirectManagementStatusData, PostRedirectManagementStatusResponse, GetItemRelationTypeData, GetItemRelationTypeResponse, GetRelationTypeData, GetRelationTypeResponse, GetRelationTypeByIdData, GetRelationTypeByIdResponse, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdResponse, GetItemScriptData, GetItemScriptResponse, PostScriptData, PostScriptResponse, GetScriptByPathData, GetScriptByPathResponse, DeleteScriptByPathData, DeleteScriptByPathResponse, PutScriptByPathData, PutScriptByPathResponse, PutScriptByPathRenameData, PutScriptByPathRenameResponse, PostScriptFolderData, PostScriptFolderResponse, GetScriptFolderByPathData, GetScriptFolderByPathResponse, DeleteScriptFolderByPathData, DeleteScriptFolderByPathResponse, GetTreeScriptAncestorsData, GetTreeScriptAncestorsResponse, GetTreeScriptChildrenData, GetTreeScriptChildrenResponse, GetTreeScriptRootData, GetTreeScriptRootResponse, GetSearcherData, GetSearcherResponse, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryResponse, GetSecurityConfigurationResponse, PostSecurityForgotPasswordData, PostSecurityForgotPasswordResponse, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetResponse, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyResponse, GetSegmentData, GetSegmentResponse, GetServerConfigurationResponse, GetServerInformationResponse, GetServerStatusResponse, GetServerTroubleshootingResponse, GetItemStaticFileData, GetItemStaticFileResponse, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsResponse, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenResponse, GetTreeStaticFileRootData, GetTreeStaticFileRootResponse, GetItemStylesheetData, GetItemStylesheetResponse, PostStylesheetData, PostStylesheetResponse, GetStylesheetByPathData, GetStylesheetByPathResponse, DeleteStylesheetByPathData, DeleteStylesheetByPathResponse, PutStylesheetByPathData, PutStylesheetByPathResponse, PutStylesheetByPathRenameData, PutStylesheetByPathRenameResponse, PostStylesheetFolderData, PostStylesheetFolderResponse, GetStylesheetFolderByPathData, GetStylesheetFolderByPathResponse, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathResponse, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsResponse, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenResponse, GetTreeStylesheetRootData, GetTreeStylesheetRootResponse, GetTagData, GetTagResponse, GetTelemetryData, GetTelemetryResponse, GetTelemetryLevelResponse, PostTelemetryLevelData, PostTelemetryLevelResponse, GetItemTemplateData, GetItemTemplateResponse, GetItemTemplateSearchData, GetItemTemplateSearchResponse, PostTemplateData, PostTemplateResponse, GetTemplateByIdData, GetTemplateByIdResponse, DeleteTemplateByIdData, DeleteTemplateByIdResponse, PutTemplateByIdData, PutTemplateByIdResponse, GetTemplateConfigurationResponse, PostTemplateQueryExecuteData, PostTemplateQueryExecuteResponse, GetTemplateQuerySettingsResponse, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsResponse, GetTreeTemplateChildrenData, GetTreeTemplateChildrenResponse, GetTreeTemplateRootData, GetTreeTemplateRootResponse, PostTemporaryFileData, PostTemporaryFileResponse, GetTemporaryFileByIdData, GetTemporaryFileByIdResponse, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdResponse, GetTemporaryFileConfigurationResponse, PostUpgradeAuthorizeResponse, GetUpgradeSettingsResponse, PostUserDataData, PostUserDataResponse, GetUserDataData, GetUserDataResponse, PutUserDataData, PutUserDataResponse, GetUserDataByIdData, GetUserDataByIdResponse, GetFilterUserGroupData, GetFilterUserGroupResponse, GetItemUserGroupData, GetItemUserGroupResponse, DeleteUserGroupData, DeleteUserGroupResponse, PostUserGroupData, PostUserGroupResponse, GetUserGroupData, GetUserGroupResponse, GetUserGroupByIdData, GetUserGroupByIdResponse, DeleteUserGroupByIdData, DeleteUserGroupByIdResponse, PutUserGroupByIdData, PutUserGroupByIdResponse, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersResponse, PostUserGroupByIdUsersData, PostUserGroupByIdUsersResponse, GetFilterUserData, GetFilterUserResponse, GetItemUserData, GetItemUserResponse, PostUserData, PostUserResponse, DeleteUserData, DeleteUserResponse, GetUserData, GetUserResponse, GetUserByIdData, GetUserByIdResponse, DeleteUserByIdData, DeleteUserByIdResponse, PutUserByIdData, PutUserByIdResponse, GetUserById2FaData, GetUserById2FaResponse, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameResponse, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesResponse, PostUserByIdChangePasswordData, PostUserByIdChangePasswordResponse, PostUserByIdResetPasswordData, PostUserByIdResetPasswordResponse, DeleteUserAvatarByIdData, DeleteUserAvatarByIdResponse, PostUserAvatarByIdData, PostUserAvatarByIdResponse, GetUserConfigurationResponse, GetUserCurrentResponse, GetUserCurrent2FaResponse, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameResponse, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameResponse, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameResponse, PostUserCurrentAvatarData, PostUserCurrentAvatarResponse, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordResponse, GetUserCurrentConfigurationResponse, GetUserCurrentLoginProvidersResponse, GetUserCurrentPermissionsData, GetUserCurrentPermissionsResponse, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentResponse, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaResponse, PostUserDisableData, PostUserDisableResponse, PostUserEnableData, PostUserEnableResponse, PostUserInviteData, PostUserInviteResponse, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordResponse, PostUserInviteResendData, PostUserInviteResendResponse, PostUserInviteVerifyData, PostUserInviteVerifyResponse, PostUserSetUserGroupsData, PostUserSetUserGroupsResponse, PostUserUnlockData, PostUserUnlockResponse, GetItemWebhookData, GetItemWebhookResponse, GetWebhookData, GetWebhookResponse, PostWebhookData, PostWebhookResponse, GetWebhookByIdData, GetWebhookByIdResponse, DeleteWebhookByIdData, DeleteWebhookByIdResponse, PutWebhookByIdData, PutWebhookByIdResponse, GetWebhookEventsData, GetWebhookEventsResponse } from './types.gen';\n\nexport class CultureService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCulture(data: GetCultureData = {}): CancelablePromise<GetCultureResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/culture',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class DataTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDataType(data: PostDataTypeData = {}): CancelablePromise<PostDataTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/data-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeById(data: GetDataTypeByIdData): CancelablePromise<GetDataTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDataTypeById(data: DeleteDataTypeByIdData): CancelablePromise<DeleteDataTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/data-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDataTypeById(data: PutDataTypeByIdData): CancelablePromise<PutDataTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/data-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDataTypeByIdCopy(data: PostDataTypeByIdCopyData): CancelablePromise<PostDataTypeByIdCopyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/data-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static getDataTypeByIdIsUsed(data: GetDataTypeByIdIsUsedData): CancelablePromise<GetDataTypeByIdIsUsedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/{id}/is-used',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDataTypeByIdMove(data: PutDataTypeByIdMoveData): CancelablePromise<PutDataTypeByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/data-type/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeByIdReferences(data: GetDataTypeByIdReferencesData): CancelablePromise<GetDataTypeByIdReferencesResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/{id}/references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeConfiguration(): CancelablePromise<GetDataTypeConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDataTypeFolder(data: PostDataTypeFolderData = {}): CancelablePromise<PostDataTypeFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/data-type/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeFolderById(data: GetDataTypeFolderByIdData): CancelablePromise<GetDataTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDataTypeFolderById(data: DeleteDataTypeFolderByIdData): CancelablePromise<DeleteDataTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDataTypeFolderById(data: PutDataTypeFolderByIdData): CancelablePromise<PutDataTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.name\n     * @param data.editorUiAlias\n     * @param data.editorAlias\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterDataType(data: GetFilterDataTypeData = {}): CancelablePromise<GetFilterDataTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/data-type',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                name: data.name,\n                editorUiAlias: data.editorUiAlias,\n                editorAlias: data.editorAlias\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDataType(data: GetItemDataTypeData = {}): CancelablePromise<GetItemDataTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/data-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDataTypeSearch(data: GetItemDataTypeSearchData = {}): CancelablePromise<GetItemDataTypeSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/data-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDataTypeAncestors(data: GetTreeDataTypeAncestorsData = {}): CancelablePromise<GetTreeDataTypeAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/data-type/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDataTypeChildren(data: GetTreeDataTypeChildrenData = {}): CancelablePromise<GetTreeDataTypeChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/data-type/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDataTypeRoot(data: GetTreeDataTypeRootData = {}): CancelablePromise<GetTreeDataTypeRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/data-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DictionaryService {\n    /**\n     * @param data The data for the request.\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDictionary(data: GetDictionaryData = {}): CancelablePromise<GetDictionaryResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dictionary',\n            query: {\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDictionary(data: PostDictionaryData = {}): CancelablePromise<PostDictionaryResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/dictionary',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDictionaryById(data: GetDictionaryByIdData): CancelablePromise<GetDictionaryByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dictionary/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDictionaryById(data: DeleteDictionaryByIdData): CancelablePromise<DeleteDictionaryByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/dictionary/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDictionaryById(data: PutDictionaryByIdData): CancelablePromise<PutDictionaryByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/dictionary/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.includeChildren\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDictionaryByIdExport(data: GetDictionaryByIdExportData): CancelablePromise<GetDictionaryByIdExportResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dictionary/{id}/export',\n            path: {\n                id: data.id\n            },\n            query: {\n                includeChildren: data.includeChildren\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDictionaryByIdMove(data: PutDictionaryByIdMoveData): CancelablePromise<PutDictionaryByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/dictionary/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDictionaryImport(data: PostDictionaryImportData = {}): CancelablePromise<PostDictionaryImportResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/dictionary/import',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDictionary(data: GetItemDictionaryData = {}): CancelablePromise<GetItemDictionaryResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/dictionary',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDictionaryAncestors(data: GetTreeDictionaryAncestorsData = {}): CancelablePromise<GetTreeDictionaryAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDictionaryChildren(data: GetTreeDictionaryChildrenData = {}): CancelablePromise<GetTreeDictionaryChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/dictionary/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDictionaryRoot(data: GetTreeDictionaryRootData = {}): CancelablePromise<GetTreeDictionaryRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/dictionary/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentBlueprintService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentBlueprint(data: PostDocumentBlueprintData = {}): CancelablePromise<PostDocumentBlueprintResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-blueprint',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentBlueprintById(data: GetDocumentBlueprintByIdData): CancelablePromise<GetDocumentBlueprintByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentBlueprintById(data: DeleteDocumentBlueprintByIdData): CancelablePromise<DeleteDocumentBlueprintByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentBlueprintById(data: PutDocumentBlueprintByIdData): CancelablePromise<PutDocumentBlueprintByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentBlueprintByIdMove(data: PutDocumentBlueprintByIdMoveData): CancelablePromise<PutDocumentBlueprintByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentBlueprintFolder(data: PostDocumentBlueprintFolderData = {}): CancelablePromise<PostDocumentBlueprintFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-blueprint/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentBlueprintFolderById(data: GetDocumentBlueprintFolderByIdData): CancelablePromise<GetDocumentBlueprintFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentBlueprintFolderById(data: DeleteDocumentBlueprintFolderByIdData): CancelablePromise<DeleteDocumentBlueprintFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentBlueprintFolderById(data: PutDocumentBlueprintFolderByIdData): CancelablePromise<PutDocumentBlueprintFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentBlueprintFromDocument(data: PostDocumentBlueprintFromDocumentData = {}): CancelablePromise<PostDocumentBlueprintFromDocumentResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-blueprint/from-document',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentBlueprint(data: GetItemDocumentBlueprintData = {}): CancelablePromise<GetItemDocumentBlueprintResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document-blueprint',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentBlueprintAncestors(data: GetTreeDocumentBlueprintAncestorsData = {}): CancelablePromise<GetTreeDocumentBlueprintAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentBlueprintChildren(data: GetTreeDocumentBlueprintChildrenData = {}): CancelablePromise<GetTreeDocumentBlueprintChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-blueprint/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentBlueprintRoot(data: GetTreeDocumentBlueprintRootData = {}): CancelablePromise<GetTreeDocumentBlueprintRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-blueprint/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentType(data: PostDocumentTypeData = {}): CancelablePromise<PostDocumentTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeById(data: GetDocumentTypeByIdData): CancelablePromise<GetDocumentTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentTypeById(data: DeleteDocumentTypeByIdData): CancelablePromise<DeleteDocumentTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeById(data: PutDocumentTypeByIdData): CancelablePromise<PutDocumentTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdAllowedChildren(data: GetDocumentTypeByIdAllowedChildrenData): CancelablePromise<GetDocumentTypeByIdAllowedChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdBlueprint(data: GetDocumentTypeByIdBlueprintData): CancelablePromise<GetDocumentTypeByIdBlueprintResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdCompositionReferences(data: GetDocumentTypeByIdCompositionReferencesData): CancelablePromise<GetDocumentTypeByIdCompositionReferencesResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentTypeByIdCopy(data: PostDocumentTypeByIdCopyData): CancelablePromise<PostDocumentTypeByIdCopyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdExport(data: GetDocumentTypeByIdExportData): CancelablePromise<GetDocumentTypeByIdExportResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/export',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeByIdImport(data: PutDocumentTypeByIdImportData): CancelablePromise<PutDocumentTypeByIdImportResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/{id}/import',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeByIdMove(data: PutDocumentTypeByIdMoveData): CancelablePromise<PutDocumentTypeByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeAllowedAtRoot(data: GetDocumentTypeAllowedAtRootData = {}): CancelablePromise<GetDocumentTypeAllowedAtRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/allowed-at-root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postDocumentTypeAvailableCompositions(data: PostDocumentTypeAvailableCompositionsData = {}): CancelablePromise<PostDocumentTypeAvailableCompositionsResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/available-compositions',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeConfiguration(): CancelablePromise<GetDocumentTypeConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentTypeFolder(data: PostDocumentTypeFolderData = {}): CancelablePromise<PostDocumentTypeFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeFolderById(data: GetDocumentTypeFolderByIdData): CancelablePromise<GetDocumentTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentTypeFolderById(data: DeleteDocumentTypeFolderByIdData): CancelablePromise<DeleteDocumentTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeFolderById(data: PutDocumentTypeFolderByIdData): CancelablePromise<PutDocumentTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentTypeImport(data: PostDocumentTypeImportData = {}): CancelablePromise<PostDocumentTypeImportResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/import',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentType(data: GetItemDocumentTypeData = {}): CancelablePromise<GetItemDocumentTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentTypeSearch(data: GetItemDocumentTypeSearchData = {}): CancelablePromise<GetItemDocumentTypeSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentTypeAncestors(data: GetTreeDocumentTypeAncestorsData = {}): CancelablePromise<GetTreeDocumentTypeAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-type/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentTypeChildren(data: GetTreeDocumentTypeChildrenData = {}): CancelablePromise<GetTreeDocumentTypeChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-type/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentTypeRoot(data: GetTreeDocumentTypeRootData = {}): CancelablePromise<GetTreeDocumentTypeRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentVersionService {\n    /**\n     * @param data The data for the request.\n     * @param data.documentId\n     * @param data.culture\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentVersion(data: GetDocumentVersionData): CancelablePromise<GetDocumentVersionResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-version',\n            query: {\n                documentId: data.documentId,\n                culture: data.culture,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentVersionById(data: GetDocumentVersionByIdData): CancelablePromise<GetDocumentVersionByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-version/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.preventCleanup\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentVersionByIdPreventCleanup(data: PutDocumentVersionByIdPreventCleanupData): CancelablePromise<PutDocumentVersionByIdPreventCleanupResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',\n            path: {\n                id: data.id\n            },\n            query: {\n                preventCleanup: data.preventCleanup\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.culture\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postDocumentVersionByIdRollback(data: PostDocumentVersionByIdRollbackData): CancelablePromise<PostDocumentVersionByIdRollbackResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-version/{id}/rollback',\n            path: {\n                id: data.id\n            },\n            query: {\n                culture: data.culture\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.dataTypeId\n     * @param data.orderBy\n     * @param data.orderCulture\n     * @param data.orderDirection\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCollectionDocumentById(data: GetCollectionDocumentByIdData): CancelablePromise<GetCollectionDocumentByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/collection/document/{id}',\n            path: {\n                id: data.id\n            },\n            query: {\n                dataTypeId: data.dataTypeId,\n                orderBy: data.orderBy,\n                orderCulture: data.orderCulture,\n                orderDirection: data.orderDirection,\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocument(data: PostDocumentData = {}): CancelablePromise<PostDocumentResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentById(data: GetDocumentByIdData): CancelablePromise<GetDocumentByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentById(data: DeleteDocumentByIdData): CancelablePromise<DeleteDocumentByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentById(data: PutDocumentByIdData): CancelablePromise<PutDocumentByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.orderDirection\n     * @param data.sinceDate\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdAuditLog(data: GetDocumentByIdAuditLogData): CancelablePromise<GetDocumentByIdAuditLogResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/audit-log',\n            path: {\n                id: data.id\n            },\n            query: {\n                orderDirection: data.orderDirection,\n                sinceDate: data.sinceDate,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentByIdCopy(data: PostDocumentByIdCopyData): CancelablePromise<PostDocumentByIdCopyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdDomains(data: GetDocumentByIdDomainsData): CancelablePromise<GetDocumentByIdDomainsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/domains',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdDomains(data: PutDocumentByIdDomainsData): CancelablePromise<PutDocumentByIdDomainsResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/domains',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdMove(data: PutDocumentByIdMoveData): CancelablePromise<PutDocumentByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdMoveToRecycleBin(data: PutDocumentByIdMoveToRecycleBinData): CancelablePromise<PutDocumentByIdMoveToRecycleBinResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdNotifications(data: GetDocumentByIdNotificationsData): CancelablePromise<GetDocumentByIdNotificationsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/notifications',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdNotifications(data: PutDocumentByIdNotificationsData): CancelablePromise<PutDocumentByIdNotificationsResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/notifications',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentByIdPublicAccess(data: PostDocumentByIdPublicAccessData): CancelablePromise<PostDocumentByIdPublicAccessResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentByIdPublicAccess(data: DeleteDocumentByIdPublicAccessData): CancelablePromise<DeleteDocumentByIdPublicAccessResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdPublicAccess(data: GetDocumentByIdPublicAccessData): CancelablePromise<GetDocumentByIdPublicAccessResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdPublicAccess(data: PutDocumentByIdPublicAccessData): CancelablePromise<PutDocumentByIdPublicAccessResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdPublish(data: PutDocumentByIdPublishData): CancelablePromise<PutDocumentByIdPublishResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/publish',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdPublishWithDescendants(data: PutDocumentByIdPublishWithDescendantsData): CancelablePromise<PutDocumentByIdPublishWithDescendantsResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdReferencedBy(data: GetDocumentByIdReferencedByData): CancelablePromise<GetDocumentByIdReferencedByResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/referenced-by',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdReferencedDescendants(data: GetDocumentByIdReferencedDescendantsData): CancelablePromise<GetDocumentByIdReferencedDescendantsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdUnpublish(data: PutDocumentByIdUnpublishData): CancelablePromise<PutDocumentByIdUnpublishResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/unpublish',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdValidate(data: PutDocumentByIdValidateData): CancelablePromise<PutDocumentByIdValidateResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/validate',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentAreReferenced(data: GetDocumentAreReferencedData = {}): CancelablePromise<GetDocumentAreReferencedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/are-referenced',\n            query: {\n                id: data.id,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentConfiguration(): CancelablePromise<GetDocumentConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentSort(data: PutDocumentSortData = {}): CancelablePromise<PutDocumentSortResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/sort',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentUrls(data: GetDocumentUrlsData = {}): CancelablePromise<GetDocumentUrlsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/urls',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postDocumentValidate(data: PostDocumentValidateData = {}): CancelablePromise<PostDocumentValidateResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document/validate',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocument(data: GetItemDocumentData = {}): CancelablePromise<GetItemDocumentResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentSearch(data: GetItemDocumentSearchData = {}): CancelablePromise<GetItemDocumentSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinDocument(): CancelablePromise<DeleteRecycleBinDocumentResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/document',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinDocumentById(data: DeleteRecycleBinDocumentByIdData): CancelablePromise<DeleteRecycleBinDocumentByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinDocumentByIdOriginalParent(data: GetRecycleBinDocumentByIdOriginalParentData): CancelablePromise<GetRecycleBinDocumentByIdOriginalParentResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putRecycleBinDocumentByIdRestore(data: PutRecycleBinDocumentByIdRestoreData): CancelablePromise<PutRecycleBinDocumentByIdRestoreResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinDocumentChildren(data: GetRecycleBinDocumentChildrenData = {}): CancelablePromise<GetRecycleBinDocumentChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/document/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinDocumentRoot(data: GetRecycleBinDocumentRootData = {}): CancelablePromise<GetRecycleBinDocumentRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/document/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentAncestors(data: GetTreeDocumentAncestorsData = {}): CancelablePromise<GetTreeDocumentAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentChildren(data: GetTreeDocumentChildrenData = {}): CancelablePromise<GetTreeDocumentChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentRoot(data: GetTreeDocumentRootData = {}): CancelablePromise<GetTreeDocumentRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DynamicRootService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postDynamicRootQuery(data: PostDynamicRootQueryData = {}): CancelablePromise<PostDynamicRootQueryResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/dynamic-root/query',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getDynamicRootSteps(): CancelablePromise<GetDynamicRootStepsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dynamic-root/steps',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class HealthCheckService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getHealthCheckGroup(data: GetHealthCheckGroupData = {}): CancelablePromise<GetHealthCheckGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/health-check-group',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getHealthCheckGroupByName(data: GetHealthCheckGroupByNameData): CancelablePromise<GetHealthCheckGroupByNameResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/health-check-group/{name}',\n            path: {\n                name: data.name\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postHealthCheckGroupByNameCheck(data: PostHealthCheckGroupByNameCheckData): CancelablePromise<PostHealthCheckGroupByNameCheckResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/health-check-group/{name}/check',\n            path: {\n                name: data.name\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postHealthCheckExecuteAction(data: PostHealthCheckExecuteActionData = {}): CancelablePromise<PostHealthCheckExecuteActionResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/health-check/execute-action',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class HelpService {\n    /**\n     * @param data The data for the request.\n     * @param data.section\n     * @param data.tree\n     * @param data.skip\n     * @param data.take\n     * @param data.baseUrl\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getHelp(data: GetHelpData = {}): CancelablePromise<GetHelpResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/help',\n            query: {\n                section: data.section,\n                tree: data.tree,\n                skip: data.skip,\n                take: data.take,\n                baseUrl: data.baseUrl\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class ImagingService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.height\n     * @param data.width\n     * @param data.mode\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getImagingResizeUrls(data: GetImagingResizeUrlsData = {}): CancelablePromise<GetImagingResizeUrlsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/imaging/resize/urls',\n            query: {\n                id: data.id,\n                height: data.height,\n                width: data.width,\n                mode: data.mode\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ImportService {\n    /**\n     * @param data The data for the request.\n     * @param data.temporaryFileId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getImportAnalyze(data: GetImportAnalyzeData = {}): CancelablePromise<GetImportAnalyzeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/import/analyze',\n            query: {\n                temporaryFileId: data.temporaryFileId\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class IndexerService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getIndexer(data: GetIndexerData = {}): CancelablePromise<GetIndexerResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/indexer',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.indexName\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getIndexerByIndexName(data: GetIndexerByIndexNameData): CancelablePromise<GetIndexerByIndexNameResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/indexer/{indexName}',\n            path: {\n                indexName: data.indexName\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.indexName\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postIndexerByIndexNameRebuild(data: PostIndexerByIndexNameRebuildData): CancelablePromise<PostIndexerByIndexNameRebuildResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',\n            path: {\n                indexName: data.indexName\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n}\n\nexport class InstallService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getInstallSettings(): CancelablePromise<GetInstallSettingsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/install/settings',\n            errors: {\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postInstallSetup(data: PostInstallSetupData = {}): CancelablePromise<PostInstallSetupResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/install/setup',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postInstallValidateDatabase(data: PostInstallValidateDatabaseData = {}): CancelablePromise<PostInstallValidateDatabaseResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/install/validate-database',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request'\n            }\n        });\n    }\n    \n}\n\nexport class LanguageService {\n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemLanguage(data: GetItemLanguageData = {}): CancelablePromise<GetItemLanguageResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/language',\n            query: {\n                isoCode: data.isoCode\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemLanguageDefault(): CancelablePromise<GetItemLanguageDefaultResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/language/default',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLanguage(data: GetLanguageData = {}): CancelablePromise<GetLanguageResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/language',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postLanguage(data: PostLanguageData = {}): CancelablePromise<PostLanguageResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/language',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLanguageByIsoCode(data: GetLanguageByIsoCodeData): CancelablePromise<GetLanguageByIsoCodeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/language/{isoCode}',\n            path: {\n                isoCode: data.isoCode\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteLanguageByIsoCode(data: DeleteLanguageByIsoCodeData): CancelablePromise<DeleteLanguageByIsoCodeResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/language/{isoCode}',\n            path: {\n                isoCode: data.isoCode\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putLanguageByIsoCode(data: PutLanguageByIsoCodeData): CancelablePromise<PutLanguageByIsoCodeResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/language/{isoCode}',\n            path: {\n                isoCode: data.isoCode\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class LogViewerService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerLevel(data: GetLogViewerLevelData = {}): CancelablePromise<GetLogViewerLevelResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/level',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerLevelCount(data: GetLogViewerLevelCountData = {}): CancelablePromise<GetLogViewerLevelCountResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/level-count',\n            query: {\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.orderDirection\n     * @param data.filterExpression\n     * @param data.logLevel\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerLog(data: GetLogViewerLogData = {}): CancelablePromise<GetLogViewerLogResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/log',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                orderDirection: data.orderDirection,\n                filterExpression: data.filterExpression,\n                logLevel: data.logLevel,\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerMessageTemplate(data: GetLogViewerMessageTemplateData = {}): CancelablePromise<GetLogViewerMessageTemplateResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/message-template',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerSavedSearch(data: GetLogViewerSavedSearchData = {}): CancelablePromise<GetLogViewerSavedSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postLogViewerSavedSearch(data: PostLogViewerSavedSearchData = {}): CancelablePromise<PostLogViewerSavedSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerSavedSearchByName(data: GetLogViewerSavedSearchByNameData): CancelablePromise<GetLogViewerSavedSearchByNameResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',\n            path: {\n                name: data.name\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteLogViewerSavedSearchByName(data: DeleteLogViewerSavedSearchByNameData): CancelablePromise<DeleteLogViewerSavedSearchByNameResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',\n            path: {\n                name: data.name\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerValidateLogsSize(data: GetLogViewerValidateLogsSizeData = {}): CancelablePromise<GetLogViewerValidateLogsSizeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',\n            query: {\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ManifestService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getManifestManifest(): CancelablePromise<GetManifestManifestResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/manifest/manifest',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getManifestManifestPrivate(): CancelablePromise<GetManifestManifestPrivateResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/manifest/manifest/private',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getManifestManifestPublic(): CancelablePromise<GetManifestManifestPublicResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/manifest/manifest/public'\n        });\n    }\n    \n}\n\nexport class MediaTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaType(data: GetItemMediaTypeData = {}): CancelablePromise<GetItemMediaTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.fileExtension\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaTypeAllowed(data: GetItemMediaTypeAllowedData = {}): CancelablePromise<GetItemMediaTypeAllowedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type/allowed',\n            query: {\n                fileExtension: data.fileExtension,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaTypeFolders(data: GetItemMediaTypeFoldersData = {}): CancelablePromise<GetItemMediaTypeFoldersResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type/folders',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaTypeSearch(data: GetItemMediaTypeSearchData = {}): CancelablePromise<GetItemMediaTypeSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaType(data: PostMediaTypeData = {}): CancelablePromise<PostMediaTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeById(data: GetMediaTypeByIdData): CancelablePromise<GetMediaTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMediaTypeById(data: DeleteMediaTypeByIdData): CancelablePromise<DeleteMediaTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/media-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeById(data: PutMediaTypeByIdData): CancelablePromise<PutMediaTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeByIdAllowedChildren(data: GetMediaTypeByIdAllowedChildrenData): CancelablePromise<GetMediaTypeByIdAllowedChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeByIdCompositionReferences(data: GetMediaTypeByIdCompositionReferencesData): CancelablePromise<GetMediaTypeByIdCompositionReferencesResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaTypeByIdCopy(data: PostMediaTypeByIdCopyData): CancelablePromise<PostMediaTypeByIdCopyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeByIdExport(data: GetMediaTypeByIdExportData): CancelablePromise<GetMediaTypeByIdExportResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}/export',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeByIdImport(data: PutMediaTypeByIdImportData): CancelablePromise<PutMediaTypeByIdImportResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/{id}/import',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeByIdMove(data: PutMediaTypeByIdMoveData): CancelablePromise<PutMediaTypeByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeAllowedAtRoot(data: GetMediaTypeAllowedAtRootData = {}): CancelablePromise<GetMediaTypeAllowedAtRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/allowed-at-root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postMediaTypeAvailableCompositions(data: PostMediaTypeAvailableCompositionsData = {}): CancelablePromise<PostMediaTypeAvailableCompositionsResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/available-compositions',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaTypeFolder(data: PostMediaTypeFolderData = {}): CancelablePromise<PostMediaTypeFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeFolderById(data: GetMediaTypeFolderByIdData): CancelablePromise<GetMediaTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMediaTypeFolderById(data: DeleteMediaTypeFolderByIdData): CancelablePromise<DeleteMediaTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeFolderById(data: PutMediaTypeFolderByIdData): CancelablePromise<PutMediaTypeFolderByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaTypeImport(data: PostMediaTypeImportData = {}): CancelablePromise<PostMediaTypeImportResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/import',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaTypeAncestors(data: GetTreeMediaTypeAncestorsData = {}): CancelablePromise<GetTreeMediaTypeAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media-type/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaTypeChildren(data: GetTreeMediaTypeChildrenData = {}): CancelablePromise<GetTreeMediaTypeChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media-type/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaTypeRoot(data: GetTreeMediaTypeRootData = {}): CancelablePromise<GetTreeMediaTypeRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MediaService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.dataTypeId\n     * @param data.orderBy\n     * @param data.orderDirection\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCollectionMedia(data: GetCollectionMediaData = {}): CancelablePromise<GetCollectionMediaResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/collection/media',\n            query: {\n                id: data.id,\n                dataTypeId: data.dataTypeId,\n                orderBy: data.orderBy,\n                orderDirection: data.orderDirection,\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMedia(data: GetItemMediaData = {}): CancelablePromise<GetItemMediaResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaSearch(data: GetItemMediaSearchData = {}): CancelablePromise<GetItemMediaSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMedia(data: PostMediaData = {}): CancelablePromise<PostMediaResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaById(data: GetMediaByIdData): CancelablePromise<GetMediaByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMediaById(data: DeleteMediaByIdData): CancelablePromise<DeleteMediaByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/media/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaById(data: PutMediaByIdData): CancelablePromise<PutMediaByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.orderDirection\n     * @param data.sinceDate\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaByIdAuditLog(data: GetMediaByIdAuditLogData): CancelablePromise<GetMediaByIdAuditLogResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}/audit-log',\n            path: {\n                id: data.id\n            },\n            query: {\n                orderDirection: data.orderDirection,\n                sinceDate: data.sinceDate,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaByIdMove(data: PutMediaByIdMoveData): CancelablePromise<PutMediaByIdMoveResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaByIdMoveToRecycleBin(data: PutMediaByIdMoveToRecycleBinData): CancelablePromise<PutMediaByIdMoveToRecycleBinResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaByIdReferencedBy(data: GetMediaByIdReferencedByData): CancelablePromise<GetMediaByIdReferencedByResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}/referenced-by',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaByIdReferencedDescendants(data: GetMediaByIdReferencedDescendantsData): CancelablePromise<GetMediaByIdReferencedDescendantsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaByIdValidate(data: PutMediaByIdValidateData): CancelablePromise<PutMediaByIdValidateResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}/validate',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaAreReferenced(data: GetMediaAreReferencedData = {}): CancelablePromise<GetMediaAreReferencedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/are-referenced',\n            query: {\n                id: data.id,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaConfiguration(): CancelablePromise<GetMediaConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaSort(data: PutMediaSortData = {}): CancelablePromise<PutMediaSortResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/sort',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaUrls(data: GetMediaUrlsData = {}): CancelablePromise<GetMediaUrlsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/urls',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postMediaValidate(data: PostMediaValidateData = {}): CancelablePromise<PostMediaValidateResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media/validate',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinMedia(): CancelablePromise<DeleteRecycleBinMediaResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/media',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinMediaById(data: DeleteRecycleBinMediaByIdData): CancelablePromise<DeleteRecycleBinMediaByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinMediaByIdOriginalParent(data: GetRecycleBinMediaByIdOriginalParentData): CancelablePromise<GetRecycleBinMediaByIdOriginalParentResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putRecycleBinMediaByIdRestore(data: PutRecycleBinMediaByIdRestoreData): CancelablePromise<PutRecycleBinMediaByIdRestoreResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinMediaChildren(data: GetRecycleBinMediaChildrenData = {}): CancelablePromise<GetRecycleBinMediaChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/media/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinMediaRoot(data: GetRecycleBinMediaRootData = {}): CancelablePromise<GetRecycleBinMediaRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/media/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaAncestors(data: GetTreeMediaAncestorsData = {}): CancelablePromise<GetTreeMediaAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaChildren(data: GetTreeMediaChildrenData = {}): CancelablePromise<GetTreeMediaChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaRoot(data: GetTreeMediaRootData = {}): CancelablePromise<GetTreeMediaRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MemberGroupService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberGroup(data: GetItemMemberGroupData = {}): CancelablePromise<GetItemMemberGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member-group',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberGroup(data: GetMemberGroupData = {}): CancelablePromise<GetMemberGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-group',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMemberGroup(data: PostMemberGroupData = {}): CancelablePromise<PostMemberGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-group',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberGroupById(data: GetMemberGroupByIdData): CancelablePromise<GetMemberGroupByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-group/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMemberGroupById(data: DeleteMemberGroupByIdData): CancelablePromise<DeleteMemberGroupByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/member-group/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberGroupById(data: PutMemberGroupByIdData): CancelablePromise<PutMemberGroupByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member-group/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMemberGroupRoot(data: GetTreeMemberGroupRootData = {}): CancelablePromise<GetTreeMemberGroupRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/member-group/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MemberTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberType(data: GetItemMemberTypeData = {}): CancelablePromise<GetItemMemberTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberTypeSearch(data: GetItemMemberTypeSearchData = {}): CancelablePromise<GetItemMemberTypeSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMemberType(data: PostMemberTypeData = {}): CancelablePromise<PostMemberTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberTypeById(data: GetMemberTypeByIdData): CancelablePromise<GetMemberTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMemberTypeById(data: DeleteMemberTypeByIdData): CancelablePromise<DeleteMemberTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/member-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberTypeById(data: PutMemberTypeByIdData): CancelablePromise<PutMemberTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberTypeByIdCompositionReferences(data: GetMemberTypeByIdCompositionReferencesData): CancelablePromise<GetMemberTypeByIdCompositionReferencesResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMemberTypeByIdCopy(data: PostMemberTypeByIdCopyData): CancelablePromise<PostMemberTypeByIdCopyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postMemberTypeAvailableCompositions(data: PostMemberTypeAvailableCompositionsData = {}): CancelablePromise<PostMemberTypeAvailableCompositionsResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-type/available-compositions',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMemberTypeRoot(data: GetTreeMemberTypeRootData = {}): CancelablePromise<GetTreeMemberTypeRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/member-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MemberService {\n    /**\n     * @param data The data for the request.\n     * @param data.memberTypeId\n     * @param data.memberGroupName\n     * @param data.isApproved\n     * @param data.isLockedOut\n     * @param data.orderBy\n     * @param data.orderDirection\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterMember(data: GetFilterMemberData = {}): CancelablePromise<GetFilterMemberResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/member',\n            query: {\n                memberTypeId: data.memberTypeId,\n                memberGroupName: data.memberGroupName,\n                isApproved: data.isApproved,\n                isLockedOut: data.isLockedOut,\n                orderBy: data.orderBy,\n                orderDirection: data.orderDirection,\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMember(data: GetItemMemberData = {}): CancelablePromise<GetItemMemberResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberSearch(data: GetItemMemberSearchData = {}): CancelablePromise<GetItemMemberSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMember(data: PostMemberData = {}): CancelablePromise<PostMemberResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberById(data: GetMemberByIdData): CancelablePromise<GetMemberByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMemberById(data: DeleteMemberByIdData): CancelablePromise<DeleteMemberByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/member/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberById(data: PutMemberByIdData): CancelablePromise<PutMemberByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberByIdValidate(data: PutMemberByIdValidateData): CancelablePromise<PutMemberByIdValidateResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member/{id}/validate',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberConfiguration(): CancelablePromise<GetMemberConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postMemberValidate(data: PostMemberValidateData = {}): CancelablePromise<PostMemberValidateResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member/validate',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class ModelsBuilderService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postModelsBuilderBuild(): CancelablePromise<PostModelsBuilderBuildResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/models-builder/build',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getModelsBuilderDashboard(): CancelablePromise<GetModelsBuilderDashboardResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/models-builder/dashboard',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getModelsBuilderStatus(): CancelablePromise<GetModelsBuilderStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/models-builder/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ObjectTypesService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getObjectTypes(data: GetObjectTypesData = {}): CancelablePromise<GetObjectTypesResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/object-types',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class OEmbedService {\n    /**\n     * @param data The data for the request.\n     * @param data.url\n     * @param data.maxWidth\n     * @param data.maxHeight\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getOembedQuery(data: GetOembedQueryData = {}): CancelablePromise<GetOembedQueryResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/oembed/query',\n            query: {\n                url: data.url,\n                maxWidth: data.maxWidth,\n                maxHeight: data.maxHeight\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PackageService {\n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPackageByNameRunMigration(data: PostPackageByNameRunMigrationData): CancelablePromise<PostPackageByNameRunMigrationResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/package/{name}/run-migration',\n            path: {\n                name: data.name\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageConfiguration(): CancelablePromise<GetPackageConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageCreated(data: GetPackageCreatedData = {}): CancelablePromise<GetPackageCreatedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/created',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postPackageCreated(data: PostPackageCreatedData = {}): CancelablePromise<PostPackageCreatedResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/package/created',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageCreatedById(data: GetPackageCreatedByIdData): CancelablePromise<GetPackageCreatedByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/created/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePackageCreatedById(data: DeletePackageCreatedByIdData): CancelablePromise<DeletePackageCreatedByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/package/created/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putPackageCreatedById(data: PutPackageCreatedByIdData): CancelablePromise<PutPackageCreatedByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/package/created/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageCreatedByIdDownload(data: GetPackageCreatedByIdDownloadData): CancelablePromise<GetPackageCreatedByIdDownloadResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/created/{id}/download',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageMigrationStatus(data: GetPackageMigrationStatusData = {}): CancelablePromise<GetPackageMigrationStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/migration-status',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PartialViewService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemPartialView(data: GetItemPartialViewData = {}): CancelablePromise<GetItemPartialViewResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/partial-view',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postPartialView(data: PostPartialViewData = {}): CancelablePromise<PostPartialViewResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/partial-view',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewByPath(data: GetPartialViewByPathData): CancelablePromise<GetPartialViewByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePartialViewByPath(data: DeletePartialViewByPathData): CancelablePromise<DeletePartialViewByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/partial-view/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putPartialViewByPath(data: PutPartialViewByPathData): CancelablePromise<PutPartialViewByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/partial-view/{path}',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static putPartialViewByPathRename(data: PutPartialViewByPathRenameData): CancelablePromise<PutPartialViewByPathRenameResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/partial-view/{path}/rename',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postPartialViewFolder(data: PostPartialViewFolderData = {}): CancelablePromise<PostPartialViewFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/partial-view/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewFolderByPath(data: GetPartialViewFolderByPathData): CancelablePromise<GetPartialViewFolderByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/folder/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePartialViewFolderByPath(data: DeletePartialViewFolderByPathData): CancelablePromise<DeletePartialViewFolderByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/partial-view/folder/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewSnippet(data: GetPartialViewSnippetData = {}): CancelablePromise<GetPartialViewSnippetResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/snippet',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewSnippetById(data: GetPartialViewSnippetByIdData): CancelablePromise<GetPartialViewSnippetByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreePartialViewAncestors(data: GetTreePartialViewAncestorsData = {}): CancelablePromise<GetTreePartialViewAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreePartialViewChildren(data: GetTreePartialViewChildrenData = {}): CancelablePromise<GetTreePartialViewChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/partial-view/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreePartialViewRoot(data: GetTreePartialViewRootData = {}): CancelablePromise<GetTreePartialViewRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/partial-view/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PreviewService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePreview(): CancelablePromise<DeletePreviewResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/preview',\n            responseHeader: 'Umb-Notifications'\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPreview(): CancelablePromise<PostPreviewResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/preview',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class ProfilingService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getProfilingStatus(): CancelablePromise<GetProfilingStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/profiling/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putProfilingStatus(data: PutProfilingStatusData = {}): CancelablePromise<PutProfilingStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/profiling/status',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PropertyTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.contentTypeId\n     * @param data.propertyAlias\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static getPropertyTypeIsUsed(data: GetPropertyTypeIsUsedData = {}): CancelablePromise<GetPropertyTypeIsUsedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/property-type/is-used',\n            query: {\n                contentTypeId: data.contentTypeId,\n                propertyAlias: data.propertyAlias\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PublishedCacheService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPublishedCacheCollect(): CancelablePromise<PostPublishedCacheCollectResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/published-cache/collect',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPublishedCacheRebuild(): CancelablePromise<PostPublishedCacheRebuildResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/published-cache/rebuild',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPublishedCacheReload(): CancelablePromise<PostPublishedCacheReloadResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/published-cache/reload',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getPublishedCacheStatus(): CancelablePromise<GetPublishedCacheStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/published-cache/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class RedirectManagementService {\n    /**\n     * @param data The data for the request.\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRedirectManagement(data: GetRedirectManagementData = {}): CancelablePromise<GetRedirectManagementResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/redirect-management',\n            query: {\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRedirectManagementById(data: GetRedirectManagementByIdData): CancelablePromise<GetRedirectManagementByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/redirect-management/{id}',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRedirectManagementById(data: DeleteRedirectManagementByIdData): CancelablePromise<DeleteRedirectManagementByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/redirect-management/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRedirectManagementStatus(): CancelablePromise<GetRedirectManagementStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/redirect-management/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.status\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postRedirectManagementStatus(data: PostRedirectManagementStatusData = {}): CancelablePromise<PostRedirectManagementStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/redirect-management/status',\n            query: {\n                status: data.status\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class RelationTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemRelationType(data: GetItemRelationTypeData = {}): CancelablePromise<GetItemRelationTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/relation-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRelationType(data: GetRelationTypeData = {}): CancelablePromise<GetRelationTypeResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/relation-type',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRelationTypeById(data: GetRelationTypeByIdData): CancelablePromise<GetRelationTypeByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/relation-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class RelationService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRelationByRelationTypeId(data: GetRelationByRelationTypeIdData): CancelablePromise<GetRelationByRelationTypeIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/relation/type/{id}',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class ScriptService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemScript(data: GetItemScriptData = {}): CancelablePromise<GetItemScriptResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/script',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postScript(data: PostScriptData = {}): CancelablePromise<PostScriptResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/script',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getScriptByPath(data: GetScriptByPathData): CancelablePromise<GetScriptByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/script/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteScriptByPath(data: DeleteScriptByPathData): CancelablePromise<DeleteScriptByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/script/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putScriptByPath(data: PutScriptByPathData): CancelablePromise<PutScriptByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/script/{path}',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static putScriptByPathRename(data: PutScriptByPathRenameData): CancelablePromise<PutScriptByPathRenameResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/script/{path}/rename',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postScriptFolder(data: PostScriptFolderData = {}): CancelablePromise<PostScriptFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/script/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getScriptFolderByPath(data: GetScriptFolderByPathData): CancelablePromise<GetScriptFolderByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/script/folder/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteScriptFolderByPath(data: DeleteScriptFolderByPathData): CancelablePromise<DeleteScriptFolderByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/script/folder/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeScriptAncestors(data: GetTreeScriptAncestorsData = {}): CancelablePromise<GetTreeScriptAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/script/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeScriptChildren(data: GetTreeScriptChildrenData = {}): CancelablePromise<GetTreeScriptChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/script/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeScriptRoot(data: GetTreeScriptRootData = {}): CancelablePromise<GetTreeScriptRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/script/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class SearcherService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSearcher(data: GetSearcherData = {}): CancelablePromise<GetSearcherResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/searcher',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.searcherName\n     * @param data.term\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSearcherBySearcherNameQuery(data: GetSearcherBySearcherNameQueryData): CancelablePromise<GetSearcherBySearcherNameQueryResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',\n            path: {\n                searcherName: data.searcherName\n            },\n            query: {\n                term: data.term,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class SecurityService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSecurityConfiguration(): CancelablePromise<GetSecurityConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/security/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postSecurityForgotPassword(data: PostSecurityForgotPasswordData = {}): CancelablePromise<PostSecurityForgotPasswordResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/security/forgot-password',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string No Content\n     * @throws ApiError\n     */\n    public static postSecurityForgotPasswordReset(data: PostSecurityForgotPasswordResetData = {}): CancelablePromise<PostSecurityForgotPasswordResetResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/security/forgot-password/reset',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postSecurityForgotPasswordVerify(data: PostSecurityForgotPasswordVerifyData = {}): CancelablePromise<PostSecurityForgotPasswordVerifyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/security/forgot-password/verify',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class SegmentService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSegment(data: GetSegmentData = {}): CancelablePromise<GetSegmentResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/segment',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ServerService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerConfiguration(): CancelablePromise<GetServerConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerInformation(): CancelablePromise<GetServerInformationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/information',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerStatus(): CancelablePromise<GetServerStatusResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/status',\n            errors: {\n                400: 'Bad Request'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerTroubleshooting(): CancelablePromise<GetServerTroubleshootingResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/troubleshooting',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class StaticFileService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemStaticFile(data: GetItemStaticFileData = {}): CancelablePromise<GetItemStaticFileResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/static-file',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStaticFileAncestors(data: GetTreeStaticFileAncestorsData = {}): CancelablePromise<GetTreeStaticFileAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/static-file/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStaticFileChildren(data: GetTreeStaticFileChildrenData = {}): CancelablePromise<GetTreeStaticFileChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/static-file/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStaticFileRoot(data: GetTreeStaticFileRootData = {}): CancelablePromise<GetTreeStaticFileRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/static-file/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class StylesheetService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemStylesheet(data: GetItemStylesheetData = {}): CancelablePromise<GetItemStylesheetResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/stylesheet',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postStylesheet(data: PostStylesheetData = {}): CancelablePromise<PostStylesheetResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/stylesheet',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getStylesheetByPath(data: GetStylesheetByPathData): CancelablePromise<GetStylesheetByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteStylesheetByPath(data: DeleteStylesheetByPathData): CancelablePromise<DeleteStylesheetByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putStylesheetByPath(data: PutStylesheetByPathData): CancelablePromise<PutStylesheetByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static putStylesheetByPathRename(data: PutStylesheetByPathRenameData): CancelablePromise<PutStylesheetByPathRenameResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postStylesheetFolder(data: PostStylesheetFolderData = {}): CancelablePromise<PostStylesheetFolderResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/stylesheet/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getStylesheetFolderByPath(data: GetStylesheetFolderByPathData): CancelablePromise<GetStylesheetFolderByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteStylesheetFolderByPath(data: DeleteStylesheetFolderByPathData): CancelablePromise<DeleteStylesheetFolderByPathResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStylesheetAncestors(data: GetTreeStylesheetAncestorsData = {}): CancelablePromise<GetTreeStylesheetAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStylesheetChildren(data: GetTreeStylesheetChildrenData = {}): CancelablePromise<GetTreeStylesheetChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/stylesheet/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStylesheetRoot(data: GetTreeStylesheetRootData = {}): CancelablePromise<GetTreeStylesheetRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/stylesheet/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class TagService {\n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.tagGroup\n     * @param data.culture\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTag(data: GetTagData = {}): CancelablePromise<GetTagResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tag',\n            query: {\n                query: data.query,\n                tagGroup: data.tagGroup,\n                culture: data.culture,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class TelemetryService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTelemetry(data: GetTelemetryData = {}): CancelablePromise<GetTelemetryResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/telemetry',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTelemetryLevel(): CancelablePromise<GetTelemetryLevelResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/telemetry/level',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postTelemetryLevel(data: PostTelemetryLevelData = {}): CancelablePromise<PostTelemetryLevelResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/telemetry/level',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class TemplateService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemTemplate(data: GetItemTemplateData = {}): CancelablePromise<GetItemTemplateResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/template',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemTemplateSearch(data: GetItemTemplateSearchData = {}): CancelablePromise<GetItemTemplateSearchResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/template/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postTemplate(data: PostTemplateData = {}): CancelablePromise<PostTemplateResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/template',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemplateById(data: GetTemplateByIdData): CancelablePromise<GetTemplateByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/template/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteTemplateById(data: DeleteTemplateByIdData): CancelablePromise<DeleteTemplateByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/template/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putTemplateById(data: PutTemplateByIdData): CancelablePromise<PutTemplateByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/template/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemplateConfiguration(): CancelablePromise<GetTemplateConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/template/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postTemplateQueryExecute(data: PostTemplateQueryExecuteData = {}): CancelablePromise<PostTemplateQueryExecuteResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/template/query/execute',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemplateQuerySettings(): CancelablePromise<GetTemplateQuerySettingsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/template/query/settings',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeTemplateAncestors(data: GetTreeTemplateAncestorsData = {}): CancelablePromise<GetTreeTemplateAncestorsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/template/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeTemplateChildren(data: GetTreeTemplateChildrenData = {}): CancelablePromise<GetTreeTemplateChildrenResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/template/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeTemplateRoot(data: GetTreeTemplateRootData = {}): CancelablePromise<GetTreeTemplateRootResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/template/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class TemporaryFileService {\n    /**\n     * @param data The data for the request.\n     * @param data.formData\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postTemporaryFile(data: PostTemporaryFileData = {}): CancelablePromise<PostTemporaryFileResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/temporary-file',\n            formData: data.formData,\n            mediaType: 'multipart/form-data',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemporaryFileById(data: GetTemporaryFileByIdData): CancelablePromise<GetTemporaryFileByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/temporary-file/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteTemporaryFileById(data: DeleteTemporaryFileByIdData): CancelablePromise<DeleteTemporaryFileByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/temporary-file/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemporaryFileConfiguration(): CancelablePromise<GetTemporaryFileConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/temporary-file/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class UpgradeService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUpgradeAuthorize(): CancelablePromise<PostUpgradeAuthorizeResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/upgrade/authorize',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                428: 'Precondition Required',\n                500: 'Internal Server Error'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUpgradeSettings(): CancelablePromise<GetUpgradeSettingsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/upgrade/settings',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n}\n\nexport class UserDataService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUserData(data: PostUserDataData = {}): CancelablePromise<PostUserDataResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user-data',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.groups\n     * @param data.identifiers\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserData(data: GetUserDataData = {}): CancelablePromise<GetUserDataResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-data',\n            query: {\n                groups: data.groups,\n                identifiers: data.identifiers,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putUserData(data: PutUserDataData = {}): CancelablePromise<PutUserDataResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/user-data',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserDataById(data: GetUserDataByIdData): CancelablePromise<GetUserDataByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-data/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class UserGroupService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.filter\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterUserGroup(data: GetFilterUserGroupData = {}): CancelablePromise<GetFilterUserGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/user-group',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                filter: data.filter\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemUserGroup(data: GetItemUserGroupData = {}): CancelablePromise<GetItemUserGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/user-group',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserGroup(data: DeleteUserGroupData = {}): CancelablePromise<DeleteUserGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user-group',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUserGroup(data: PostUserGroupData = {}): CancelablePromise<PostUserGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user-group',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserGroup(data: GetUserGroupData = {}): CancelablePromise<GetUserGroupResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-group',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserGroupById(data: GetUserGroupByIdData): CancelablePromise<GetUserGroupByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-group/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserGroupById(data: DeleteUserGroupByIdData): CancelablePromise<DeleteUserGroupByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user-group/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putUserGroupById(data: PutUserGroupByIdData): CancelablePromise<PutUserGroupByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/user-group/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserGroupByIdUsers(data: DeleteUserGroupByIdUsersData): CancelablePromise<DeleteUserGroupByIdUsersResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user-group/{id}/users',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserGroupByIdUsers(data: PostUserGroupByIdUsersData): CancelablePromise<PostUserGroupByIdUsersResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user-group/{id}/users',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class UserService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.orderBy\n     * @param data.orderDirection\n     * @param data.userGroupIds\n     * @param data.userStates\n     * @param data.filter\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterUser(data: GetFilterUserData = {}): CancelablePromise<GetFilterUserResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/user',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                orderBy: data.orderBy,\n                orderDirection: data.orderDirection,\n                userGroupIds: data.userGroupIds,\n                userStates: data.userStates,\n                filter: data.filter\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemUser(data: GetItemUserData = {}): CancelablePromise<GetItemUserResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/user',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUser(data: PostUserData = {}): CancelablePromise<PostUserResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUser(data: DeleteUserData = {}): CancelablePromise<DeleteUserResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUser(data: GetUserData = {}): CancelablePromise<GetUserResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserById(data: GetUserByIdData): CancelablePromise<GetUserByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserById(data: DeleteUserByIdData): CancelablePromise<DeleteUserByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putUserById(data: PutUserByIdData): CancelablePromise<PutUserByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/user/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserById2Fa(data: GetUserById2FaData): CancelablePromise<GetUserById2FaResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/{id}/2fa',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.providerName\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserById2FaByProviderName(data: DeleteUserById2FaByProviderNameData): CancelablePromise<DeleteUserById2FaByProviderNameResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',\n            path: {\n                id: data.id,\n                providerName: data.providerName\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserByIdCalculateStartNodes(data: GetUserByIdCalculateStartNodesData): CancelablePromise<GetUserByIdCalculateStartNodesResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserByIdChangePassword(data: PostUserByIdChangePasswordData): CancelablePromise<PostUserByIdChangePasswordResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/{id}/change-password',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUserByIdResetPassword(data: PostUserByIdResetPasswordData): CancelablePromise<PostUserByIdResetPasswordResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/{id}/reset-password',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserAvatarById(data: DeleteUserAvatarByIdData): CancelablePromise<DeleteUserAvatarByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/avatar/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserAvatarById(data: PostUserAvatarByIdData): CancelablePromise<PostUserAvatarByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/avatar/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserConfiguration(): CancelablePromise<GetUserConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrent(): CancelablePromise<GetUserCurrentResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrent2Fa(): CancelablePromise<GetUserCurrent2FaResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/2fa',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.providerName\n     * @param data.code\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserCurrent2FaByProviderName(data: DeleteUserCurrent2FaByProviderNameData): CancelablePromise<DeleteUserCurrent2FaByProviderNameResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\n            path: {\n                providerName: data.providerName\n            },\n            query: {\n                code: data.code\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.providerName\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUserCurrent2FaByProviderName(data: PostUserCurrent2FaByProviderNameData): CancelablePromise<PostUserCurrent2FaByProviderNameResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\n            path: {\n                providerName: data.providerName\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.providerName\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrent2FaByProviderName(data: GetUserCurrent2FaByProviderNameData): CancelablePromise<GetUserCurrent2FaByProviderNameResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\n            path: {\n                providerName: data.providerName\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserCurrentAvatar(data: PostUserCurrentAvatarData = {}): CancelablePromise<PostUserCurrentAvatarResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/current/avatar',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserCurrentChangePassword(data: PostUserCurrentChangePasswordData = {}): CancelablePromise<PostUserCurrentChangePasswordResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/current/change-password',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentConfiguration(): CancelablePromise<GetUserCurrentConfigurationResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentLoginProviders(): CancelablePromise<GetUserCurrentLoginProvidersResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/login-providers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentPermissions(data: GetUserCurrentPermissionsData = {}): CancelablePromise<GetUserCurrentPermissionsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/permissions',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentPermissionsDocument(data: GetUserCurrentPermissionsDocumentData = {}): CancelablePromise<GetUserCurrentPermissionsDocumentResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/permissions/document',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentPermissionsMedia(data: GetUserCurrentPermissionsMediaData = {}): CancelablePromise<GetUserCurrentPermissionsMediaResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/permissions/media',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserDisable(data: PostUserDisableData = {}): CancelablePromise<PostUserDisableResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/disable',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserEnable(data: PostUserEnableData = {}): CancelablePromise<PostUserEnableResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/enable',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUserInvite(data: PostUserInviteData = {}): CancelablePromise<PostUserInviteResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserInviteCreatePassword(data: PostUserInviteCreatePasswordData = {}): CancelablePromise<PostUserInviteCreatePasswordResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite/create-password',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserInviteResend(data: PostUserInviteResendData = {}): CancelablePromise<PostUserInviteResendResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite/resend',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUserInviteVerify(data: PostUserInviteVerifyData = {}): CancelablePromise<PostUserInviteVerifyResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite/verify',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserSetUserGroups(data: PostUserSetUserGroupsData = {}): CancelablePromise<PostUserSetUserGroupsResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/set-user-groups',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserUnlock(data: PostUserUnlockData = {}): CancelablePromise<PostUserUnlockResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/unlock',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class WebhookService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemWebhook(data: GetItemWebhookData = {}): CancelablePromise<GetItemWebhookResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/webhook',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getWebhook(data: GetWebhookData = {}): CancelablePromise<GetWebhookResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/webhook',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postWebhook(data: PostWebhookData = {}): CancelablePromise<PostWebhookResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/webhook',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getWebhookById(data: GetWebhookByIdData): CancelablePromise<GetWebhookByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/webhook/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteWebhookById(data: DeleteWebhookByIdData): CancelablePromise<DeleteWebhookByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/webhook/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putWebhookById(data: PutWebhookByIdData): CancelablePromise<PutWebhookByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/webhook/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getWebhookEvents(data: GetWebhookEventsData = {}): CancelablePromise<GetWebhookEventsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/webhook/events',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}","import { LitElement, html, customElement, unsafeHTML} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UMB_DOCUMENT_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/document\";\r\nimport { UmbWorkspaceUniqueType } from \"@umbraco-cms/backoffice/workspace\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { observeMultiple } from \"@umbraco-cms/backoffice/observable-api\";\r\nimport { debounce } from \"@umbraco-cms/backoffice/utils\";\r\nimport { DocumentTypeService, DataTypeService } from \"../api\";\r\n\r\n\r\n@customElement('knowit-instant-block-preview')\r\nexport class InstantBlockPreview extends UmbElementMixin(LitElement) {\r\n\r\n  #contentVals : any |undefined = undefined;\r\n  #definitions: any | undefined = undefined;\r\n  #currentValue : any | undefined = undefined;\r\n  #currentId : UmbWorkspaceUniqueType | undefined = undefined;\r\n  #propertyType: string | undefined = undefined;\r\n  #documentTypeId: string | undefined = undefined;\r\n  #label: string | undefined = undefined;\r\n  #loader = `<uui-loader style=\"margin-right: 20px\"></uui-loader> Loading preview...`;\r\n  #showLoader = false;\r\n  #htmlOutput = ``;\r\n  #areas: any | undefined = undefined;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.#contentVals = {};\r\n    this.#definitions = {};\r\n    this.#htmlOutput = this.blockBeam();\r\n\r\n    // currently not exposed by the context-api, so we need to create our own\r\n    const UMB_BLOCK_GRID_ENTRY_CONTEXT = new UmbContextToken<any>('UmbBlockEntryContext')\r\n    const UMB_BLOCK_LIST_ENTRY_CONTEXT = new UmbContextToken<any>('UmbBlockEntryContext');\r\n    \r\n    // fetch id and type-id from the document\r\n    this.consumeContext(UMB_DOCUMENT_WORKSPACE_CONTEXT, (workspaceContext) => {\r\n      this.#currentId = workspaceContext.getUnique();\r\n      this.#documentTypeId = workspaceContext.getContentTypeId();\r\n    });\r\n\r\n\r\n    \r\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\r\n      this.#propertyType = propertyContext.getAlias();\r\n    \r\n      // handle block grid\r\n      this.consumeContext(UMB_BLOCK_GRID_ENTRY_CONTEXT, (context) => {\r\n        \r\n        // fetch the label of the block and init the blockbeam with the label\r\n        this.observe(context.label, (label) => {\r\n          this.#label = label as string;\r\n          this.#htmlOutput = this.blockBeam();\r\n          this.requestUpdate();\r\n        });\r\n        \r\n        // handle the block whenever content or value change\r\n        this.observe(observeMultiple(context.content, propertyContext.value), ([content, currentValue]) => {\r\n          const anyContent = content as any;\r\n\r\n          if (this.#definitions[anyContent.contentTypeKey] === undefined) {\r\n            DocumentTypeService.getDocumentTypeById({ id: anyContent.contentTypeKey }).then((response) => {\r\n              // Create an array of promises for all DataTypeService.getDataTypeById calls\r\n              const promises = response.properties.map((prop) => {\r\n                return DataTypeService.getDataTypeById({ id: prop.dataType.id }).then((dataType) => {\r\n                  this.#definitions[prop.alias] = dataType.editorAlias;\r\n                });\r\n              });\r\n\r\n              // Use Promise.all to wait for all DataTypeService.getDataTypeById promises to resolve\r\n              Promise.all(promises).then(() => {\r\n                // All datatypes are loaded, now handle the block\r\n                this.handleBlock(anyContent, currentValue);\r\n              });\r\n            });\r\n          } else {\r\n            this.handleBlock(anyContent, currentValue);\r\n          }\r\n\r\n        });\r\n\r\n        // handle areas\r\n        if(context.areas) {\r\n          this.observe(context.areas, areas => {\r\n            this.#areas = areas;\r\n          });\r\n        }\r\n      });\r\n      \r\n      // handle block list\r\n      this.consumeContext(UMB_BLOCK_LIST_ENTRY_CONTEXT, (context) => {\r\n        this.observe(context.label, (label) => {\r\n          this.#label = label as string;\r\n          this.#htmlOutput = this.blockBeam();\r\n          this.requestUpdate();\r\n        });\r\n\r\n        this.observe(observeMultiple(context.content, propertyContext.value), ([content, currentValue]) => {\r\n          \r\n          const anyContent = content as any;\r\n\r\n          if (this.#definitions[anyContent.contentTypeKey] === undefined) {\r\n            DocumentTypeService.getDocumentTypeById({ id: anyContent.contentTypeKey }).then((response) => {\r\n              // Create an array of promises for all DataTypeService.getDataTypeById calls\r\n              const promises = response.properties.map((prop) => {\r\n                return DataTypeService.getDataTypeById({ id: prop.dataType.id }).then((dataType) => {\r\n                  this.#definitions[prop.alias] = dataType.editorAlias;\r\n                });\r\n              });\r\n          \r\n              // Use Promise.all to wait for all DataTypeService.getDataTypeById promises to resolve\r\n              Promise.all(promises).then(() => {\r\n                // All datatypes are loaded, now handle the block\r\n                this.handleBlock(anyContent, currentValue);\r\n              });\r\n            });\r\n          } else {\r\n            this.handleBlock(anyContent, currentValue);\r\n          }\r\n          \r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  parseBadKeys(content: any) {\r\n    for (const key in content) {\r\n      const value = content[key];\r\n      const editorAlias = this.#definitions[key];\r\n      console.log(key,{value, editorAlias});\r\n      \r\n      if(editorAlias) {\r\n        switch(editorAlias) {\r\n          case \"Umbraco.Tags\":\r\n            content[key] = JSON.stringify(value);\r\n          break;\r\n          case \"Umbraco.ContentPicker\":\r\n            const newItem = `umb://document/${value}`;\r\n            content[key] = newItem;\r\n          break;\r\n          case \"Umbraco.DropDown.Flexible\": \r\n            content[key] = JSON.stringify(value);\r\n          break;\r\n          case \"Umbraco.CheckBoxList\": \r\n            content[key] = JSON.stringify(value);\r\n          break;\r\n\r\n          case \"Umbraco.MultipleTextstring\": \r\n            content[key] = value.join('\\n');\r\n          break;\r\n          case \"Umbraco.MultiNodeTreePicker\": \r\n            for (let i = 0; i < content[key].length; i++) {\r\n              const newItem = `umb://${content[key][i].type}/${content[key][i].unique}`;\r\n              content[key][i] = newItem;\r\n            }\r\n            content[key] = content[key].join(',');\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return content;\r\n  }\r\n\r\n  handleBlock(content : any, currentValue : any) {\r\n    this.#showLoader = true;\r\n    \r\n    if(!currentValue) return;\r\n    // make them mutable\r\n    const obj = JSON.parse(JSON.stringify(currentValue));\r\n    content = JSON.parse(JSON.stringify(content));\r\n    \r\n    // only process if the content has changed\r\n    if(this.#contentVals[content.udi] && JSON.stringify(this.#contentVals[content.udi]) === JSON.stringify(content)) {\r\n      return;\r\n    }\r\n    \r\n\r\n    this.#contentVals[content.udi] = content;\r\n    \r\n    const index = obj.contentData.findIndex((f: { udi: any; }) => f.udi == content.udi);\r\n    \r\n    obj.contentData[index] = content;\r\n    obj.target = content.udi;\r\n    \r\n\r\n    for(let i = 0; i < obj.settingsData.length; i++) {\r\n      obj.settingsData[i] = this.parseBadKeys(obj.settingsData[i]);\r\n    }\r\n\r\n    for(let i = 0; i < obj.contentData.length; i++) {\r\n      obj.contentData[i] = this.parseBadKeys(obj.contentData[i]);\r\n    }\r\n    \r\n    this.#currentValue = obj;\r\n\r\n    const payload = {\r\n      content: JSON.stringify(this.#currentValue),\r\n      contentId: this.#currentId,\r\n      propertyTypeAlias: this.#propertyType,\r\n      contentTypeId: this.#documentTypeId,\r\n    }\r\n\r\n    fetch('/api/blockpreview', {\r\n      method: 'POST',\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(response => response.json()).then(data => {\r\n      \r\n      this.#showLoader = false;\r\n      if(data.html === \"blockbeam\")\r\n        this.#htmlOutput = this.blockBeam();  \r\n      else {\r\n        const containsRenderGridAreaSlots = data.html.includes(\"###renderGridAreaSlots\");\r\n        if(containsRenderGridAreaSlots) {\r\n          const areaHtml = this.areas();\r\n          data.html = data.html.replace(\"###renderGridAreaSlots\", areaHtml);\r\n        }\r\n\r\n        this.#htmlOutput = '<div style=\"border: 1px solid var(--uui-color-border,#d8d7d9); min-height: 50px; box-sizing: border-box;\">' + data.html + '</div>';\r\n      }\r\n      this.requestUpdate();\r\n\r\n      \r\n      const debouncedScriptParser = debounce(() => {\r\n        this.manageScripts();\r\n      }, 100);\r\n  \r\n      debouncedScriptParser();\r\n    });\r\n\r\n  }\r\n\r\n  manageScripts() {\r\n    const scripts = this.shadowRoot?.querySelectorAll('script');\r\n    scripts?.forEach(oldScript => {\r\n      const newScript = document.createElement('script');\r\n\r\n      // Copy attributes from old script to new script\r\n      Array.from(oldScript.attributes).forEach(attr => {\r\n        newScript.setAttribute(attr.name, attr.value);\r\n      });\r\n\r\n      // Copy the inline script content\r\n      if (oldScript.src) {\r\n        // If the script has a src attribute, set it to the new script\r\n        newScript.src = oldScript.src;\r\n      } else {\r\n        // Otherwise, set the inline script content\r\n        newScript.textContent = oldScript.textContent;\r\n      }\r\n\r\n      // Append the new script to the same parent node\r\n      oldScript?.parentNode?.replaceChild(newScript, oldScript);\r\n    });\r\n  }\r\n\r\n  areas() {\r\n    // todo, fix href\r\n    return this.#areas && this.#areas.length > 0\r\n    ? `\r\n      <umb-ref-grid-block standalone href=\"\">\r\n        <span style=\"margin-right: 20px\">${this.#label}</span> ${this.#showLoader ? this.#loader : ''}\r\n        <umb-block-grid-areas-container slot=\"areas\"></umb-block-grid-areas-container>\r\n      </umb-ref-grid-block>\r\n      `\r\n    : '';\r\n\r\n  }\r\n\r\n  blockBeam() {\r\n    // todo, fix href\r\n    return `\r\n    <umb-ref-grid-block standalone href=\"\">\r\n      <span style=\"margin-right: 20px\">${this.#label}</span> ${this.#showLoader ? this.#loader : ''}\r\n\t\t</umb-ref-grid-block>`\r\n  }\r\n\r\n  render() {\r\n    return html`${unsafeHTML(this.#htmlOutput)}`;\r\n  }\r\n}\r\n\r\nexport default InstantBlockPreview;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'knowit-instant-block-preview': InstantBlockPreview;\r\n  }\r\n}"],"names":["ApiError","request","response","message","CancelError","CancelablePromise","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","encodePair","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","process","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","_b","sendRequest","body","controller","fn","getResponseHeader","responseHeader","content","getResponseBody","contentType","binaryTypes","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","transformedBody","DataTypeService","data","__request","OpenAPI","DocumentTypeService","_contentVals","_definitions","_currentValue","_currentId","_propertyType","_documentTypeId","_label","_loader","_showLoader","_htmlOutput","_areas","InstantBlockPreview","UmbElementMixin","LitElement","__privateAdd","__privateSet","UMB_BLOCK_GRID_ENTRY_CONTEXT","UmbContextToken","UMB_BLOCK_LIST_ENTRY_CONTEXT","UMB_DOCUMENT_WORKSPACE_CONTEXT","workspaceContext","UMB_PROPERTY_CONTEXT","propertyContext","context","label","observeMultiple","currentValue","anyContent","__privateGet","promises","prop","dataType","areas","editorAlias","newItem","i","obj","index","f","payload","areaHtml","debounce","scripts","oldScript","newScript","attr","html","unsafeHTML","__decorateClass","customElement","InstantBlockPreview$1"],"mappings":";;;;;;;;AAGO,MAAMA,UAAiB,MAAM;AAAA,EAOnC,YAAYC,GAA4BC,GAAqBC,GAAiB;AAC7E,UAAMA,CAAO,GAEb,KAAK,OAAO,YACZ,KAAK,MAAMD,EAAS,KACpB,KAAK,SAASA,EAAS,QACvB,KAAK,aAAaA,EAAS,YAC3B,KAAK,OAAOA,EAAS,MACrB,KAAK,UAAUD;AAAA,EAChB;AACD;ACpBO,MAAMG,UAAoB,MAAM;AAAA,EACtC,YAAYD,GAAiB;AAC5B,UAAMA,CAAO,GACb,KAAK,OAAO;AAAA,EACb;AAAA,EAEA,IAAW,cAAuB;AAC1B,WAAA;AAAA,EACR;AACD;AAUO,MAAME,EAA2C;AAAA,EASvD,YACCC,GAKC;AACD,SAAK,cAAc,IACnB,KAAK,cAAc,IACnB,KAAK,eAAe,IACpB,KAAK,iBAAiB,IACtB,KAAK,UAAU,IAAI,QAAW,CAACC,GAASC,MAAW;AAClD,WAAK,WAAWD,GAChB,KAAK,UAAUC;AAET,YAAAC,IAAY,CAACC,MAAoC;AACtD,QAAI,KAAK,eAAe,KAAK,eAAe,KAAK,iBAGjD,KAAK,cAAc,IACf,KAAK,YAAe,KAAA,SAASA,CAAK;AAAA,MAAA,GAGjCC,IAAW,CAACC,MAA2B;AAC5C,QAAI,KAAK,eAAe,KAAK,eAAe,KAAK,iBAGjD,KAAK,cAAc,IACf,KAAK,WAAc,KAAA,QAAQA,CAAM;AAAA,MAAA,GAGhCC,IAAW,CAACC,MAAoC;AACrD,QAAI,KAAK,eAAe,KAAK,eAAe,KAAK,gBAG5C,KAAA,eAAe,KAAKA,CAAa;AAAA,MAAA;AAGhC,oBAAA,eAAeD,GAAU,cAAc;AAAA,QAC7C,KAAK,MAAe,KAAK;AAAA,MAAA,CACzB,GAEM,OAAA,eAAeA,GAAU,cAAc;AAAA,QAC7C,KAAK,MAAe,KAAK;AAAA,MAAA,CACzB,GAEM,OAAA,eAAeA,GAAU,eAAe;AAAA,QAC9C,KAAK,MAAe,KAAK;AAAA,MAAA,CACzB,GAEMP,EAASG,GAAWE,GAAUE,CAAoB;AAAA,IAAA,CACzD;AAAA,EACF;AAAA,EAEA,KAAK,OAAO,WAAW,IAAI;AACnB,WAAA;AAAA,EACR;AAAA,EAEO,KACNE,GACAC,GAC+B;AAC/B,WAAO,KAAK,QAAQ,KAAKD,GAAaC,CAAU;AAAA,EACjD;AAAA,EAEO,MACNA,GACuB;AAChB,WAAA,KAAK,QAAQ,MAAMA,CAAU;AAAA,EACrC;AAAA,EAEO,QAAQC,GAA6C;AACpD,WAAA,KAAK,QAAQ,QAAQA,CAAS;AAAA,EACtC;AAAA,EAEO,SAAe;AACrB,QAAI,OAAK,eAAe,KAAK,eAAe,KAAK,eAI7C;AAAA,UADJ,KAAK,eAAe,IAChB,KAAK,eAAe;AACnB,YAAA;AACQ,qBAAAH,KAAiB,KAAK;AAClB,YAAAA;iBAEPI,GAAO;AACP,kBAAA,KAAK,+BAA+BA,CAAK;AACjD;AAAA,QACD;AAED,WAAK,eAAe,SAAS,GACzB,KAAK,WAAS,KAAK,QAAQ,IAAId,EAAY,iBAAiB,CAAC;AAAA;AAAA,EAClE;AAAA,EAEA,IAAW,cAAuB;AACjC,WAAO,KAAK;AAAA,EACb;AACD;ACtHa,MAAAe,IAAW,CAACT,MACjB,OAAOA,KAAU,UAGZU,IAAoB,CAACV,MAC1BS,EAAST,CAAK,KAAKA,MAAU,IAGxBW,IAAS,CAACX,MACfA,aAAiB,MAGZY,IAAa,CAACZ,MACnBA,aAAiB,UAGZa,KAAS,CAACC,MAAwB;AAC1C,MAAA;AACH,WAAO,KAAKA,CAAG;AAAA,UACF;AAEb,WAAO,OAAO,KAAKA,CAAG,EAAE,SAAS,QAAQ;AAAA,EAC1C;AACD,GAEaC,KAAiB,CAACC,MAA4C;AAC1E,QAAMC,IAAe,CAAA,GAEfC,IAAS,CAACC,GAAanB,MAAmB;AAC5C,IAAAiB,EAAA,KAAK,GAAG,mBAAmBE,CAAG,CAAC,IAAI,mBAAmB,OAAOnB,CAAK,CAAC,CAAC,EAAE;AAAA,EAAA,GAGpEoB,IAAa,CAACD,GAAanB,MAAmB;AAC/C,IAAuBA,KAAU,SAIjCA,aAAiB,OACbkB,EAAAC,GAAKnB,EAAM,YAAa,CAAA,IACrB,MAAM,QAAQA,CAAK,IAC7BA,EAAM,QAAQ,CAAAqB,MAAKD,EAAWD,GAAKE,CAAC,CAAC,IAC3B,OAAOrB,KAAU,WAC3B,OAAO,QAAQA,CAAK,EAAE,QAAQ,CAAC,CAACsB,GAAGD,CAAC,MAAMD,EAAW,GAAGD,CAAG,IAAIG,CAAC,KAAKD,CAAC,CAAC,IAEvEH,EAAOC,GAAKnB,CAAK;AAAA,EAClB;AAGD,gBAAO,QAAQgB,CAAM,EAAE,QAAQ,CAAC,CAACG,GAAKnB,CAAK,MAAMoB,EAAWD,GAAKnB,CAAK,CAAC,GAEhEiB,EAAG,SAAS,IAAIA,EAAG,KAAK,GAAG,CAAC,KAAK;AACzC,GAEMM,KAAS,CAACC,GAAuBC,MAAuC;AACvE,QAAAC,IAAgC,WAEhCC,IAAOF,EAAQ,IACnB,QAAQ,iBAAiBD,EAAO,OAAO,EACvC,QAAQ,YAAY,CAACI,GAAmBC,MAAkB;;AAC1D,YAAIC,IAAAL,EAAQ,SAAR,QAAAK,EAAc,eAAeD,KACzBH,EAAQ,OAAOD,EAAQ,KAAKI,CAAK,CAAC,CAAC,IAEpCD;AAAA,EAAA,CACP,GAEIG,IAAMP,EAAO,OAAOG;AAC1B,SAAOF,EAAQ,QAAQM,IAAMhB,GAAeU,EAAQ,KAAK,IAAIM;AAC9D,GAEaC,KAAc,CAACP,MAAqD;AAChF,MAAIA,EAAQ,UAAU;AACf,UAAAQ,IAAW,IAAI,YAEfC,IAAU,CAACf,GAAanB,MAAmB;AAChD,MAAIS,EAAST,CAAK,KAAKW,EAAOX,CAAK,IACzBiC,EAAA,OAAOd,GAAKnB,CAAK,IAE1BiC,EAAS,OAAOd,GAAK,KAAK,UAAUnB,CAAK,CAAC;AAAA,IAC3C;AAGM,kBAAA,QAAQyB,EAAQ,QAAQ,EAC7B,OAAO,CAAC,CAAG,EAAAzB,CAAK,MAA6BA,KAAU,IAAI,EAC3D,QAAQ,CAAC,CAACmB,GAAKnB,CAAK,MAAM;AACtB,MAAA,MAAM,QAAQA,CAAK,IACtBA,EAAM,QAAQ,CAAAqB,MAAKa,EAAQf,GAAKE,CAAC,CAAC,IAElCa,EAAQf,GAAKnB,CAAK;AAAA,IACnB,CACA,GAEKiC;AAAA,EACR;AAED,GAIapC,IAAU,OAAU4B,GAA+BU,MAC3D,OAAOA,KAAa,aACfA,EAAyBV,CAAO,IAElCU,GAGKC,KAAa,OAAUZ,GAAuBC,MAAoD;AACxG,QAAA,CAACY,GAAOC,GAAUC,GAAUC,CAAiB,IAAI,MAAM,QAAQ,IAAI;AAAA;AAAA,IAExE3C,EAAQ4B,GAASD,EAAO,KAAK;AAAA;AAAA,IAE7B3B,EAAQ4B,GAASD,EAAO,QAAQ;AAAA;AAAA,IAEhC3B,EAAQ4B,GAASD,EAAO,QAAQ;AAAA;AAAA,IAEhC3B,EAAQ4B,GAASD,EAAO,OAAO;AAAA,EAAA,CAC/B,GAEKiB,IAAU,OAAO,QAAQ;AAAA,IAC9B,QAAQ;AAAA,IACR,GAAGD;AAAA,IACH,GAAGf,EAAQ;AAAA,EAAA,CACX,EACC,OAAO,CAAC,CAAA,EAAGzB,CAAK,MAA6BA,KAAU,IAAI,EAC3D,OAAO,CAACyC,GAAS,CAACtB,GAAKnB,CAAK,OAAO;AAAA,IACnC,GAAGyC;AAAAA,IACH,CAACtB,CAAG,GAAG,OAAOnB,CAAK;AAAA,EAAA,IAChB,CAA4B,CAAA;AAMjC,MAJIU,EAAkB2B,CAAK,MAClBI,EAAA,gBAAmB,UAAUJ,CAAK,KAGvC3B,EAAkB4B,CAAQ,KAAK5B,EAAkB6B,CAAQ,GAAG;AAC/D,UAAMG,IAAc7B,GAAO,GAAGyB,CAAQ,IAAIC,CAAQ,EAAE;AAC5C,IAAAE,EAAA,gBAAmB,SAASC,CAAW;AAAA,EAChD;AAEI,SAAAjB,EAAQ,SAAS,WAChBA,EAAQ,YACHgB,EAAA,cAAc,IAAIhB,EAAQ,YACxBd,EAAOc,EAAQ,IAAI,IAC7BgB,EAAQ,cAAc,IAAIhB,EAAQ,KAAK,QAAQ,6BACrChB,EAASgB,EAAQ,IAAI,IAC/BgB,EAAQ,cAAc,IAAI,eACf7B,EAAWa,EAAQ,IAAI,MAClCgB,EAAQ,cAAc,IAAI,sBAIrB,IAAI,QAAQA,CAAO;AAC3B,GAEaE,KAAiB,CAAClB,MAAwC;;AAClE,MAAAA,EAAQ,SAAS;AAChB,YAAAK,IAAAL,EAAQ,cAAR,QAAAK,EAAmB,SAAS,wBAAuBc,IAAAnB,EAAQ,cAAR,QAAAmB,EAAmB,SAAS,WAC3E,KAAK,UAAUnB,EAAQ,IAAI,IACxBhB,EAASgB,EAAQ,IAAI,KAAKd,EAAOc,EAAQ,IAAI,KAAKb,EAAWa,EAAQ,IAAI,IAC5EA,EAAQ,OAER,KAAK,UAAUA,EAAQ,IAAI;AAIrC,GAEaoB,KAAc,OAC1BrB,GACAC,GACAM,GACAe,GACAb,GACAQ,GACAtC,MACuB;AACjB,QAAA4C,IAAa,IAAI;AAEvB,MAAIxD,IAAuB;AAAA,IAC1B,SAAAkD;AAAA,IACA,MAAMK,KAAQb;AAAA,IACd,QAAQR,EAAQ;AAAA,IAChB,QAAQsB,EAAW;AAAA,EAAA;AAGpB,EAAIvB,EAAO,qBACVjC,EAAQ,cAAciC,EAAO;AAG9B,aAAWwB,KAAMxB,EAAO,aAAa,QAAQ;AAC5CjC,IAAAA,IAAU,MAAMyD,EAAGzD,CAAO;AAGlB,SAAAY,EAAA,MAAM4C,EAAW,MAAA,CAAO,GAE1B,MAAM,MAAMhB,GAAKxC,CAAO;AAChC,GAEa0D,KAAoB,CAACzD,GAAoB0D,MAAgD;AACrG,MAAIA,GAAgB;AACnB,UAAMC,IAAU3D,EAAS,QAAQ,IAAI0D,CAAc;AAC/C,QAAAzC,EAAS0C,CAAO;AACZ,aAAAA;AAAA,EAET;AAED,GAEaC,KAAkB,OAAO5D,MAAyC;AAC1E,MAAAA,EAAS,WAAW;AACnB,QAAA;AACH,YAAM6D,IAAc7D,EAAS,QAAQ,IAAI,cAAc;AACvD,UAAI6D,GAAa;AAChB,cAAMC,IAAc,CAAC,4BAA4B,mBAAmB,mBAAmB,UAAU,UAAU,QAAQ;AACnH,YAAID,EAAY,SAAS,kBAAkB,KAAKA,EAAY,SAAS,OAAO;AACpE,iBAAA,MAAM7D,EAAS;AACvB,YAAW8D,EAAY,KAAK,CAAAC,MAAQF,EAAY,SAASE,CAAI,CAAC;AACtD,iBAAA,MAAM/D,EAAS;AACZ,YAAA6D,EAAY,SAAS,qBAAqB;AAC7C,iBAAA,MAAM7D,EAAS;AACZ,YAAA6D,EAAY,SAAS,OAAO;AAC/B,iBAAA,MAAM7D,EAAS;MAExB;AAAA,aACQgB,GAAO;AACf,cAAQ,MAAMA,CAAK;AAAA,IACpB;AAGF,GAEagD,KAAkB,CAAC/B,GAA4BgC,MAA4B;AA6CjF,QAAAjD,IA5CiC;AAAA,IACtiB,EAAQ;AAAA,EAAA,EAGSgC,EAAO,MAAM;AAClC,MAAIjD;AACH,UAAM,IAAIlB,EAASmC,GAASgC,GAAQjD,CAAK;AAGtC,MAAA,CAACiD,EAAO,IAAI;AACT,UAAAC,IAAcD,EAAO,UAAU,WAC/BE,IAAkBF,EAAO,cAAc,WACvCG,KAAa,MAAM;AACpB,UAAA;AACH,eAAO,KAAK,UAAUH,EAAO,MAAM,MAAM,CAAC;AAAA,cAC/B;AACJ;AAAA,MACR;AAAA,IAAA;AAGD,UAAM,IAAInE;AAAA,MAASmC;AAAA,MAASgC;AAAA,MAC3B,0BAA0BC,CAAW,kBAAkBC,CAAe,WAAWC,CAAS;AAAA,IAAA;AAAA,EAE5F;AACD,GASarE,IAAU,CAAIiC,GAAuBC,MAC1C,IAAI9B,EAAkB,OAAOE,GAASC,GAAQK,MAAa;AAC7D,MAAA;AACG,UAAA4B,IAAMR,GAAOC,GAAQC,CAAO,GAC5BQ,IAAWD,GAAYP,CAAO,GAC9BqB,IAAOH,GAAelB,CAAO,GAC7BgB,IAAU,MAAML,GAAWZ,GAAQC,CAAO;AAE5C,QAAA,CAACtB,EAAS,aAAa;AACtB,UAAAX,IAAW,MAAMqD,GAAYrB,GAAQC,GAASM,GAAKe,GAAMb,GAAUQ,GAAStC,CAAQ;AAExF,iBAAW6C,KAAMxB,EAAO,aAAa,SAAS;AAClC,QAAAhC,IAAA,MAAMwD,EAAGxD,CAAQ;AAGvB,YAAAqE,IAAe,MAAMT,GAAgB5D,CAAQ,GAC7C0D,IAAiBD,GAAkBzD,GAAUiC,EAAQ,cAAc;AAEzE,UAAIqC,IAAkBD;AAClB,MAAApC,EAAQ,uBAAuBjC,EAAS,OACzBsE,IAAA,MAAMrC,EAAQ,oBAAoBoC,CAAY;AAGjE,YAAMJ,IAAoB;AAAA,QACzB,KAAA1B;AAAA,QACA,IAAIvC,EAAS;AAAA,QACb,QAAQA,EAAS;AAAA,QACjB,YAAYA,EAAS;AAAA,QACrB,MAAM0D,KAAkBY;AAAA,MAAA;AAGzB,MAAAN,GAAgB/B,GAASgC,CAAM,GAE/B5D,EAAQ4D,EAAO,IAAI;AAAA,IACpB;AAAA,WACQjD,GAAO;AACf,IAAAV,EAAOU,CAAK;AAAA,EACb;AAAA,CACA;AC7TK,MAAMuD,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB,OAAc,aAAaC,IAAyB,IAA6C;AAC7F,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAMF,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,gBAAgBA,GAAuE;AACjG,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,mBAAmBA,GAA6E;AAC1G,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,gBAAgBA,GAAuE;AACjG,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,qBAAqBA,GAAiF;AAChH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,sBAAsBA,GAAmF;AACnH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,oBAAoBA,GAA+E;AAC7G,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,0BAA0BA,GAA2F;AAC/H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAc,2BAAgF;AAC1F,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,mBAAmBF,IAA+B,IAAmD;AAC/G,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAMF,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,sBAAsBA,GAAmF;AACnH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,yBAAyBA,GAAyF;AAC5H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,sBAAsBA,GAAmF;AACnH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAc,kBAAkBA,IAA8B,IAAkD;AAC5G,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,MAAMF,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,eAAeA,EAAK;AAAA,QACpB,aAAaA,EAAK;AAAA,MACtB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,gBAAgBA,IAA4B,IAAgD;AACtG,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,sBAAsBA,IAAkC,IAAsD;AACxH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,OAAOF,EAAK;AAAA,QACZ,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,yBAAyBA,IAAqC,IAAyD;AACjI,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,cAAcF,EAAK;AAAA,MACvB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAc,wBAAwBA,IAAoC,IAAwD;AAC9H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,UAAUF,EAAK;AAAA,QACf,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,aAAaA,EAAK;AAAA,MACtB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,oBAAoBA,IAAgC,IAAoD;AAClH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,MAAMF,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,aAAaA,EAAK;AAAA,MACtB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAEJ;AA0lBO,MAAMG,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B,OAAc,iBAAiBH,IAA6B,IAAiD;AACzG,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAMF,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,oBAAoBA,GAA+E;AAC7G,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,uBAAuBA,GAAqF;AACtH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,oBAAoBA,GAA+E;AAC7G,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,mCAAmCA,GAA6G;AAC1J,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACH,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,6BAA6BA,GAAiG;AACxI,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACH,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,yCAAyCA,GAAyH;AAC5K,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,yBAAyBA,GAAyF;AAC5H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,0BAA0BA,GAA2F;AAC/H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,0BAA0BA,GAA2F;AAC/H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,wBAAwBA,GAAuF;AACzH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,6BAA6BA,IAAyC,IAA6D;AAC7I,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,MAAMF,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,sCAAsCA,IAAkD,IAAsE;AACxK,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAMF,EAAK;AAAA,MACX,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAc,+BAAwF;AAClG,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,uBAAuBF,IAAmC,IAAuD;AAC3H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAMF,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,0BAA0BA,GAA2F;AAC/H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,6BAA6BA,GAAiG;AACxI,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAc,0BAA0BA,GAA2F;AAC/H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,MAAMA,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,uBAAuBA,IAAmC,IAAuD;AAC3H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAMF,EAAK;AAAA,MACX,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,oBAAoBA,IAAgC,IAAoD;AAClH,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,IAAIF,EAAK;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,0BAA0BA,IAAsC,IAA0D;AACpI,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,OAAOF,EAAK;AAAA,QACZ,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAc,6BAA6BA,IAAyC,IAA6D;AAC7I,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,cAAcF,EAAK;AAAA,MACvB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAc,4BAA4BA,IAAwC,IAA4D;AAC1I,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,UAAUF,EAAK;AAAA,QACf,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,aAAaA,EAAK;AAAA,MACtB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,wBAAwBA,IAAoC,IAAwD;AAC9H,WAAOC,EAAUC,GAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACH,MAAMF,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,aAAaA,EAAK;AAAA,MACtB;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IAAA,CACH;AAAA,EACL;AAEJ;;;;;;;gVC9kDAI,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AAYO,IAAMC,IAAN,cAAkCC,EAAgBC,CAAU,EAAE;AAAA,EAcnE,cAAc;AACN,aAbRC,EAAA,MAAAd,CAAA,GACAc,EAAA,MAAAb,CAAA,GACAa,EAAA,MAAAZ,CAAA,GACAY,EAAA,MAAAX,CAAA,GACAW,EAAA,MAAAV,CAAA,GACAU,EAAA,MAAAT,CAAA,GACAS,EAAA,MAAAR,CAAA,GACUQ,EAAA,MAAAP,GAAA,yEAAA,GACIO,EAAA,MAAAN,GAAA,EAAA,GACAM,EAAA,MAAAL,GAAA,EAAA,GACdK,EAAA,MAAAJ,CAAA,GAKEK,EAAA,MAAKf,GAAe,CAAA,CAAC,GACrBe,EAAA,MAAKd,GAAe,CAAA,CAAC,GAChBc,EAAA,MAAAN,GAAc,KAAK,UAAU,CAAA;AAG5B,UAAAO,IAA+B,IAAIC,EAAqB,sBAAsB,GAC9EC,IAA+B,IAAID,EAAqB,sBAAsB;AAG/E,SAAA,eAAeE,GAAgC,CAACC,MAAqB;AACnE,MAAAL,EAAA,MAAAZ,GAAaiB,EAAiB,UAAU,CAAA,GACxCL,EAAA,MAAAV,GAAkBe,EAAiB,iBAAiB,CAAA;AAAA,IAAA,CAC1D,GAII,KAAA,eAAeC,GAAsB,CAACC,MAAoB;AACxD,MAAAP,EAAA,MAAAX,GAAgBkB,EAAgB,SAAS,CAAA,GAGzC,KAAA,eAAeN,GAA8B,CAACO,MAAY;AAG7D,aAAK,QAAQA,EAAQ,OAAO,CAACC,MAAU;AACrC,UAAAT,EAAA,MAAKT,GAASkB,CAAA,GACTT,EAAA,MAAAN,GAAc,KAAK,UAAU,CAAA,GAClC,KAAK,cAAc;AAAA,QAAA,CACpB,GAGI,KAAA,QAAQgB,EAAgBF,EAAQ,SAASD,EAAgB,KAAK,GAAG,CAAC,CAACvC,GAAS2C,CAAY,MAAM;AACjG,gBAAMC,IAAa5C;AAEnB,UAAI6C,EAAK,MAAA3B,CAAA,EAAa0B,EAAW,cAAc,MAAM,SAC/B5B,EAAA,oBAAoB,EAAE,IAAI4B,EAAW,gBAAgB,EAAE,KAAK,CAACvG,MAAa;AAE5F,kBAAMyG,IAAWzG,EAAS,WAAW,IAAI,CAAC0G,MACjCnC,EAAgB,gBAAgB,EAAE,IAAImC,EAAK,SAAS,IAAI,EAAE,KAAK,CAACC,MAAa;AAClF,cAAAH,EAAA,MAAK3B,CAAa,EAAA6B,EAAK,KAAK,IAAIC,EAAS;AAAA,YAAA,CAC1C,CACF;AAGD,oBAAQ,IAAIF,CAAQ,EAAE,KAAK,MAAM;AAE1B,mBAAA,YAAYF,GAAYD,CAAY;AAAA,YAAA,CAC1C;AAAA,UAAA,CACF,IAEI,KAAA,YAAYC,GAAYD,CAAY;AAAA,QAC3C,CAED,GAGEH,EAAQ,SACJ,KAAA,QAAQA,EAAQ,OAAO,CAASS,MAAA;AACnC,UAAAjB,EAAA,MAAKL,GAASsB,CAAA;AAAA,QAAA,CACf;AAAA,MACH,CACD,GAGI,KAAA,eAAed,GAA8B,CAACK,MAAY;AAC7D,aAAK,QAAQA,EAAQ,OAAO,CAACC,MAAU;AACrC,UAAAT,EAAA,MAAKT,GAASkB,CAAA,GACTT,EAAA,MAAAN,GAAc,KAAK,UAAU,CAAA,GAClC,KAAK,cAAc;AAAA,QAAA,CACpB,GAEI,KAAA,QAAQgB,EAAgBF,EAAQ,SAASD,EAAgB,KAAK,GAAG,CAAC,CAACvC,GAAS2C,CAAY,MAAM;AAEjG,gBAAMC,IAAa5C;AAEnB,UAAI6C,EAAK,MAAA3B,CAAA,EAAa0B,EAAW,cAAc,MAAM,SAC/B5B,EAAA,oBAAoB,EAAE,IAAI4B,EAAW,gBAAgB,EAAE,KAAK,CAACvG,MAAa;AAE5F,kBAAMyG,IAAWzG,EAAS,WAAW,IAAI,CAAC0G,MACjCnC,EAAgB,gBAAgB,EAAE,IAAImC,EAAK,SAAS,IAAI,EAAE,KAAK,CAACC,MAAa;AAClF,cAAAH,EAAA,MAAK3B,CAAa,EAAA6B,EAAK,KAAK,IAAIC,EAAS;AAAA,YAAA,CAC1C,CACF;AAGD,oBAAQ,IAAIF,CAAQ,EAAE,KAAK,MAAM;AAE1B,mBAAA,YAAYF,GAAYD,CAAY;AAAA,YAAA,CAC1C;AAAA,UAAA,CACF,IAEI,KAAA,YAAYC,GAAYD,CAAY;AAAA,QAC3C,CAED;AAAA,MAAA,CACF;AAAA,IAAA,CACF;AAAA,EACH;AAAA,EAEA,aAAa3C,GAAc;AACzB,eAAWhC,KAAOgC,GAAS;AACnB,YAAAnD,IAAQmD,EAAQhC,CAAG,GACnBkF,IAAcL,EAAK,MAAA3B,CAAA,EAAalD,CAAG;AAGzC,UAFA,QAAQ,IAAIA,GAAI,EAAC,OAAAnB,GAAO,aAAAqG,EAAY,CAAA,GAEjCA;AACD,gBAAOA,GAAa;AAAA,UAClB,KAAK;AACH,YAAAlD,EAAQhC,CAAG,IAAI,KAAK,UAAUnB,CAAK;AACrC;AAAA,UACA,KAAK;AACG,kBAAAsG,IAAU,kBAAkBtG,CAAK;AACvC,YAAAmD,EAAQhC,CAAG,IAAImF;AACjB;AAAA,UACA,KAAK;AACH,YAAAnD,EAAQhC,CAAG,IAAI,KAAK,UAAUnB,CAAK;AACrC;AAAA,UACA,KAAK;AACH,YAAAmD,EAAQhC,CAAG,IAAI,KAAK,UAAUnB,CAAK;AACrC;AAAA,UAEA,KAAK;AACH,YAAAmD,EAAQhC,CAAG,IAAInB,EAAM,KAAK;AAAA,CAAI;AAChC;AAAA,UACA,KAAK;AACH,qBAASuG,IAAI,GAAGA,IAAIpD,EAAQhC,CAAG,EAAE,QAAQoF,KAAK;AAC5C,oBAAMD,IAAU,SAASnD,EAAQhC,CAAG,EAAEoF,CAAC,EAAE,IAAI,IAAIpD,EAAQhC,CAAG,EAAEoF,CAAC,EAAE,MAAM;AAC/D,cAAApD,EAAAhC,CAAG,EAAEoF,CAAC,IAAID;AAAAA,YACpB;AACA,YAAAnD,EAAQhC,CAAG,IAAIgC,EAAQhC,CAAG,EAAE,KAAK,GAAG;AACtC;AAAA,QACF;AAAA,IAEJ;AACO,WAAAgC;AAAA,EACT;AAAA,EAEA,YAAYA,GAAe2C,GAAoB;AAG7C,QAFAX,EAAA,MAAKP,GAAc,EAAA,GAEhB,CAACkB,EAAc;AAElB,UAAMU,IAAM,KAAK,MAAM,KAAK,UAAUV,CAAY,CAAC;AAInD,QAHA3C,IAAU,KAAK,MAAM,KAAK,UAAUA,CAAO,CAAC,GAGzC6C,QAAK5B,CAAa,EAAAjB,EAAQ,GAAG,KAAK,KAAK,UAAU6C,EAAA,MAAK5B,CAAa,EAAAjB,EAAQ,GAAG,CAAC,MAAM,KAAK,UAAUA,CAAO;AAC5G;AAIG,IAAA6C,EAAA,MAAA5B,CAAA,EAAajB,EAAQ,GAAG,IAAIA;AAE3B,UAAAsD,IAAQD,EAAI,YAAY,UAAU,CAACE,MAAqBA,EAAE,OAAOvD,EAAQ,GAAG;AAE9E,IAAAqD,EAAA,YAAYC,CAAK,IAAItD,GACzBqD,EAAI,SAASrD,EAAQ;AAGrB,aAAQoD,IAAI,GAAGA,IAAIC,EAAI,aAAa,QAAQD;AACtC,MAAAC,EAAA,aAAaD,CAAC,IAAI,KAAK,aAAaC,EAAI,aAAaD,CAAC,CAAC;AAG7D,aAAQA,IAAI,GAAGA,IAAIC,EAAI,YAAY,QAAQD;AACrC,MAAAC,EAAA,YAAYD,CAAC,IAAI,KAAK,aAAaC,EAAI,YAAYD,CAAC,CAAC;AAG3D,IAAApB,EAAA,MAAKb,GAAgBkC,CAAA;AAErB,UAAMG,IAAU;AAAA,MACd,SAAS,KAAK,UAAUX,EAAA,MAAK1B,CAAa,CAAA;AAAA,MAC1C,WAAW0B,EAAK,MAAAzB,CAAA;AAAA,MAChB,mBAAmByB,EAAK,MAAAxB,CAAA;AAAA,MACxB,eAAewB,EAAK,MAAAvB,CAAA;AAAA,IAAA;AAGtB,UAAM,qBAAqB;AAAA,MACzB,QAAQ;AAAA,MACR,MAAM,KAAK,UAAUkC,CAAO;AAAA,MAC5B,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IAAA,CACD,EACA,KAAK,CAAAnH,MAAYA,EAAS,MAAM,EAAE,KAAK,CAAQwE,MAAA;AAG9C,UADAmB,EAAA,MAAKP,GAAc,EAAA,GAChBZ,EAAK,SAAS;AACV,QAAAmB,EAAA,MAAAN,GAAc,KAAK,UAAU,CAAA;AAAA,WAC/B;AAEH,YADoCb,EAAK,KAAK,SAAS,wBAAwB,GAC/C;AACxB,gBAAA4C,IAAW,KAAK;AACtB,UAAA5C,EAAK,OAAOA,EAAK,KAAK,QAAQ,0BAA0B4C,CAAQ;AAAA,QAClE;AAEK,QAAAzB,EAAA,MAAAN,GAAc,+GAA+Gb,EAAK,OAAO,QAAA;AAAA,MAChJ;AACA,WAAK,cAAc,GAGW6C,EAAS,MAAM;AAC3C,aAAK,cAAc;AAAA,SAClB,GAAG;IAEgB,CACvB;AAAA,EAEH;AAAA,EAEA,gBAAgB;;AACd,UAAMC,KAAUhF,IAAA,KAAK,eAAL,gBAAAA,EAAiB,iBAAiB;AAClD,IAAAgF,KAAA,QAAAA,EAAS,QAAQ,CAAaC,MAAA;;AACtB,YAAAC,IAAY,SAAS,cAAc,QAAQ;AAGjD,YAAM,KAAKD,EAAU,UAAU,EAAE,QAAQ,CAAQE,MAAA;AAC/C,QAAAD,EAAU,aAAaC,EAAK,MAAMA,EAAK,KAAK;AAAA,MAAA,CAC7C,GAGGF,EAAU,MAEZC,EAAU,MAAMD,EAAU,MAG1BC,EAAU,cAAcD,EAAU,cAIzBjF,IAAAiF,KAAA,gBAAAA,EAAA,eAAA,QAAAjF,EAAY,aAAakF,GAAWD;AAAA,IAAS;AAAA,EAE5D;AAAA,EAEA,QAAQ;AAEN,WAAOf,EAAK,MAAAlB,CAAA,KAAUkB,EAAK,MAAAlB,CAAA,EAAO,SAAS,IACzC;AAAA;AAAA,2CAEqCkB,QAAKtB,CAAM,CAAA,WAAWsB,QAAKpB,CAAc,IAAAoB,EAAA,MAAKrB,KAAU,EAAE;AAAA;AAAA;AAAA,UAI/F;AAAA,EAEJ;AAAA,EAEA,YAAY;AAEH,WAAA;AAAA;AAAA,yCAE8BqB,QAAKtB,CAAM,CAAA,WAAWsB,QAAKpB,CAAc,IAAAoB,EAAA,MAAKrB,KAAU,EAAE;AAAA;AAAA,EAEjG;AAAA,EAEA,SAAS;AACP,WAAOuC,IAAOC,EAAWnB,EAAK,MAAAnB,CAAA,CAAW,CAAC;AAAA,EAC5C;AACF;AA/QET,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AAZWC,IAANqC,GAAA;AAAA,EADNC,EAAc,8BAA8B;AAAA,GAChCtC,CAAA;AAmRb,MAAAuC,KAAevC;"}