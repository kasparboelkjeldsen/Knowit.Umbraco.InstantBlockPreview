{"version":3,"file":"knowit-instant-block-preview-C06YWKED.js","sources":["../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/core/ApiError.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/core/CancelablePromise.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/core/request.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/api/services.gen.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/util/block-content-utils.ts","../../Knowit.Umbraco.Bellissima.InstantBlockPreview.Frontend/src/elements/knowit-instant-block-preview.ts"],"sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\n\r\nexport class ApiError extends Error {\r\n\tpublic readonly url: string;\r\n\tpublic readonly status: number;\r\n\tpublic readonly statusText: string;\r\n\tpublic readonly body: unknown;\r\n\tpublic readonly request: ApiRequestOptions;\r\n\r\n\tconstructor(request: ApiRequestOptions, response: ApiResult, message: string) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.name = 'ApiError';\r\n\t\tthis.url = response.url;\r\n\t\tthis.status = response.status;\r\n\t\tthis.statusText = response.statusText;\r\n\t\tthis.body = response.body;\r\n\t\tthis.request = request;\r\n\t}\r\n}","export class CancelError extends Error {\r\n\tconstructor(message: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'CancelError';\r\n\t}\r\n\r\n\tpublic get isCancelled(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport interface OnCancel {\r\n\treadonly isResolved: boolean;\r\n\treadonly isRejected: boolean;\r\n\treadonly isCancelled: boolean;\r\n\r\n\t(cancelHandler: () => void): void;\r\n}\r\n\r\nexport class CancelablePromise<T> implements Promise<T> {\r\n\tprivate _isResolved: boolean;\r\n\tprivate _isRejected: boolean;\r\n\tprivate _isCancelled: boolean;\r\n\treadonly cancelHandlers: (() => void)[];\r\n\treadonly promise: Promise<T>;\r\n\tprivate _resolve?: (value: T | PromiseLike<T>) => void;\r\n\tprivate _reject?: (reason?: unknown) => void;\r\n\r\n\tconstructor(\r\n\t\texecutor: (\r\n\t\t\tresolve: (value: T | PromiseLike<T>) => void,\r\n\t\t\treject: (reason?: unknown) => void,\r\n\t\t\tonCancel: OnCancel\r\n\t\t) => void\r\n\t) {\r\n\t\tthis._isResolved = false;\r\n\t\tthis._isRejected = false;\r\n\t\tthis._isCancelled = false;\r\n\t\tthis.cancelHandlers = [];\r\n\t\tthis.promise = new Promise<T>((resolve, reject) => {\r\n\t\t\tthis._resolve = resolve;\r\n\t\t\tthis._reject = reject;\r\n\r\n\t\t\tconst onResolve = (value: T | PromiseLike<T>): void => {\r\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._isResolved = true;\r\n\t\t\t\tif (this._resolve) this._resolve(value);\r\n\t\t\t};\r\n\r\n\t\t\tconst onReject = (reason?: unknown): void => {\r\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._isRejected = true;\r\n\t\t\t\tif (this._reject) this._reject(reason);\r\n\t\t\t};\r\n\r\n\t\t\tconst onCancel = (cancelHandler: () => void): void => {\r\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.cancelHandlers.push(cancelHandler);\r\n\t\t\t};\r\n\r\n\t\t\tObject.defineProperty(onCancel, 'isResolved', {\r\n\t\t\t\tget: (): boolean => this._isResolved,\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(onCancel, 'isRejected', {\r\n\t\t\t\tget: (): boolean => this._isRejected,\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(onCancel, 'isCancelled', {\r\n\t\t\t\tget: (): boolean => this._isCancelled,\r\n\t\t\t});\r\n\r\n\t\t\treturn executor(onResolve, onReject, onCancel as OnCancel);\r\n\t\t});\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn \"Cancellable Promise\";\r\n\t}\r\n\r\n\tpublic then<TResult1 = T, TResult2 = never>(\r\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\r\n\t\tonRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\r\n\t): Promise<TResult1 | TResult2> {\r\n\t\treturn this.promise.then(onFulfilled, onRejected);\r\n\t}\r\n\r\n\tpublic catch<TResult = never>(\r\n\t\tonRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null\r\n\t): Promise<T | TResult> {\r\n\t\treturn this.promise.catch(onRejected);\r\n\t}\r\n\r\n\tpublic finally(onFinally?: (() => void) | null): Promise<T> {\r\n\t\treturn this.promise.finally(onFinally);\r\n\t}\r\n\r\n\tpublic cancel(): void {\r\n\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._isCancelled = true;\r\n\t\tif (this.cancelHandlers.length) {\r\n\t\t\ttry {\r\n\t\t\t\tfor (const cancelHandler of this.cancelHandlers) {\r\n\t\t\t\t\tcancelHandler();\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn('Cancellation threw an error', error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.cancelHandlers.length = 0;\r\n\t\tif (this._reject) this._reject(new CancelError('Request aborted'));\r\n\t}\r\n\r\n\tpublic get isCancelled(): boolean {\r\n\t\treturn this._isCancelled;\r\n\t}\r\n}","import { ApiError } from './ApiError';\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\nimport { CancelablePromise } from './CancelablePromise';\r\nimport type { OnCancel } from './CancelablePromise';\r\nimport type { OpenAPIConfig } from './OpenAPI';\r\n\r\nexport const isString = (value: unknown): value is string => {\r\n\treturn typeof value === 'string';\r\n};\r\n\r\nexport const isStringWithValue = (value: unknown): value is string => {\r\n\treturn isString(value) && value !== '';\r\n};\r\n\r\nexport const isBlob = (value: any): value is Blob => {\r\n\treturn value instanceof Blob;\r\n};\r\n\r\nexport const isFormData = (value: unknown): value is FormData => {\r\n\treturn value instanceof FormData;\r\n};\r\n\r\nexport const base64 = (str: string): string => {\r\n\ttry {\r\n\t\treturn btoa(str);\r\n\t} catch (err) {\r\n\t\t// @ts-ignore\r\n\t\treturn Buffer.from(str).toString('base64');\r\n\t}\r\n};\r\n\r\nexport const getQueryString = (params: Record<string, unknown>): string => {\r\n\tconst qs: string[] = [];\r\n\r\n\tconst append = (key: string, value: unknown) => {\r\n\t\tqs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\r\n\t};\r\n\r\n\tconst encodePair = (key: string, value: unknown) => {\r\n\t\tif (value === undefined || value === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (value instanceof Date) {\r\n\t\t\tappend(key, value.toISOString());\r\n\t\t} else if (Array.isArray(value)) {\r\n\t\t\tvalue.forEach(v => encodePair(key, v));\r\n\t\t} else if (typeof value === 'object') {\r\n\t\t\tObject.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\r\n\t\t} else {\r\n\t\t\tappend(key, value);\r\n\t\t}\r\n\t};\r\n\r\n\tObject.entries(params).forEach(([key, value]) => encodePair(key, value));\r\n\r\n\treturn qs.length ? `?${qs.join('&')}` : '';\r\n};\r\n\r\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\r\n\tconst encoder = config.ENCODE_PATH || encodeURI;\r\n\r\n\tconst path = options.url\r\n\t\t.replace('{api-version}', config.VERSION)\r\n\t\t.replace(/{(.*?)}/g, (substring: string, group: string) => {\r\n\t\t\tif (options.path?.hasOwnProperty(group)) {\r\n\t\t\t\treturn encoder(String(options.path[group]));\r\n\t\t\t}\r\n\t\t\treturn substring;\r\n\t\t});\r\n\r\n\tconst url = config.BASE + path;\r\n\treturn options.query ? url + getQueryString(options.query) : url;\r\n};\r\n\r\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\r\n\tif (options.formData) {\r\n\t\tconst formData = new FormData();\r\n\r\n\t\tconst process = (key: string, value: unknown) => {\r\n\t\t\tif (isString(value) || isBlob(value)) {\r\n\t\t\t\tformData.append(key, value);\r\n\t\t\t} else {\r\n\t\t\t\tformData.append(key, JSON.stringify(value));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tObject.entries(options.formData)\r\n\t\t\t.filter(([, value]) => value !== undefined && value !== null)\r\n\t\t\t.forEach(([key, value]) => {\r\n\t\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\t\tvalue.forEach(v => process(key, v));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprocess(key, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn formData;\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\r\n\r\nexport const resolve = async <T>(options: ApiRequestOptions<T>, resolver?: T | Resolver<T>): Promise<T | undefined> => {\r\n\tif (typeof resolver === 'function') {\r\n\t\treturn (resolver as Resolver<T>)(options);\r\n\t}\r\n\treturn resolver;\r\n};\r\n\r\nexport const getHeaders = async <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {\r\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\r\n\t\t// @ts-ignore\r\n\t\tresolve(options, config.TOKEN),\r\n\t\t// @ts-ignore\r\n\t\tresolve(options, config.USERNAME),\r\n\t\t// @ts-ignore\r\n\t\tresolve(options, config.PASSWORD),\r\n\t\t// @ts-ignore\r\n\t\tresolve(options, config.HEADERS),\r\n\t]);\r\n\r\n\tconst headers = Object.entries({\r\n\t\tAccept: 'application/json',\r\n\t\t...additionalHeaders,\r\n\t\t...options.headers,\r\n\t})\r\n\t\t.filter(([, value]) => value !== undefined && value !== null)\r\n\t\t.reduce((headers, [key, value]) => ({\r\n\t\t\t...headers,\r\n\t\t\t[key]: String(value),\r\n\t\t}), {} as Record<string, string>);\r\n\r\n\tif (isStringWithValue(token)) {\r\n\t\theaders['Authorization'] = `Bearer ${token}`;\r\n\t}\r\n\r\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\r\n\t\tconst credentials = base64(`${username}:${password}`);\r\n\t\theaders['Authorization'] = `Basic ${credentials}`;\r\n\t}\r\n\r\n\tif (options.body !== undefined) {\r\n\t\tif (options.mediaType) {\r\n\t\t\theaders['Content-Type'] = options.mediaType;\r\n\t\t} else if (isBlob(options.body)) {\r\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\r\n\t\t} else if (isString(options.body)) {\r\n\t\t\theaders['Content-Type'] = 'text/plain';\r\n\t\t} else if (!isFormData(options.body)) {\r\n\t\t\theaders['Content-Type'] = 'application/json';\r\n\t\t}\r\n\t}\r\n\r\n\treturn new Headers(headers);\r\n};\r\n\r\nexport const getRequestBody = (options: ApiRequestOptions): unknown => {\r\n\tif (options.body !== undefined) {\r\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\r\n\t\t\treturn JSON.stringify(options.body);\r\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\r\n\t\t\treturn options.body;\r\n\t\t} else {\r\n\t\t\treturn JSON.stringify(options.body);\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\nexport const sendRequest = async (\r\n\tconfig: OpenAPIConfig,\r\n\toptions: ApiRequestOptions,\r\n\turl: string,\r\n\tbody: any,\r\n\tformData: FormData | undefined,\r\n\theaders: Headers,\r\n\tonCancel: OnCancel\r\n): Promise<Response> => {\r\n\tconst controller = new AbortController();\r\n\r\n\tlet request: RequestInit = {\r\n\t\theaders,\r\n\t\tbody: body ?? formData,\r\n\t\tmethod: options.method,\r\n\t\tsignal: controller.signal,\r\n\t};\r\n\r\n\tif (config.WITH_CREDENTIALS) {\r\n\t\trequest.credentials = config.CREDENTIALS;\r\n\t}\r\n\r\n\tfor (const fn of config.interceptors.request._fns) {\r\n\t\trequest = await fn(request);\r\n\t}\r\n\r\n\tonCancel(() => controller.abort());\r\n\r\n\treturn await fetch(url, request);\r\n};\r\n\r\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\r\n\tif (responseHeader) {\r\n\t\tconst content = response.headers.get(responseHeader);\r\n\t\tif (isString(content)) {\r\n\t\t\treturn content;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\nexport const getResponseBody = async (response: Response): Promise<unknown> => {\r\n\tif (response.status !== 204) {\r\n\t\ttry {\r\n\t\t\tconst contentType = response.headers.get('Content-Type');\r\n\t\t\tif (contentType) {\r\n\t\t\t\tconst binaryTypes = ['application/octet-stream', 'application/pdf', 'application/zip', 'audio/', 'image/', 'video/'];\r\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\r\n\t\t\t\t\treturn await response.json();\r\n\t\t\t\t} else if (binaryTypes.some(type => contentType.includes(type))) {\r\n\t\t\t\t\treturn await response.blob();\r\n\t\t\t\t} else if (contentType.includes('multipart/form-data')) {\r\n\t\t\t\t\treturn await response.formData();\r\n\t\t\t\t} else if (contentType.includes('text/')) {\r\n\t\t\t\t\treturn await response.text();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\r\n\tconst errors: Record<number, string> = {\r\n\t\t400: 'Bad Request',\r\n\t\t401: 'Unauthorized',\r\n\t\t402: 'Payment Required',\r\n\t\t403: 'Forbidden',\r\n\t\t404: 'Not Found',\r\n\t\t405: 'Method Not Allowed',\r\n\t\t406: 'Not Acceptable',\r\n\t\t407: 'Proxy Authentication Required',\r\n\t\t408: 'Request Timeout',\r\n\t\t409: 'Conflict',\r\n\t\t410: 'Gone',\r\n\t\t411: 'Length Required',\r\n\t\t412: 'Precondition Failed',\r\n\t\t413: 'Payload Too Large',\r\n\t\t414: 'URI Too Long',\r\n\t\t415: 'Unsupported Media Type',\r\n\t\t416: 'Range Not Satisfiable',\r\n\t\t417: 'Expectation Failed',\r\n\t\t418: 'Im a teapot',\r\n\t\t421: 'Misdirected Request',\r\n\t\t422: 'Unprocessable Content',\r\n\t\t423: 'Locked',\r\n\t\t424: 'Failed Dependency',\r\n\t\t425: 'Too Early',\r\n\t\t426: 'Upgrade Required',\r\n\t\t428: 'Precondition Required',\r\n\t\t429: 'Too Many Requests',\r\n\t\t431: 'Request Header Fields Too Large',\r\n\t\t451: 'Unavailable For Legal Reasons',\r\n\t\t500: 'Internal Server Error',\r\n\t\t501: 'Not Implemented',\r\n\t\t502: 'Bad Gateway',\r\n\t\t503: 'Service Unavailable',\r\n\t\t504: 'Gateway Timeout',\r\n\t\t505: 'HTTP Version Not Supported',\r\n\t\t506: 'Variant Also Negotiates',\r\n\t\t507: 'Insufficient Storage',\r\n\t\t508: 'Loop Detected',\r\n\t\t510: 'Not Extended',\r\n\t\t511: 'Network Authentication Required',\r\n\t\t...options.errors,\r\n\t}\r\n\r\n\tconst error = errors[result.status];\r\n\tif (error) {\r\n\t\tthrow new ApiError(options, result, error);\r\n\t}\r\n\r\n\tif (!result.ok) {\r\n\t\tconst errorStatus = result.status ?? 'unknown';\r\n\t\tconst errorStatusText = result.statusText ?? 'unknown';\r\n\t\tconst errorBody = (() => {\r\n\t\t\ttry {\r\n\t\t\t\treturn JSON.stringify(result.body, null, 2);\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t})();\r\n\r\n\t\tthrow new ApiError(options, result,\r\n\t\t\t`Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\r\n\t\t);\r\n\t}\r\n};\r\n\r\n/**\r\n * Request method\r\n * @param config The OpenAPI configuration object\r\n * @param options The request options from the service\r\n * @returns CancelablePromise<T>\r\n * @throws ApiError\r\n */\r\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): CancelablePromise<T> => {\r\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\r\n\t\ttry {\r\n\t\t\tconst url = getUrl(config, options);\r\n\t\t\tconst formData = getFormData(options);\r\n\t\t\tconst body = getRequestBody(options);\r\n\t\t\tconst headers = await getHeaders(config, options);\r\n\r\n\t\t\tif (!onCancel.isCancelled) {\r\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\r\n\r\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\r\n\t\t\t\t\tresponse = await fn(response);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst responseBody = await getResponseBody(response);\r\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\r\n\r\n\t\t\t\tlet transformedBody = responseBody;\r\n\t\t\t\tif (options.responseTransformer && response.ok) {\r\n\t\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result: ApiResult = {\r\n\t\t\t\t\turl,\r\n\t\t\t\t\tok: response.ok,\r\n\t\t\t\t\tstatus: response.status,\r\n\t\t\t\t\tstatusText: response.statusText,\r\n\t\t\t\t\tbody: responseHeader ?? transformedBody,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tcatchErrorCodes(options, result);\r\n\r\n\t\t\t\tresolve(result.body);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\treject(error);\r\n\t\t}\r\n\t});\r\n};","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type { CancelablePromise } from './core/CancelablePromise';\r\nimport { OpenAPI } from './core/OpenAPI';\r\nimport { request as __request } from './core/request';\r\nimport type { GetCultureData, GetCultureResponse, PostDataTypeData, PostDataTypeResponse, GetDataTypeByIdData, GetDataTypeByIdResponse, DeleteDataTypeByIdData, DeleteDataTypeByIdResponse, PutDataTypeByIdData, PutDataTypeByIdResponse, PostDataTypeByIdCopyData, PostDataTypeByIdCopyResponse, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedResponse, PutDataTypeByIdMoveData, PutDataTypeByIdMoveResponse, GetDataTypeByIdReferencesData, GetDataTypeByIdReferencesResponse, GetDataTypeConfigurationResponse, PostDataTypeFolderData, PostDataTypeFolderResponse, GetDataTypeFolderByIdData, GetDataTypeFolderByIdResponse, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdResponse, PutDataTypeFolderByIdData, PutDataTypeFolderByIdResponse, GetFilterDataTypeData, GetFilterDataTypeResponse, GetItemDataTypeData, GetItemDataTypeResponse, GetItemDataTypeSearchData, GetItemDataTypeSearchResponse, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsResponse, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenResponse, GetTreeDataTypeRootData, GetTreeDataTypeRootResponse, GetDictionaryData, GetDictionaryResponse, PostDictionaryData, PostDictionaryResponse, GetDictionaryByIdData, GetDictionaryByIdResponse, DeleteDictionaryByIdData, DeleteDictionaryByIdResponse, PutDictionaryByIdData, PutDictionaryByIdResponse, GetDictionaryByIdExportData, GetDictionaryByIdExportResponse, PutDictionaryByIdMoveData, PutDictionaryByIdMoveResponse, PostDictionaryImportData, PostDictionaryImportResponse, GetItemDictionaryData, GetItemDictionaryResponse, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsResponse, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenResponse, GetTreeDictionaryRootData, GetTreeDictionaryRootResponse, PostDocumentBlueprintData, PostDocumentBlueprintResponse, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdResponse, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdResponse, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdResponse, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveResponse, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderResponse, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdResponse, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdResponse, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdResponse, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentResponse, GetItemDocumentBlueprintData, GetItemDocumentBlueprintResponse, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsResponse, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenResponse, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootResponse, PostDocumentTypeData, PostDocumentTypeResponse, GetDocumentTypeByIdData, GetDocumentTypeByIdResponse, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdResponse, PutDocumentTypeByIdData, PutDocumentTypeByIdResponse, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenResponse, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintResponse, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesResponse, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyResponse, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportResponse, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportResponse, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveResponse, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootResponse, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsResponse, GetDocumentTypeConfigurationResponse, PostDocumentTypeFolderData, PostDocumentTypeFolderResponse, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdResponse, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdResponse, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdResponse, PostDocumentTypeImportData, PostDocumentTypeImportResponse, GetItemDocumentTypeData, GetItemDocumentTypeResponse, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchResponse, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsResponse, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenResponse, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootResponse, GetDocumentVersionData, GetDocumentVersionResponse, GetDocumentVersionByIdData, GetDocumentVersionByIdResponse, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupResponse, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackResponse, GetCollectionDocumentByIdData, GetCollectionDocumentByIdResponse, PostDocumentData, PostDocumentResponse, GetDocumentByIdData, GetDocumentByIdResponse, DeleteDocumentByIdData, DeleteDocumentByIdResponse, PutDocumentByIdData, PutDocumentByIdResponse, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogResponse, PostDocumentByIdCopyData, PostDocumentByIdCopyResponse, GetDocumentByIdDomainsData, GetDocumentByIdDomainsResponse, PutDocumentByIdDomainsData, PutDocumentByIdDomainsResponse, PutDocumentByIdMoveData, PutDocumentByIdMoveResponse, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinResponse, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsResponse, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsResponse, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessResponse, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessResponse, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessResponse, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessResponse, PutDocumentByIdPublishData, PutDocumentByIdPublishResponse, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsResponse, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByResponse, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsResponse, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishResponse, PutDocumentByIdValidateData, PutDocumentByIdValidateResponse, GetDocumentAreReferencedData, GetDocumentAreReferencedResponse, GetDocumentConfigurationResponse, PutDocumentSortData, PutDocumentSortResponse, GetDocumentUrlsData, GetDocumentUrlsResponse, PostDocumentValidateData, PostDocumentValidateResponse, GetItemDocumentData, GetItemDocumentResponse, GetItemDocumentSearchData, GetItemDocumentSearchResponse, DeleteRecycleBinDocumentResponse, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdResponse, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentResponse, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreResponse, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenResponse, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootResponse, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsResponse, GetTreeDocumentChildrenData, GetTreeDocumentChildrenResponse, GetTreeDocumentRootData, GetTreeDocumentRootResponse, PostDynamicRootQueryData, PostDynamicRootQueryResponse, GetDynamicRootStepsResponse, GetHealthCheckGroupData, GetHealthCheckGroupResponse, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameResponse, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckResponse, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionResponse, GetHelpData, GetHelpResponse, GetImagingResizeUrlsData, GetImagingResizeUrlsResponse, GetImportAnalyzeData, GetImportAnalyzeResponse, GetIndexerData, GetIndexerResponse, GetIndexerByIndexNameData, GetIndexerByIndexNameResponse, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildResponse, GetInstallSettingsResponse, PostInstallSetupData, PostInstallSetupResponse, PostInstallValidateDatabaseData, PostInstallValidateDatabaseResponse, GetItemLanguageData, GetItemLanguageResponse, GetItemLanguageDefaultResponse, GetLanguageData, GetLanguageResponse, PostLanguageData, PostLanguageResponse, GetLanguageByIsoCodeData, GetLanguageByIsoCodeResponse, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeResponse, PutLanguageByIsoCodeData, PutLanguageByIsoCodeResponse, GetLogViewerLevelData, GetLogViewerLevelResponse, GetLogViewerLevelCountData, GetLogViewerLevelCountResponse, GetLogViewerLogData, GetLogViewerLogResponse, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateResponse, GetLogViewerSavedSearchData, GetLogViewerSavedSearchResponse, PostLogViewerSavedSearchData, PostLogViewerSavedSearchResponse, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameResponse, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameResponse, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeResponse, GetManifestManifestResponse, GetManifestManifestPrivateResponse, GetManifestManifestPublicResponse, GetItemMediaTypeData, GetItemMediaTypeResponse, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedResponse, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersResponse, GetItemMediaTypeSearchData, GetItemMediaTypeSearchResponse, PostMediaTypeData, PostMediaTypeResponse, GetMediaTypeByIdData, GetMediaTypeByIdResponse, DeleteMediaTypeByIdData, DeleteMediaTypeByIdResponse, PutMediaTypeByIdData, PutMediaTypeByIdResponse, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenResponse, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesResponse, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyResponse, GetMediaTypeByIdExportData, GetMediaTypeByIdExportResponse, PutMediaTypeByIdImportData, PutMediaTypeByIdImportResponse, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveResponse, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootResponse, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsResponse, PostMediaTypeFolderData, PostMediaTypeFolderResponse, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdResponse, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdResponse, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdResponse, PostMediaTypeImportData, PostMediaTypeImportResponse, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsResponse, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenResponse, GetTreeMediaTypeRootData, GetTreeMediaTypeRootResponse, GetCollectionMediaData, GetCollectionMediaResponse, GetItemMediaData, GetItemMediaResponse, GetItemMediaSearchData, GetItemMediaSearchResponse, PostMediaData, PostMediaResponse, GetMediaByIdData, GetMediaByIdResponse, DeleteMediaByIdData, DeleteMediaByIdResponse, PutMediaByIdData, PutMediaByIdResponse, GetMediaByIdAuditLogData, GetMediaByIdAuditLogResponse, PutMediaByIdMoveData, PutMediaByIdMoveResponse, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinResponse, GetMediaByIdReferencedByData, GetMediaByIdReferencedByResponse, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsResponse, PutMediaByIdValidateData, PutMediaByIdValidateResponse, GetMediaAreReferencedData, GetMediaAreReferencedResponse, GetMediaConfigurationResponse, PutMediaSortData, PutMediaSortResponse, GetMediaUrlsData, GetMediaUrlsResponse, PostMediaValidateData, PostMediaValidateResponse, DeleteRecycleBinMediaResponse, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdResponse, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentResponse, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreResponse, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenResponse, GetRecycleBinMediaRootData, GetRecycleBinMediaRootResponse, GetTreeMediaAncestorsData, GetTreeMediaAncestorsResponse, GetTreeMediaChildrenData, GetTreeMediaChildrenResponse, GetTreeMediaRootData, GetTreeMediaRootResponse, GetItemMemberGroupData, GetItemMemberGroupResponse, GetMemberGroupData, GetMemberGroupResponse, PostMemberGroupData, PostMemberGroupResponse, GetMemberGroupByIdData, GetMemberGroupByIdResponse, DeleteMemberGroupByIdData, DeleteMemberGroupByIdResponse, PutMemberGroupByIdData, PutMemberGroupByIdResponse, GetTreeMemberGroupRootData, GetTreeMemberGroupRootResponse, GetItemMemberTypeData, GetItemMemberTypeResponse, GetItemMemberTypeSearchData, GetItemMemberTypeSearchResponse, PostMemberTypeData, PostMemberTypeResponse, GetMemberTypeByIdData, GetMemberTypeByIdResponse, DeleteMemberTypeByIdData, DeleteMemberTypeByIdResponse, PutMemberTypeByIdData, PutMemberTypeByIdResponse, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesResponse, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyResponse, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsResponse, GetTreeMemberTypeRootData, GetTreeMemberTypeRootResponse, GetFilterMemberData, GetFilterMemberResponse, GetItemMemberData, GetItemMemberResponse, GetItemMemberSearchData, GetItemMemberSearchResponse, PostMemberData, PostMemberResponse, GetMemberByIdData, GetMemberByIdResponse, DeleteMemberByIdData, DeleteMemberByIdResponse, PutMemberByIdData, PutMemberByIdResponse, PutMemberByIdValidateData, PutMemberByIdValidateResponse, GetMemberConfigurationResponse, PostMemberValidateData, PostMemberValidateResponse, PostModelsBuilderBuildResponse, GetModelsBuilderDashboardResponse, GetModelsBuilderStatusResponse, GetObjectTypesData, GetObjectTypesResponse, GetOembedQueryData, GetOembedQueryResponse, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationResponse, GetPackageConfigurationResponse, GetPackageCreatedData, GetPackageCreatedResponse, PostPackageCreatedData, PostPackageCreatedResponse, GetPackageCreatedByIdData, GetPackageCreatedByIdResponse, DeletePackageCreatedByIdData, DeletePackageCreatedByIdResponse, PutPackageCreatedByIdData, PutPackageCreatedByIdResponse, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadResponse, GetPackageMigrationStatusData, GetPackageMigrationStatusResponse, GetItemPartialViewData, GetItemPartialViewResponse, PostPartialViewData, PostPartialViewResponse, GetPartialViewByPathData, GetPartialViewByPathResponse, DeletePartialViewByPathData, DeletePartialViewByPathResponse, PutPartialViewByPathData, PutPartialViewByPathResponse, PutPartialViewByPathRenameData, PutPartialViewByPathRenameResponse, PostPartialViewFolderData, PostPartialViewFolderResponse, GetPartialViewFolderByPathData, GetPartialViewFolderByPathResponse, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathResponse, GetPartialViewSnippetData, GetPartialViewSnippetResponse, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdResponse, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsResponse, GetTreePartialViewChildrenData, GetTreePartialViewChildrenResponse, GetTreePartialViewRootData, GetTreePartialViewRootResponse, DeletePreviewResponse, PostPreviewResponse, GetProfilingStatusResponse, PutProfilingStatusData, PutProfilingStatusResponse, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedResponse, PostPublishedCacheCollectResponse, PostPublishedCacheRebuildResponse, PostPublishedCacheReloadResponse, GetPublishedCacheStatusResponse, GetRedirectManagementData, GetRedirectManagementResponse, GetRedirectManagementByIdData, GetRedirectManagementByIdResponse, DeleteRedirectManagementByIdData, DeleteRedirectManagementByIdResponse, GetRedirectManagementStatusResponse, PostRedirectManagementStatusData, PostRedirectManagementStatusResponse, GetItemRelationTypeData, GetItemRelationTypeResponse, GetRelationTypeData, GetRelationTypeResponse, GetRelationTypeByIdData, GetRelationTypeByIdResponse, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdResponse, GetItemScriptData, GetItemScriptResponse, PostScriptData, PostScriptResponse, GetScriptByPathData, GetScriptByPathResponse, DeleteScriptByPathData, DeleteScriptByPathResponse, PutScriptByPathData, PutScriptByPathResponse, PutScriptByPathRenameData, PutScriptByPathRenameResponse, PostScriptFolderData, PostScriptFolderResponse, GetScriptFolderByPathData, GetScriptFolderByPathResponse, DeleteScriptFolderByPathData, DeleteScriptFolderByPathResponse, GetTreeScriptAncestorsData, GetTreeScriptAncestorsResponse, GetTreeScriptChildrenData, GetTreeScriptChildrenResponse, GetTreeScriptRootData, GetTreeScriptRootResponse, GetSearcherData, GetSearcherResponse, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryResponse, GetSecurityConfigurationResponse, PostSecurityForgotPasswordData, PostSecurityForgotPasswordResponse, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetResponse, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyResponse, GetSegmentData, GetSegmentResponse, GetServerConfigurationResponse, GetServerInformationResponse, GetServerStatusResponse, GetServerTroubleshootingResponse, GetItemStaticFileData, GetItemStaticFileResponse, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsResponse, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenResponse, GetTreeStaticFileRootData, GetTreeStaticFileRootResponse, GetItemStylesheetData, GetItemStylesheetResponse, PostStylesheetData, PostStylesheetResponse, GetStylesheetByPathData, GetStylesheetByPathResponse, DeleteStylesheetByPathData, DeleteStylesheetByPathResponse, PutStylesheetByPathData, PutStylesheetByPathResponse, PutStylesheetByPathRenameData, PutStylesheetByPathRenameResponse, PostStylesheetFolderData, PostStylesheetFolderResponse, GetStylesheetFolderByPathData, GetStylesheetFolderByPathResponse, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathResponse, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsResponse, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenResponse, GetTreeStylesheetRootData, GetTreeStylesheetRootResponse, GetTagData, GetTagResponse, GetTelemetryData, GetTelemetryResponse, GetTelemetryLevelResponse, PostTelemetryLevelData, PostTelemetryLevelResponse, GetItemTemplateData, GetItemTemplateResponse, GetItemTemplateSearchData, GetItemTemplateSearchResponse, PostTemplateData, PostTemplateResponse, GetTemplateByIdData, GetTemplateByIdResponse, DeleteTemplateByIdData, DeleteTemplateByIdResponse, PutTemplateByIdData, PutTemplateByIdResponse, GetTemplateConfigurationResponse, PostTemplateQueryExecuteData, PostTemplateQueryExecuteResponse, GetTemplateQuerySettingsResponse, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsResponse, GetTreeTemplateChildrenData, GetTreeTemplateChildrenResponse, GetTreeTemplateRootData, GetTreeTemplateRootResponse, PostTemporaryFileData, PostTemporaryFileResponse, GetTemporaryFileByIdData, GetTemporaryFileByIdResponse, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdResponse, GetTemporaryFileConfigurationResponse, PostUpgradeAuthorizeResponse, GetUpgradeSettingsResponse, PostUserDataData, PostUserDataResponse, GetUserDataData, GetUserDataResponse, PutUserDataData, PutUserDataResponse, GetUserDataByIdData, GetUserDataByIdResponse, GetFilterUserGroupData, GetFilterUserGroupResponse, GetItemUserGroupData, GetItemUserGroupResponse, DeleteUserGroupData, DeleteUserGroupResponse, PostUserGroupData, PostUserGroupResponse, GetUserGroupData, GetUserGroupResponse, GetUserGroupByIdData, GetUserGroupByIdResponse, DeleteUserGroupByIdData, DeleteUserGroupByIdResponse, PutUserGroupByIdData, PutUserGroupByIdResponse, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersResponse, PostUserGroupByIdUsersData, PostUserGroupByIdUsersResponse, GetFilterUserData, GetFilterUserResponse, GetItemUserData, GetItemUserResponse, PostUserData, PostUserResponse, DeleteUserData, DeleteUserResponse, GetUserData, GetUserResponse, GetUserByIdData, GetUserByIdResponse, DeleteUserByIdData, DeleteUserByIdResponse, PutUserByIdData, PutUserByIdResponse, GetUserById2FaData, GetUserById2FaResponse, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameResponse, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesResponse, PostUserByIdChangePasswordData, PostUserByIdChangePasswordResponse, PostUserByIdResetPasswordData, PostUserByIdResetPasswordResponse, DeleteUserAvatarByIdData, DeleteUserAvatarByIdResponse, PostUserAvatarByIdData, PostUserAvatarByIdResponse, GetUserConfigurationResponse, GetUserCurrentResponse, GetUserCurrent2FaResponse, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameResponse, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameResponse, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameResponse, PostUserCurrentAvatarData, PostUserCurrentAvatarResponse, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordResponse, GetUserCurrentConfigurationResponse, GetUserCurrentLoginProvidersResponse, GetUserCurrentPermissionsData, GetUserCurrentPermissionsResponse, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentResponse, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaResponse, PostUserDisableData, PostUserDisableResponse, PostUserEnableData, PostUserEnableResponse, PostUserInviteData, PostUserInviteResponse, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordResponse, PostUserInviteResendData, PostUserInviteResendResponse, PostUserInviteVerifyData, PostUserInviteVerifyResponse, PostUserSetUserGroupsData, PostUserSetUserGroupsResponse, PostUserUnlockData, PostUserUnlockResponse, GetItemWebhookData, GetItemWebhookResponse, GetWebhookData, GetWebhookResponse, PostWebhookData, PostWebhookResponse, GetWebhookByIdData, GetWebhookByIdResponse, DeleteWebhookByIdData, DeleteWebhookByIdResponse, PutWebhookByIdData, PutWebhookByIdResponse, GetWebhookEventsData, GetWebhookEventsResponse } from './types.gen';\r\n\r\nexport class CultureService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getCulture(data: GetCultureData = {}): CancelablePromise<GetCultureResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/culture',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DataTypeService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDataType(data: PostDataTypeData = {}): CancelablePromise<PostDataTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/data-type',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDataTypeById(data: GetDataTypeByIdData): CancelablePromise<GetDataTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/data-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDataTypeById(data: DeleteDataTypeByIdData): CancelablePromise<DeleteDataTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/data-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDataTypeById(data: PutDataTypeByIdData): CancelablePromise<PutDataTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/data-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDataTypeByIdCopy(data: PostDataTypeByIdCopyData): CancelablePromise<PostDataTypeByIdCopyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/data-type/{id}/copy',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns boolean OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDataTypeByIdIsUsed(data: GetDataTypeByIdIsUsedData): CancelablePromise<GetDataTypeByIdIsUsedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/data-type/{id}/is-used',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDataTypeByIdMove(data: PutDataTypeByIdMoveData): CancelablePromise<PutDataTypeByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/data-type/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDataTypeByIdReferences(data: GetDataTypeByIdReferencesData): CancelablePromise<GetDataTypeByIdReferencesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/data-type/{id}/references',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDataTypeConfiguration(): CancelablePromise<GetDataTypeConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/data-type/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDataTypeFolder(data: PostDataTypeFolderData = {}): CancelablePromise<PostDataTypeFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/data-type/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDataTypeFolderById(data: GetDataTypeFolderByIdData): CancelablePromise<GetDataTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDataTypeFolderById(data: DeleteDataTypeFolderByIdData): CancelablePromise<DeleteDataTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDataTypeFolderById(data: PutDataTypeFolderByIdData): CancelablePromise<PutDataTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.name\r\n     * @param data.editorUiAlias\r\n     * @param data.editorAlias\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getFilterDataType(data: GetFilterDataTypeData = {}): CancelablePromise<GetFilterDataTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/filter/data-type',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                name: data.name,\r\n                editorUiAlias: data.editorUiAlias,\r\n                editorAlias: data.editorAlias\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDataType(data: GetItemDataTypeData = {}): CancelablePromise<GetItemDataTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/data-type',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDataTypeSearch(data: GetItemDataTypeSearchData = {}): CancelablePromise<GetItemDataTypeSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/data-type/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDataTypeAncestors(data: GetTreeDataTypeAncestorsData = {}): CancelablePromise<GetTreeDataTypeAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/data-type/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDataTypeChildren(data: GetTreeDataTypeChildrenData = {}): CancelablePromise<GetTreeDataTypeChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/data-type/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDataTypeRoot(data: GetTreeDataTypeRootData = {}): CancelablePromise<GetTreeDataTypeRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/data-type/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DictionaryService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.filter\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDictionary(data: GetDictionaryData = {}): CancelablePromise<GetDictionaryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/dictionary',\r\n            query: {\r\n                filter: data.filter,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDictionary(data: PostDictionaryData = {}): CancelablePromise<PostDictionaryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/dictionary',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found',\r\n                409: 'Conflict'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDictionaryById(data: GetDictionaryByIdData): CancelablePromise<GetDictionaryByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/dictionary/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDictionaryById(data: DeleteDictionaryByIdData): CancelablePromise<DeleteDictionaryByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/dictionary/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDictionaryById(data: PutDictionaryByIdData): CancelablePromise<PutDictionaryByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/dictionary/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.includeChildren\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDictionaryByIdExport(data: GetDictionaryByIdExportData): CancelablePromise<GetDictionaryByIdExportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/dictionary/{id}/export',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                includeChildren: data.includeChildren\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDictionaryByIdMove(data: PutDictionaryByIdMoveData): CancelablePromise<PutDictionaryByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/dictionary/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDictionaryImport(data: PostDictionaryImportData = {}): CancelablePromise<PostDictionaryImportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/dictionary/import',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDictionary(data: GetItemDictionaryData = {}): CancelablePromise<GetItemDictionaryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/dictionary',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDictionaryAncestors(data: GetTreeDictionaryAncestorsData = {}): CancelablePromise<GetTreeDictionaryAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDictionaryChildren(data: GetTreeDictionaryChildrenData = {}): CancelablePromise<GetTreeDictionaryChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/dictionary/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDictionaryRoot(data: GetTreeDictionaryRootData = {}): CancelablePromise<GetTreeDictionaryRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/dictionary/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DocumentBlueprintService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentBlueprint(data: PostDocumentBlueprintData = {}): CancelablePromise<PostDocumentBlueprintResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-blueprint',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentBlueprintById(data: GetDocumentBlueprintByIdData): CancelablePromise<GetDocumentBlueprintByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDocumentBlueprintById(data: DeleteDocumentBlueprintByIdData): CancelablePromise<DeleteDocumentBlueprintByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentBlueprintById(data: PutDocumentBlueprintByIdData): CancelablePromise<PutDocumentBlueprintByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentBlueprintByIdMove(data: PutDocumentBlueprintByIdMoveData): CancelablePromise<PutDocumentBlueprintByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentBlueprintFolder(data: PostDocumentBlueprintFolderData = {}): CancelablePromise<PostDocumentBlueprintFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-blueprint/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentBlueprintFolderById(data: GetDocumentBlueprintFolderByIdData): CancelablePromise<GetDocumentBlueprintFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDocumentBlueprintFolderById(data: DeleteDocumentBlueprintFolderByIdData): CancelablePromise<DeleteDocumentBlueprintFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentBlueprintFolderById(data: PutDocumentBlueprintFolderByIdData): CancelablePromise<PutDocumentBlueprintFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentBlueprintFromDocument(data: PostDocumentBlueprintFromDocumentData = {}): CancelablePromise<PostDocumentBlueprintFromDocumentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-blueprint/from-document',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDocumentBlueprint(data: GetItemDocumentBlueprintData = {}): CancelablePromise<GetItemDocumentBlueprintResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/document-blueprint',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentBlueprintAncestors(data: GetTreeDocumentBlueprintAncestorsData = {}): CancelablePromise<GetTreeDocumentBlueprintAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentBlueprintChildren(data: GetTreeDocumentBlueprintChildrenData = {}): CancelablePromise<GetTreeDocumentBlueprintChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document-blueprint/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentBlueprintRoot(data: GetTreeDocumentBlueprintRootData = {}): CancelablePromise<GetTreeDocumentBlueprintRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document-blueprint/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DocumentTypeService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentType(data: PostDocumentTypeData = {}): CancelablePromise<PostDocumentTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-type',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeById(data: GetDocumentTypeByIdData): CancelablePromise<GetDocumentTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDocumentTypeById(data: DeleteDocumentTypeByIdData): CancelablePromise<DeleteDocumentTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/document-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentTypeById(data: PutDocumentTypeByIdData): CancelablePromise<PutDocumentTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeByIdAllowedChildren(data: GetDocumentTypeByIdAllowedChildrenData): CancelablePromise<GetDocumentTypeByIdAllowedChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeByIdBlueprint(data: GetDocumentTypeByIdBlueprintData): CancelablePromise<GetDocumentTypeByIdBlueprintResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeByIdCompositionReferences(data: GetDocumentTypeByIdCompositionReferencesData): CancelablePromise<GetDocumentTypeByIdCompositionReferencesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentTypeByIdCopy(data: PostDocumentTypeByIdCopyData): CancelablePromise<PostDocumentTypeByIdCopyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/copy',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeByIdExport(data: GetDocumentTypeByIdExportData): CancelablePromise<GetDocumentTypeByIdExportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/export',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentTypeByIdImport(data: PutDocumentTypeByIdImportData): CancelablePromise<PutDocumentTypeByIdImportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/import',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentTypeByIdMove(data: PutDocumentTypeByIdMoveData): CancelablePromise<PutDocumentTypeByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-type/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeAllowedAtRoot(data: GetDocumentTypeAllowedAtRootData = {}): CancelablePromise<GetDocumentTypeAllowedAtRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/allowed-at-root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentTypeAvailableCompositions(data: PostDocumentTypeAvailableCompositionsData = {}): CancelablePromise<PostDocumentTypeAvailableCompositionsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-type/available-compositions',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeConfiguration(): CancelablePromise<GetDocumentTypeConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentTypeFolder(data: PostDocumentTypeFolderData = {}): CancelablePromise<PostDocumentTypeFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-type/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentTypeFolderById(data: GetDocumentTypeFolderByIdData): CancelablePromise<GetDocumentTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDocumentTypeFolderById(data: DeleteDocumentTypeFolderByIdData): CancelablePromise<DeleteDocumentTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentTypeFolderById(data: PutDocumentTypeFolderByIdData): CancelablePromise<PutDocumentTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentTypeImport(data: PostDocumentTypeImportData = {}): CancelablePromise<PostDocumentTypeImportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-type/import',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDocumentType(data: GetItemDocumentTypeData = {}): CancelablePromise<GetItemDocumentTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/document-type',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDocumentTypeSearch(data: GetItemDocumentTypeSearchData = {}): CancelablePromise<GetItemDocumentTypeSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/document-type/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentTypeAncestors(data: GetTreeDocumentTypeAncestorsData = {}): CancelablePromise<GetTreeDocumentTypeAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document-type/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentTypeChildren(data: GetTreeDocumentTypeChildrenData = {}): CancelablePromise<GetTreeDocumentTypeChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document-type/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentTypeRoot(data: GetTreeDocumentTypeRootData = {}): CancelablePromise<GetTreeDocumentTypeRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document-type/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DocumentVersionService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.documentId\r\n     * @param data.culture\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentVersion(data: GetDocumentVersionData): CancelablePromise<GetDocumentVersionResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-version',\r\n            query: {\r\n                documentId: data.documentId,\r\n                culture: data.culture,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentVersionById(data: GetDocumentVersionByIdData): CancelablePromise<GetDocumentVersionByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document-version/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.preventCleanup\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentVersionByIdPreventCleanup(data: PutDocumentVersionByIdPreventCleanupData): CancelablePromise<PutDocumentVersionByIdPreventCleanupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                preventCleanup: data.preventCleanup\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.culture\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentVersionByIdRollback(data: PostDocumentVersionByIdRollbackData): CancelablePromise<PostDocumentVersionByIdRollbackResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document-version/{id}/rollback',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                culture: data.culture\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DocumentService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.dataTypeId\r\n     * @param data.orderBy\r\n     * @param data.orderCulture\r\n     * @param data.orderDirection\r\n     * @param data.filter\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getCollectionDocumentById(data: GetCollectionDocumentByIdData): CancelablePromise<GetCollectionDocumentByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/collection/document/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                dataTypeId: data.dataTypeId,\r\n                orderBy: data.orderBy,\r\n                orderCulture: data.orderCulture,\r\n                orderDirection: data.orderDirection,\r\n                filter: data.filter,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocument(data: PostDocumentData = {}): CancelablePromise<PostDocumentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentById(data: GetDocumentByIdData): CancelablePromise<GetDocumentByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDocumentById(data: DeleteDocumentByIdData): CancelablePromise<DeleteDocumentByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/document/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentById(data: PutDocumentByIdData): CancelablePromise<PutDocumentByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.orderDirection\r\n     * @param data.sinceDate\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentByIdAuditLog(data: GetDocumentByIdAuditLogData): CancelablePromise<GetDocumentByIdAuditLogResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}/audit-log',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                orderDirection: data.orderDirection,\r\n                sinceDate: data.sinceDate,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentByIdCopy(data: PostDocumentByIdCopyData): CancelablePromise<PostDocumentByIdCopyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document/{id}/copy',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentByIdDomains(data: GetDocumentByIdDomainsData): CancelablePromise<GetDocumentByIdDomainsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}/domains',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdDomains(data: PutDocumentByIdDomainsData): CancelablePromise<PutDocumentByIdDomainsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/domains',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found',\r\n                409: 'Conflict'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdMove(data: PutDocumentByIdMoveData): CancelablePromise<PutDocumentByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdMoveToRecycleBin(data: PutDocumentByIdMoveToRecycleBinData): CancelablePromise<PutDocumentByIdMoveToRecycleBinResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentByIdNotifications(data: GetDocumentByIdNotificationsData): CancelablePromise<GetDocumentByIdNotificationsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}/notifications',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdNotifications(data: PutDocumentByIdNotificationsData): CancelablePromise<PutDocumentByIdNotificationsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/notifications',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentByIdPublicAccess(data: PostDocumentByIdPublicAccessData): CancelablePromise<PostDocumentByIdPublicAccessResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteDocumentByIdPublicAccess(data: DeleteDocumentByIdPublicAccessData): CancelablePromise<DeleteDocumentByIdPublicAccessResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentByIdPublicAccess(data: GetDocumentByIdPublicAccessData): CancelablePromise<GetDocumentByIdPublicAccessResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdPublicAccess(data: PutDocumentByIdPublicAccessData): CancelablePromise<PutDocumentByIdPublicAccessResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdPublish(data: PutDocumentByIdPublishData): CancelablePromise<PutDocumentByIdPublishResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/publish',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdPublishWithDescendants(data: PutDocumentByIdPublishWithDescendantsData): CancelablePromise<PutDocumentByIdPublishWithDescendantsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentByIdReferencedBy(data: GetDocumentByIdReferencedByData): CancelablePromise<GetDocumentByIdReferencedByResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}/referenced-by',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentByIdReferencedDescendants(data: GetDocumentByIdReferencedDescendantsData): CancelablePromise<GetDocumentByIdReferencedDescendantsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdUnpublish(data: PutDocumentByIdUnpublishData): CancelablePromise<PutDocumentByIdUnpublishResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/unpublish',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentByIdValidate(data: PutDocumentByIdValidateData): CancelablePromise<PutDocumentByIdValidateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/{id}/validate',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentAreReferenced(data: GetDocumentAreReferencedData = {}): CancelablePromise<GetDocumentAreReferencedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/are-referenced',\r\n            query: {\r\n                id: data.id,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentConfiguration(): CancelablePromise<GetDocumentConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putDocumentSort(data: PutDocumentSortData = {}): CancelablePromise<PutDocumentSortResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/document/sort',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDocumentUrls(data: GetDocumentUrlsData = {}): CancelablePromise<GetDocumentUrlsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/document/urls',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postDocumentValidate(data: PostDocumentValidateData = {}): CancelablePromise<PostDocumentValidateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/document/validate',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDocument(data: GetItemDocumentData = {}): CancelablePromise<GetItemDocumentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/document',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemDocumentSearch(data: GetItemDocumentSearchData = {}): CancelablePromise<GetItemDocumentSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/document/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteRecycleBinDocument(): CancelablePromise<DeleteRecycleBinDocumentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/recycle-bin/document',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteRecycleBinDocumentById(data: DeleteRecycleBinDocumentByIdData): CancelablePromise<DeleteRecycleBinDocumentByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRecycleBinDocumentByIdOriginalParent(data: GetRecycleBinDocumentByIdOriginalParentData): CancelablePromise<GetRecycleBinDocumentByIdOriginalParentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putRecycleBinDocumentByIdRestore(data: PutRecycleBinDocumentByIdRestoreData): CancelablePromise<PutRecycleBinDocumentByIdRestoreResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRecycleBinDocumentChildren(data: GetRecycleBinDocumentChildrenData = {}): CancelablePromise<GetRecycleBinDocumentChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/recycle-bin/document/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRecycleBinDocumentRoot(data: GetRecycleBinDocumentRootData = {}): CancelablePromise<GetRecycleBinDocumentRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/recycle-bin/document/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentAncestors(data: GetTreeDocumentAncestorsData = {}): CancelablePromise<GetTreeDocumentAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.dataTypeId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentChildren(data: GetTreeDocumentChildrenData = {}): CancelablePromise<GetTreeDocumentChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                dataTypeId: data.dataTypeId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.dataTypeId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeDocumentRoot(data: GetTreeDocumentRootData = {}): CancelablePromise<GetTreeDocumentRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/document/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                dataTypeId: data.dataTypeId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class DynamicRootService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postDynamicRootQuery(data: PostDynamicRootQueryData = {}): CancelablePromise<PostDynamicRootQueryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/dynamic-root/query',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static getDynamicRootSteps(): CancelablePromise<GetDynamicRootStepsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/dynamic-root/steps',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class HealthCheckService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getHealthCheckGroup(data: GetHealthCheckGroupData = {}): CancelablePromise<GetHealthCheckGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/health-check-group',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.name\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getHealthCheckGroupByName(data: GetHealthCheckGroupByNameData): CancelablePromise<GetHealthCheckGroupByNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/health-check-group/{name}',\r\n            path: {\r\n                name: data.name\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.name\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postHealthCheckGroupByNameCheck(data: PostHealthCheckGroupByNameCheckData): CancelablePromise<PostHealthCheckGroupByNameCheckResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/health-check-group/{name}/check',\r\n            path: {\r\n                name: data.name\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postHealthCheckExecuteAction(data: PostHealthCheckExecuteActionData = {}): CancelablePromise<PostHealthCheckExecuteActionResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/health-check/execute-action',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class HelpService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.section\r\n     * @param data.tree\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.baseUrl\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getHelp(data: GetHelpData = {}): CancelablePromise<GetHelpResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/help',\r\n            query: {\r\n                section: data.section,\r\n                tree: data.tree,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                baseUrl: data.baseUrl\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ImagingService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.height\r\n     * @param data.width\r\n     * @param data.mode\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getImagingResizeUrls(data: GetImagingResizeUrlsData = {}): CancelablePromise<GetImagingResizeUrlsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/imaging/resize/urls',\r\n            query: {\r\n                id: data.id,\r\n                height: data.height,\r\n                width: data.width,\r\n                mode: data.mode\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ImportService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.temporaryFileId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getImportAnalyze(data: GetImportAnalyzeData = {}): CancelablePromise<GetImportAnalyzeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/import/analyze',\r\n            query: {\r\n                temporaryFileId: data.temporaryFileId\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class IndexerService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getIndexer(data: GetIndexerData = {}): CancelablePromise<GetIndexerResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/indexer',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.indexName\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getIndexerByIndexName(data: GetIndexerByIndexNameData): CancelablePromise<GetIndexerByIndexNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/indexer/{indexName}',\r\n            path: {\r\n                indexName: data.indexName\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.indexName\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postIndexerByIndexNameRebuild(data: PostIndexerByIndexNameRebuildData): CancelablePromise<PostIndexerByIndexNameRebuildResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',\r\n            path: {\r\n                indexName: data.indexName\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found',\r\n                409: 'Conflict'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class InstallService {\r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getInstallSettings(): CancelablePromise<GetInstallSettingsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/install/settings',\r\n            errors: {\r\n                428: 'Precondition Required'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postInstallSetup(data: PostInstallSetupData = {}): CancelablePromise<PostInstallSetupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/install/setup',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                428: 'Precondition Required'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postInstallValidateDatabase(data: PostInstallValidateDatabaseData = {}): CancelablePromise<PostInstallValidateDatabaseResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/install/validate-database',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class LanguageService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.isoCode\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemLanguage(data: GetItemLanguageData = {}): CancelablePromise<GetItemLanguageResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/language',\r\n            query: {\r\n                isoCode: data.isoCode\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemLanguageDefault(): CancelablePromise<GetItemLanguageDefaultResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/language/default',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLanguage(data: GetLanguageData = {}): CancelablePromise<GetLanguageResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/language',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postLanguage(data: PostLanguageData = {}): CancelablePromise<PostLanguageResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/language',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.isoCode\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLanguageByIsoCode(data: GetLanguageByIsoCodeData): CancelablePromise<GetLanguageByIsoCodeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/language/{isoCode}',\r\n            path: {\r\n                isoCode: data.isoCode\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.isoCode\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteLanguageByIsoCode(data: DeleteLanguageByIsoCodeData): CancelablePromise<DeleteLanguageByIsoCodeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/language/{isoCode}',\r\n            path: {\r\n                isoCode: data.isoCode\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.isoCode\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putLanguageByIsoCode(data: PutLanguageByIsoCodeData): CancelablePromise<PutLanguageByIsoCodeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/language/{isoCode}',\r\n            path: {\r\n                isoCode: data.isoCode\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class LogViewerService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerLevel(data: GetLogViewerLevelData = {}): CancelablePromise<GetLogViewerLevelResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/level',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.startDate\r\n     * @param data.endDate\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerLevelCount(data: GetLogViewerLevelCountData = {}): CancelablePromise<GetLogViewerLevelCountResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/level-count',\r\n            query: {\r\n                startDate: data.startDate,\r\n                endDate: data.endDate\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.orderDirection\r\n     * @param data.filterExpression\r\n     * @param data.logLevel\r\n     * @param data.startDate\r\n     * @param data.endDate\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerLog(data: GetLogViewerLogData = {}): CancelablePromise<GetLogViewerLogResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/log',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                orderDirection: data.orderDirection,\r\n                filterExpression: data.filterExpression,\r\n                logLevel: data.logLevel,\r\n                startDate: data.startDate,\r\n                endDate: data.endDate\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.startDate\r\n     * @param data.endDate\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerMessageTemplate(data: GetLogViewerMessageTemplateData = {}): CancelablePromise<GetLogViewerMessageTemplateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/message-template',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                startDate: data.startDate,\r\n                endDate: data.endDate\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerSavedSearch(data: GetLogViewerSavedSearchData = {}): CancelablePromise<GetLogViewerSavedSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/saved-search',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postLogViewerSavedSearch(data: PostLogViewerSavedSearchData = {}): CancelablePromise<PostLogViewerSavedSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/log-viewer/saved-search',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.name\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerSavedSearchByName(data: GetLogViewerSavedSearchByNameData): CancelablePromise<GetLogViewerSavedSearchByNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',\r\n            path: {\r\n                name: data.name\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.name\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteLogViewerSavedSearchByName(data: DeleteLogViewerSavedSearchByNameData): CancelablePromise<DeleteLogViewerSavedSearchByNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',\r\n            path: {\r\n                name: data.name\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.startDate\r\n     * @param data.endDate\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getLogViewerValidateLogsSize(data: GetLogViewerValidateLogsSizeData = {}): CancelablePromise<GetLogViewerValidateLogsSizeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',\r\n            query: {\r\n                startDate: data.startDate,\r\n                endDate: data.endDate\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ManifestService {\r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getManifestManifest(): CancelablePromise<GetManifestManifestResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/manifest/manifest',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getManifestManifestPrivate(): CancelablePromise<GetManifestManifestPrivateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/manifest/manifest/private',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getManifestManifestPublic(): CancelablePromise<GetManifestManifestPublicResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/manifest/manifest/public'\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class MediaTypeService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMediaType(data: GetItemMediaTypeData = {}): CancelablePromise<GetItemMediaTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/media-type',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.fileExtension\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMediaTypeAllowed(data: GetItemMediaTypeAllowedData = {}): CancelablePromise<GetItemMediaTypeAllowedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/media-type/allowed',\r\n            query: {\r\n                fileExtension: data.fileExtension,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMediaTypeFolders(data: GetItemMediaTypeFoldersData = {}): CancelablePromise<GetItemMediaTypeFoldersResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/media-type/folders',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMediaTypeSearch(data: GetItemMediaTypeSearchData = {}): CancelablePromise<GetItemMediaTypeSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/media-type/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMediaType(data: PostMediaTypeData = {}): CancelablePromise<PostMediaTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media-type',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaTypeById(data: GetMediaTypeByIdData): CancelablePromise<GetMediaTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteMediaTypeById(data: DeleteMediaTypeByIdData): CancelablePromise<DeleteMediaTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/media-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaTypeById(data: PutMediaTypeByIdData): CancelablePromise<PutMediaTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaTypeByIdAllowedChildren(data: GetMediaTypeByIdAllowedChildrenData): CancelablePromise<GetMediaTypeByIdAllowedChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaTypeByIdCompositionReferences(data: GetMediaTypeByIdCompositionReferencesData): CancelablePromise<GetMediaTypeByIdCompositionReferencesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMediaTypeByIdCopy(data: PostMediaTypeByIdCopyData): CancelablePromise<PostMediaTypeByIdCopyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media-type/{id}/copy',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaTypeByIdExport(data: GetMediaTypeByIdExportData): CancelablePromise<GetMediaTypeByIdExportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media-type/{id}/export',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaTypeByIdImport(data: PutMediaTypeByIdImportData): CancelablePromise<PutMediaTypeByIdImportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media-type/{id}/import',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaTypeByIdMove(data: PutMediaTypeByIdMoveData): CancelablePromise<PutMediaTypeByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media-type/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaTypeAllowedAtRoot(data: GetMediaTypeAllowedAtRootData = {}): CancelablePromise<GetMediaTypeAllowedAtRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media-type/allowed-at-root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postMediaTypeAvailableCompositions(data: PostMediaTypeAvailableCompositionsData = {}): CancelablePromise<PostMediaTypeAvailableCompositionsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media-type/available-compositions',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMediaTypeFolder(data: PostMediaTypeFolderData = {}): CancelablePromise<PostMediaTypeFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media-type/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaTypeFolderById(data: GetMediaTypeFolderByIdData): CancelablePromise<GetMediaTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteMediaTypeFolderById(data: DeleteMediaTypeFolderByIdData): CancelablePromise<DeleteMediaTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaTypeFolderById(data: PutMediaTypeFolderByIdData): CancelablePromise<PutMediaTypeFolderByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMediaTypeImport(data: PostMediaTypeImportData = {}): CancelablePromise<PostMediaTypeImportResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media-type/import',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMediaTypeAncestors(data: GetTreeMediaTypeAncestorsData = {}): CancelablePromise<GetTreeMediaTypeAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/media-type/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMediaTypeChildren(data: GetTreeMediaTypeChildrenData = {}): CancelablePromise<GetTreeMediaTypeChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/media-type/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.foldersOnly\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMediaTypeRoot(data: GetTreeMediaTypeRootData = {}): CancelablePromise<GetTreeMediaTypeRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/media-type/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                foldersOnly: data.foldersOnly\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class MediaService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.dataTypeId\r\n     * @param data.orderBy\r\n     * @param data.orderDirection\r\n     * @param data.filter\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getCollectionMedia(data: GetCollectionMediaData = {}): CancelablePromise<GetCollectionMediaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/collection/media',\r\n            query: {\r\n                id: data.id,\r\n                dataTypeId: data.dataTypeId,\r\n                orderBy: data.orderBy,\r\n                orderDirection: data.orderDirection,\r\n                filter: data.filter,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMedia(data: GetItemMediaData = {}): CancelablePromise<GetItemMediaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/media',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMediaSearch(data: GetItemMediaSearchData = {}): CancelablePromise<GetItemMediaSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/media/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMedia(data: PostMediaData = {}): CancelablePromise<PostMediaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaById(data: GetMediaByIdData): CancelablePromise<GetMediaByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteMediaById(data: DeleteMediaByIdData): CancelablePromise<DeleteMediaByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/media/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaById(data: PutMediaByIdData): CancelablePromise<PutMediaByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.orderDirection\r\n     * @param data.sinceDate\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaByIdAuditLog(data: GetMediaByIdAuditLogData): CancelablePromise<GetMediaByIdAuditLogResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/{id}/audit-log',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                orderDirection: data.orderDirection,\r\n                sinceDate: data.sinceDate,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaByIdMove(data: PutMediaByIdMoveData): CancelablePromise<PutMediaByIdMoveResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media/{id}/move',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaByIdMoveToRecycleBin(data: PutMediaByIdMoveToRecycleBinData): CancelablePromise<PutMediaByIdMoveToRecycleBinResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaByIdReferencedBy(data: GetMediaByIdReferencedByData): CancelablePromise<GetMediaByIdReferencedByResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/{id}/referenced-by',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaByIdReferencedDescendants(data: GetMediaByIdReferencedDescendantsData): CancelablePromise<GetMediaByIdReferencedDescendantsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaByIdValidate(data: PutMediaByIdValidateData): CancelablePromise<PutMediaByIdValidateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media/{id}/validate',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaAreReferenced(data: GetMediaAreReferencedData = {}): CancelablePromise<GetMediaAreReferencedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/are-referenced',\r\n            query: {\r\n                id: data.id,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaConfiguration(): CancelablePromise<GetMediaConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMediaSort(data: PutMediaSortData = {}): CancelablePromise<PutMediaSortResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/media/sort',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMediaUrls(data: GetMediaUrlsData = {}): CancelablePromise<GetMediaUrlsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/media/urls',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postMediaValidate(data: PostMediaValidateData = {}): CancelablePromise<PostMediaValidateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/media/validate',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteRecycleBinMedia(): CancelablePromise<DeleteRecycleBinMediaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/recycle-bin/media',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteRecycleBinMediaById(data: DeleteRecycleBinMediaByIdData): CancelablePromise<DeleteRecycleBinMediaByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRecycleBinMediaByIdOriginalParent(data: GetRecycleBinMediaByIdOriginalParentData): CancelablePromise<GetRecycleBinMediaByIdOriginalParentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putRecycleBinMediaByIdRestore(data: PutRecycleBinMediaByIdRestoreData): CancelablePromise<PutRecycleBinMediaByIdRestoreResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRecycleBinMediaChildren(data: GetRecycleBinMediaChildrenData = {}): CancelablePromise<GetRecycleBinMediaChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/recycle-bin/media/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRecycleBinMediaRoot(data: GetRecycleBinMediaRootData = {}): CancelablePromise<GetRecycleBinMediaRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/recycle-bin/media/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMediaAncestors(data: GetTreeMediaAncestorsData = {}): CancelablePromise<GetTreeMediaAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/media/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.dataTypeId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMediaChildren(data: GetTreeMediaChildrenData = {}): CancelablePromise<GetTreeMediaChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/media/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take,\r\n                dataTypeId: data.dataTypeId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.dataTypeId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMediaRoot(data: GetTreeMediaRootData = {}): CancelablePromise<GetTreeMediaRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/media/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                dataTypeId: data.dataTypeId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class MemberGroupService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMemberGroup(data: GetItemMemberGroupData = {}): CancelablePromise<GetItemMemberGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/member-group',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMemberGroup(data: GetMemberGroupData = {}): CancelablePromise<GetMemberGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/member-group',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMemberGroup(data: PostMemberGroupData = {}): CancelablePromise<PostMemberGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/member-group',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMemberGroupById(data: GetMemberGroupByIdData): CancelablePromise<GetMemberGroupByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/member-group/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteMemberGroupById(data: DeleteMemberGroupByIdData): CancelablePromise<DeleteMemberGroupByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/member-group/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMemberGroupById(data: PutMemberGroupByIdData): CancelablePromise<PutMemberGroupByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/member-group/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMemberGroupRoot(data: GetTreeMemberGroupRootData = {}): CancelablePromise<GetTreeMemberGroupRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/member-group/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class MemberTypeService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMemberType(data: GetItemMemberTypeData = {}): CancelablePromise<GetItemMemberTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/member-type',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMemberTypeSearch(data: GetItemMemberTypeSearchData = {}): CancelablePromise<GetItemMemberTypeSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/member-type/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMemberType(data: PostMemberTypeData = {}): CancelablePromise<PostMemberTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/member-type',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMemberTypeById(data: GetMemberTypeByIdData): CancelablePromise<GetMemberTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/member-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteMemberTypeById(data: DeleteMemberTypeByIdData): CancelablePromise<DeleteMemberTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/member-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMemberTypeById(data: PutMemberTypeByIdData): CancelablePromise<PutMemberTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/member-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMemberTypeByIdCompositionReferences(data: GetMemberTypeByIdCompositionReferencesData): CancelablePromise<GetMemberTypeByIdCompositionReferencesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMemberTypeByIdCopy(data: PostMemberTypeByIdCopyData): CancelablePromise<PostMemberTypeByIdCopyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/member-type/{id}/copy',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postMemberTypeAvailableCompositions(data: PostMemberTypeAvailableCompositionsData = {}): CancelablePromise<PostMemberTypeAvailableCompositionsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/member-type/available-compositions',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeMemberTypeRoot(data: GetTreeMemberTypeRootData = {}): CancelablePromise<GetTreeMemberTypeRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/member-type/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class MemberService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.memberTypeId\r\n     * @param data.memberGroupName\r\n     * @param data.isApproved\r\n     * @param data.isLockedOut\r\n     * @param data.orderBy\r\n     * @param data.orderDirection\r\n     * @param data.filter\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getFilterMember(data: GetFilterMemberData = {}): CancelablePromise<GetFilterMemberResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/filter/member',\r\n            query: {\r\n                memberTypeId: data.memberTypeId,\r\n                memberGroupName: data.memberGroupName,\r\n                isApproved: data.isApproved,\r\n                isLockedOut: data.isLockedOut,\r\n                orderBy: data.orderBy,\r\n                orderDirection: data.orderDirection,\r\n                filter: data.filter,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMember(data: GetItemMemberData = {}): CancelablePromise<GetItemMemberResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/member',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemMemberSearch(data: GetItemMemberSearchData = {}): CancelablePromise<GetItemMemberSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/member/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postMember(data: PostMemberData = {}): CancelablePromise<PostMemberResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/member',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMemberById(data: GetMemberByIdData): CancelablePromise<GetMemberByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/member/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteMemberById(data: DeleteMemberByIdData): CancelablePromise<DeleteMemberByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/member/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMemberById(data: PutMemberByIdData): CancelablePromise<PutMemberByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/member/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putMemberByIdValidate(data: PutMemberByIdValidateData): CancelablePromise<PutMemberByIdValidateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/member/{id}/validate',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getMemberConfiguration(): CancelablePromise<GetMemberConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/member/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postMemberValidate(data: PostMemberValidateData = {}): CancelablePromise<PostMemberValidateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/member/validate',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ModelsBuilderService {\r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postModelsBuilderBuild(): CancelablePromise<PostModelsBuilderBuildResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/models-builder/build',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                428: 'Precondition Required'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getModelsBuilderDashboard(): CancelablePromise<GetModelsBuilderDashboardResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/models-builder/dashboard',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getModelsBuilderStatus(): CancelablePromise<GetModelsBuilderStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/models-builder/status',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ObjectTypesService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getObjectTypes(data: GetObjectTypesData = {}): CancelablePromise<GetObjectTypesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/object-types',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class OEmbedService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.url\r\n     * @param data.maxWidth\r\n     * @param data.maxHeight\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getOembedQuery(data: GetOembedQueryData = {}): CancelablePromise<GetOembedQueryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/oembed/query',\r\n            query: {\r\n                url: data.url,\r\n                maxWidth: data.maxWidth,\r\n                maxHeight: data.maxHeight\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class PackageService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.name\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postPackageByNameRunMigration(data: PostPackageByNameRunMigrationData): CancelablePromise<PostPackageByNameRunMigrationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/package/{name}/run-migration',\r\n            path: {\r\n                name: data.name\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found',\r\n                409: 'Conflict'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPackageConfiguration(): CancelablePromise<GetPackageConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/package/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPackageCreated(data: GetPackageCreatedData = {}): CancelablePromise<GetPackageCreatedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/package/created',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postPackageCreated(data: PostPackageCreatedData = {}): CancelablePromise<PostPackageCreatedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/package/created',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPackageCreatedById(data: GetPackageCreatedByIdData): CancelablePromise<GetPackageCreatedByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/package/created/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deletePackageCreatedById(data: DeletePackageCreatedByIdData): CancelablePromise<DeletePackageCreatedByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/package/created/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putPackageCreatedById(data: PutPackageCreatedByIdData): CancelablePromise<PutPackageCreatedByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/package/created/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPackageCreatedByIdDownload(data: GetPackageCreatedByIdDownloadData): CancelablePromise<GetPackageCreatedByIdDownloadResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/package/created/{id}/download',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPackageMigrationStatus(data: GetPackageMigrationStatusData = {}): CancelablePromise<GetPackageMigrationStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/package/migration-status',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class PartialViewService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemPartialView(data: GetItemPartialViewData = {}): CancelablePromise<GetItemPartialViewResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/partial-view',\r\n            query: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postPartialView(data: PostPartialViewData = {}): CancelablePromise<PostPartialViewResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/partial-view',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPartialViewByPath(data: GetPartialViewByPathData): CancelablePromise<GetPartialViewByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/partial-view/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deletePartialViewByPath(data: DeletePartialViewByPathData): CancelablePromise<DeletePartialViewByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/partial-view/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putPartialViewByPath(data: PutPartialViewByPathData): CancelablePromise<PutPartialViewByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/partial-view/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static putPartialViewByPathRename(data: PutPartialViewByPathRenameData): CancelablePromise<PutPartialViewByPathRenameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/partial-view/{path}/rename',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postPartialViewFolder(data: PostPartialViewFolderData = {}): CancelablePromise<PostPartialViewFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/partial-view/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPartialViewFolderByPath(data: GetPartialViewFolderByPathData): CancelablePromise<GetPartialViewFolderByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/partial-view/folder/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deletePartialViewFolderByPath(data: DeletePartialViewFolderByPathData): CancelablePromise<DeletePartialViewFolderByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/partial-view/folder/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPartialViewSnippet(data: GetPartialViewSnippetData = {}): CancelablePromise<GetPartialViewSnippetResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/partial-view/snippet',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPartialViewSnippetById(data: GetPartialViewSnippetByIdData): CancelablePromise<GetPartialViewSnippetByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantPath\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreePartialViewAncestors(data: GetTreePartialViewAncestorsData = {}): CancelablePromise<GetTreePartialViewAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',\r\n            query: {\r\n                descendantPath: data.descendantPath\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentPath\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreePartialViewChildren(data: GetTreePartialViewChildrenData = {}): CancelablePromise<GetTreePartialViewChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/partial-view/children',\r\n            query: {\r\n                parentPath: data.parentPath,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreePartialViewRoot(data: GetTreePartialViewRootData = {}): CancelablePromise<GetTreePartialViewRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/partial-view/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class PreviewService {\r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deletePreview(): CancelablePromise<DeletePreviewResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/preview',\r\n            responseHeader: 'Umb-Notifications'\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postPreview(): CancelablePromise<PostPreviewResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/preview',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ProfilingService {\r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getProfilingStatus(): CancelablePromise<GetProfilingStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/profiling/status',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putProfilingStatus(data: PutProfilingStatusData = {}): CancelablePromise<PutProfilingStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/profiling/status',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class PropertyTypeService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.contentTypeId\r\n     * @param data.propertyAlias\r\n     * @returns boolean OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPropertyTypeIsUsed(data: GetPropertyTypeIsUsedData = {}): CancelablePromise<GetPropertyTypeIsUsedResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/property-type/is-used',\r\n            query: {\r\n                contentTypeId: data.contentTypeId,\r\n                propertyAlias: data.propertyAlias\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class PublishedCacheService {\r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postPublishedCacheCollect(): CancelablePromise<PostPublishedCacheCollectResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/published-cache/collect',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postPublishedCacheRebuild(): CancelablePromise<PostPublishedCacheRebuildResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/published-cache/rebuild',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postPublishedCacheReload(): CancelablePromise<PostPublishedCacheReloadResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/published-cache/reload',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static getPublishedCacheStatus(): CancelablePromise<GetPublishedCacheStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/published-cache/status',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class RedirectManagementService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.filter\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRedirectManagement(data: GetRedirectManagementData = {}): CancelablePromise<GetRedirectManagementResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/redirect-management',\r\n            query: {\r\n                filter: data.filter,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRedirectManagementById(data: GetRedirectManagementByIdData): CancelablePromise<GetRedirectManagementByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/redirect-management/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteRedirectManagementById(data: DeleteRedirectManagementByIdData): CancelablePromise<DeleteRedirectManagementByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/redirect-management/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRedirectManagementStatus(): CancelablePromise<GetRedirectManagementStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/redirect-management/status',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.status\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postRedirectManagementStatus(data: PostRedirectManagementStatusData = {}): CancelablePromise<PostRedirectManagementStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/redirect-management/status',\r\n            query: {\r\n                status: data.status\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class RelationTypeService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemRelationType(data: GetItemRelationTypeData = {}): CancelablePromise<GetItemRelationTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/relation-type',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRelationType(data: GetRelationTypeData = {}): CancelablePromise<GetRelationTypeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/relation-type',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRelationTypeById(data: GetRelationTypeByIdData): CancelablePromise<GetRelationTypeByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/relation-type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class RelationService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getRelationByRelationTypeId(data: GetRelationByRelationTypeIdData): CancelablePromise<GetRelationByRelationTypeIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/relation/type/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ScriptService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemScript(data: GetItemScriptData = {}): CancelablePromise<GetItemScriptResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/script',\r\n            query: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postScript(data: PostScriptData = {}): CancelablePromise<PostScriptResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/script',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getScriptByPath(data: GetScriptByPathData): CancelablePromise<GetScriptByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/script/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteScriptByPath(data: DeleteScriptByPathData): CancelablePromise<DeleteScriptByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/script/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putScriptByPath(data: PutScriptByPathData): CancelablePromise<PutScriptByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/script/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static putScriptByPathRename(data: PutScriptByPathRenameData): CancelablePromise<PutScriptByPathRenameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/script/{path}/rename',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postScriptFolder(data: PostScriptFolderData = {}): CancelablePromise<PostScriptFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/script/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getScriptFolderByPath(data: GetScriptFolderByPathData): CancelablePromise<GetScriptFolderByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/script/folder/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteScriptFolderByPath(data: DeleteScriptFolderByPathData): CancelablePromise<DeleteScriptFolderByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/script/folder/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantPath\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeScriptAncestors(data: GetTreeScriptAncestorsData = {}): CancelablePromise<GetTreeScriptAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/script/ancestors',\r\n            query: {\r\n                descendantPath: data.descendantPath\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentPath\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeScriptChildren(data: GetTreeScriptChildrenData = {}): CancelablePromise<GetTreeScriptChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/script/children',\r\n            query: {\r\n                parentPath: data.parentPath,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeScriptRoot(data: GetTreeScriptRootData = {}): CancelablePromise<GetTreeScriptRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/script/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class SearcherService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getSearcher(data: GetSearcherData = {}): CancelablePromise<GetSearcherResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/searcher',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.searcherName\r\n     * @param data.term\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getSearcherBySearcherNameQuery(data: GetSearcherBySearcherNameQueryData): CancelablePromise<GetSearcherBySearcherNameQueryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',\r\n            path: {\r\n                searcherName: data.searcherName\r\n            },\r\n            query: {\r\n                term: data.term,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class SecurityService {\r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getSecurityConfiguration(): CancelablePromise<GetSecurityConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/security/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postSecurityForgotPassword(data: PostSecurityForgotPasswordData = {}): CancelablePromise<PostSecurityForgotPasswordResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/security/forgot-password',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string No Content\r\n     * @throws ApiError\r\n     */\r\n    public static postSecurityForgotPasswordReset(data: PostSecurityForgotPasswordResetData = {}): CancelablePromise<PostSecurityForgotPasswordResetResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/security/forgot-password/reset',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postSecurityForgotPasswordVerify(data: PostSecurityForgotPasswordVerifyData = {}): CancelablePromise<PostSecurityForgotPasswordVerifyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/security/forgot-password/verify',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class SegmentService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getSegment(data: GetSegmentData = {}): CancelablePromise<GetSegmentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/segment',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class ServerService {\r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getServerConfiguration(): CancelablePromise<GetServerConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/server/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getServerInformation(): CancelablePromise<GetServerInformationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/server/information',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getServerStatus(): CancelablePromise<GetServerStatusResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/server/status',\r\n            errors: {\r\n                400: 'Bad Request'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getServerTroubleshooting(): CancelablePromise<GetServerTroubleshootingResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/server/troubleshooting',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class StaticFileService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemStaticFile(data: GetItemStaticFileData = {}): CancelablePromise<GetItemStaticFileResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/static-file',\r\n            query: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantPath\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeStaticFileAncestors(data: GetTreeStaticFileAncestorsData = {}): CancelablePromise<GetTreeStaticFileAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/static-file/ancestors',\r\n            query: {\r\n                descendantPath: data.descendantPath\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentPath\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeStaticFileChildren(data: GetTreeStaticFileChildrenData = {}): CancelablePromise<GetTreeStaticFileChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/static-file/children',\r\n            query: {\r\n                parentPath: data.parentPath,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeStaticFileRoot(data: GetTreeStaticFileRootData = {}): CancelablePromise<GetTreeStaticFileRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/static-file/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class StylesheetService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemStylesheet(data: GetItemStylesheetData = {}): CancelablePromise<GetItemStylesheetResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/stylesheet',\r\n            query: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postStylesheet(data: PostStylesheetData = {}): CancelablePromise<PostStylesheetResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/stylesheet',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getStylesheetByPath(data: GetStylesheetByPathData): CancelablePromise<GetStylesheetByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteStylesheetByPath(data: DeleteStylesheetByPathData): CancelablePromise<DeleteStylesheetByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putStylesheetByPath(data: PutStylesheetByPathData): CancelablePromise<PutStylesheetByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static putStylesheetByPathRename(data: PutStylesheetByPathRenameData): CancelablePromise<PutStylesheetByPathRenameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postStylesheetFolder(data: PostStylesheetFolderData = {}): CancelablePromise<PostStylesheetFolderResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/stylesheet/folder',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getStylesheetFolderByPath(data: GetStylesheetFolderByPathData): CancelablePromise<GetStylesheetFolderByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.path\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteStylesheetFolderByPath(data: DeleteStylesheetFolderByPathData): CancelablePromise<DeleteStylesheetFolderByPathResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',\r\n            path: {\r\n                path: data.path\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantPath\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeStylesheetAncestors(data: GetTreeStylesheetAncestorsData = {}): CancelablePromise<GetTreeStylesheetAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',\r\n            query: {\r\n                descendantPath: data.descendantPath\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentPath\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeStylesheetChildren(data: GetTreeStylesheetChildrenData = {}): CancelablePromise<GetTreeStylesheetChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/stylesheet/children',\r\n            query: {\r\n                parentPath: data.parentPath,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeStylesheetRoot(data: GetTreeStylesheetRootData = {}): CancelablePromise<GetTreeStylesheetRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/stylesheet/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class TagService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.tagGroup\r\n     * @param data.culture\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTag(data: GetTagData = {}): CancelablePromise<GetTagResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tag',\r\n            query: {\r\n                query: data.query,\r\n                tagGroup: data.tagGroup,\r\n                culture: data.culture,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class TelemetryService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTelemetry(data: GetTelemetryData = {}): CancelablePromise<GetTelemetryResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/telemetry',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTelemetryLevel(): CancelablePromise<GetTelemetryLevelResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/telemetry/level',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postTelemetryLevel(data: PostTelemetryLevelData = {}): CancelablePromise<PostTelemetryLevelResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/telemetry/level',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class TemplateService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemTemplate(data: GetItemTemplateData = {}): CancelablePromise<GetItemTemplateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/template',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.query\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemTemplateSearch(data: GetItemTemplateSearchData = {}): CancelablePromise<GetItemTemplateSearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/template/search',\r\n            query: {\r\n                query: data.query,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postTemplate(data: PostTemplateData = {}): CancelablePromise<PostTemplateResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/template',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTemplateById(data: GetTemplateByIdData): CancelablePromise<GetTemplateByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/template/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteTemplateById(data: DeleteTemplateByIdData): CancelablePromise<DeleteTemplateByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/template/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putTemplateById(data: PutTemplateByIdData): CancelablePromise<PutTemplateByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/template/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTemplateConfiguration(): CancelablePromise<GetTemplateConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/template/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postTemplateQueryExecute(data: PostTemplateQueryExecuteData = {}): CancelablePromise<PostTemplateQueryExecuteResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/template/query/execute',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTemplateQuerySettings(): CancelablePromise<GetTemplateQuerySettingsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/template/query/settings',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.descendantId\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeTemplateAncestors(data: GetTreeTemplateAncestorsData = {}): CancelablePromise<GetTreeTemplateAncestorsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/template/ancestors',\r\n            query: {\r\n                descendantId: data.descendantId\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.parentId\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeTemplateChildren(data: GetTreeTemplateChildrenData = {}): CancelablePromise<GetTreeTemplateChildrenResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/template/children',\r\n            query: {\r\n                parentId: data.parentId,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTreeTemplateRoot(data: GetTreeTemplateRootData = {}): CancelablePromise<GetTreeTemplateRootResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/tree/template/root',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class TemporaryFileService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.formData\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postTemporaryFile(data: PostTemporaryFileData = {}): CancelablePromise<PostTemporaryFileResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/temporary-file',\r\n            formData: data.formData,\r\n            mediaType: 'multipart/form-data',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTemporaryFileById(data: GetTemporaryFileByIdData): CancelablePromise<GetTemporaryFileByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/temporary-file/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteTemporaryFileById(data: DeleteTemporaryFileByIdData): CancelablePromise<DeleteTemporaryFileByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/temporary-file/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getTemporaryFileConfiguration(): CancelablePromise<GetTemporaryFileConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/temporary-file/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class UpgradeService {\r\n    /**\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUpgradeAuthorize(): CancelablePromise<PostUpgradeAuthorizeResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/upgrade/authorize',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                428: 'Precondition Required',\r\n                500: 'Internal Server Error'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUpgradeSettings(): CancelablePromise<GetUpgradeSettingsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/upgrade/settings',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                428: 'Precondition Required'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class UserDataService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postUserData(data: PostUserDataData = {}): CancelablePromise<PostUserDataResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user-data',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.groups\r\n     * @param data.identifiers\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserData(data: GetUserDataData = {}): CancelablePromise<GetUserDataResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user-data',\r\n            query: {\r\n                groups: data.groups,\r\n                identifiers: data.identifiers,\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putUserData(data: PutUserDataData = {}): CancelablePromise<PutUserDataResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/user-data',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserDataById(data: GetUserDataByIdData): CancelablePromise<GetUserDataByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user-data/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class UserGroupService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.filter\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getFilterUserGroup(data: GetFilterUserGroupData = {}): CancelablePromise<GetFilterUserGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/filter/user-group',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                filter: data.filter\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemUserGroup(data: GetItemUserGroupData = {}): CancelablePromise<GetItemUserGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/user-group',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserGroup(data: DeleteUserGroupData = {}): CancelablePromise<DeleteUserGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user-group',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postUserGroup(data: PostUserGroupData = {}): CancelablePromise<PostUserGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user-group',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserGroup(data: GetUserGroupData = {}): CancelablePromise<GetUserGroupResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user-group',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserGroupById(data: GetUserGroupByIdData): CancelablePromise<GetUserGroupByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user-group/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserGroupById(data: DeleteUserGroupByIdData): CancelablePromise<DeleteUserGroupByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user-group/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putUserGroupById(data: PutUserGroupByIdData): CancelablePromise<PutUserGroupByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/user-group/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserGroupByIdUsers(data: DeleteUserGroupByIdUsersData): CancelablePromise<DeleteUserGroupByIdUsersResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user-group/{id}/users',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserGroupByIdUsers(data: PostUserGroupByIdUsersData): CancelablePromise<PostUserGroupByIdUsersResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user-group/{id}/users',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class UserService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @param data.orderBy\r\n     * @param data.orderDirection\r\n     * @param data.userGroupIds\r\n     * @param data.userStates\r\n     * @param data.filter\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getFilterUser(data: GetFilterUserData = {}): CancelablePromise<GetFilterUserResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/filter/user',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take,\r\n                orderBy: data.orderBy,\r\n                orderDirection: data.orderDirection,\r\n                userGroupIds: data.userGroupIds,\r\n                userStates: data.userStates,\r\n                filter: data.filter\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemUser(data: GetItemUserData = {}): CancelablePromise<GetItemUserResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/user',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postUser(data: PostUserData = {}): CancelablePromise<PostUserResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUser(data: DeleteUserData = {}): CancelablePromise<DeleteUserResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUser(data: GetUserData = {}): CancelablePromise<GetUserResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserById(data: GetUserByIdData): CancelablePromise<GetUserByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserById(data: DeleteUserByIdData): CancelablePromise<DeleteUserByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putUserById(data: PutUserByIdData): CancelablePromise<PutUserByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/user/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserById2Fa(data: GetUserById2FaData): CancelablePromise<GetUserById2FaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/{id}/2fa',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.providerName\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserById2FaByProviderName(data: DeleteUserById2FaByProviderNameData): CancelablePromise<DeleteUserById2FaByProviderNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',\r\n            path: {\r\n                id: data.id,\r\n                providerName: data.providerName\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserByIdCalculateStartNodes(data: GetUserByIdCalculateStartNodesData): CancelablePromise<GetUserByIdCalculateStartNodesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserByIdChangePassword(data: PostUserByIdChangePasswordData): CancelablePromise<PostUserByIdChangePasswordResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/{id}/change-password',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserByIdResetPassword(data: PostUserByIdResetPasswordData): CancelablePromise<PostUserByIdResetPasswordResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/{id}/reset-password',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserAvatarById(data: DeleteUserAvatarByIdData): CancelablePromise<DeleteUserAvatarByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user/avatar/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserAvatarById(data: PostUserAvatarByIdData): CancelablePromise<PostUserAvatarByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/avatar/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserConfiguration(): CancelablePromise<GetUserConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrent(): CancelablePromise<GetUserCurrentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrent2Fa(): CancelablePromise<GetUserCurrent2FaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/2fa',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.providerName\r\n     * @param data.code\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteUserCurrent2FaByProviderName(data: DeleteUserCurrent2FaByProviderNameData): CancelablePromise<DeleteUserCurrent2FaByProviderNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\r\n            path: {\r\n                providerName: data.providerName\r\n            },\r\n            query: {\r\n                code: data.code\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.providerName\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserCurrent2FaByProviderName(data: PostUserCurrent2FaByProviderNameData): CancelablePromise<PostUserCurrent2FaByProviderNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\r\n            path: {\r\n                providerName: data.providerName\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.providerName\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrent2FaByProviderName(data: GetUserCurrent2FaByProviderNameData): CancelablePromise<GetUserCurrent2FaByProviderNameResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\r\n            path: {\r\n                providerName: data.providerName\r\n            },\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserCurrentAvatar(data: PostUserCurrentAvatarData = {}): CancelablePromise<PostUserCurrentAvatarResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/current/avatar',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserCurrentChangePassword(data: PostUserCurrentChangePasswordData = {}): CancelablePromise<PostUserCurrentChangePasswordResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/current/change-password',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrentConfiguration(): CancelablePromise<GetUserCurrentConfigurationResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/configuration',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrentLoginProviders(): CancelablePromise<GetUserCurrentLoginProvidersResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/login-providers',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrentPermissions(data: GetUserCurrentPermissionsData = {}): CancelablePromise<GetUserCurrentPermissionsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/permissions',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrentPermissionsDocument(data: GetUserCurrentPermissionsDocumentData = {}): CancelablePromise<GetUserCurrentPermissionsDocumentResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/permissions/document',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getUserCurrentPermissionsMedia(data: GetUserCurrentPermissionsMediaData = {}): CancelablePromise<GetUserCurrentPermissionsMediaResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/user/current/permissions/media',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserDisable(data: PostUserDisableData = {}): CancelablePromise<PostUserDisableResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/disable',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserEnable(data: PostUserEnableData = {}): CancelablePromise<PostUserEnableResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/enable',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postUserInvite(data: PostUserInviteData = {}): CancelablePromise<PostUserInviteResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/invite',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserInviteCreatePassword(data: PostUserInviteCreatePasswordData = {}): CancelablePromise<PostUserInviteCreatePasswordResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/invite/create-password',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserInviteResend(data: PostUserInviteResendData = {}): CancelablePromise<PostUserInviteResendResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/invite/resend',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserInviteVerify(data: PostUserInviteVerifyData = {}): CancelablePromise<PostUserInviteVerifyResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/invite/verify',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserSetUserGroups(data: PostUserSetUserGroupsData = {}): CancelablePromise<PostUserSetUserGroupsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/set-user-groups',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static postUserUnlock(data: PostUserUnlockData = {}): CancelablePromise<PostUserUnlockResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/user/unlock',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource'\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport class WebhookService {\r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getItemWebhook(data: GetItemWebhookData = {}): CancelablePromise<GetItemWebhookResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/item/webhook',\r\n            query: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getWebhook(data: GetWebhookData = {}): CancelablePromise<GetWebhookResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/webhook',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns string Created\r\n     * @throws ApiError\r\n     */\r\n    public static postWebhook(data: PostWebhookData = {}): CancelablePromise<PostWebhookResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/management/api/v1/webhook',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Generated-Resource',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getWebhookById(data: GetWebhookByIdData): CancelablePromise<GetWebhookByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/webhook/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteWebhookById(data: DeleteWebhookByIdData): CancelablePromise<DeleteWebhookByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/management/api/v1/webhook/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @param data.requestBody\r\n     * @returns string OK\r\n     * @throws ApiError\r\n     */\r\n    public static putWebhookById(data: PutWebhookByIdData): CancelablePromise<PutWebhookByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'PUT',\r\n            url: '/umbraco/management/api/v1/webhook/{id}',\r\n            path: {\r\n                id: data.id\r\n            },\r\n            body: data.requestBody,\r\n            mediaType: 'application/json',\r\n            responseHeader: 'Umb-Notifications',\r\n            errors: {\r\n                400: 'Bad Request',\r\n                401: 'The resource is protected and requires an authentication token',\r\n                403: 'The authenticated user do not have access to this resource',\r\n                404: 'Not Found'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.skip\r\n     * @param data.take\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getWebhookEvents(data: GetWebhookEventsData = {}): CancelablePromise<GetWebhookEventsResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/management/api/v1/webhook/events',\r\n            query: {\r\n                skip: data.skip,\r\n                take: data.take\r\n            },\r\n            errors: {\r\n                401: 'The resource is protected and requires an authentication token'\r\n            }\r\n        });\r\n    }\r\n    \r\n}","import { UmbBlockDataType } from \"@umbraco-cms/backoffice/block\";\r\nimport { DataTypeResponseModel } from \"../api\";\r\n\r\nexport function marryContentAndValue(\r\n  content: UmbBlockDataType, \r\n  values: any, \r\n  culture: string | null | undefined, \r\n  segment: string | null | undefined\r\n) {\r\n  const mutableContent = JSON.parse(JSON.stringify(content));\r\n  \r\n  values.forEach((v: { alias: string | number; value: any; culture?: string | null; segment?: string | null; }) => {\r\n    // Check if culture and segment match or are null\r\n    const cultureMatches = !v.culture || v.culture === culture;\r\n    const segmentMatches = !v.segment || v.segment === segment;\r\n\r\n    if (cultureMatches && segmentMatches) {\r\n      mutableContent[v.alias] = v.value;\r\n    }\r\n  });\r\n  \r\n  return mutableContent as UmbBlockDataType;\r\n}\r\n\r\nexport function parseBadKeys(content: UmbBlockDataType | undefined, typeDefinitions: { [editorAlias: string]: DataTypeResponseModel }) {\r\n  const mutableContent = JSON.parse(JSON.stringify(content));\r\n  for (const key in mutableContent) {\r\n    \r\n    const value = mutableContent[key];\r\n    const editorAlias = typeDefinitions[key]?.editorAlias;\r\n    \r\n    if(editorAlias) {\r\n      switch(editorAlias) {\r\n        case \"Umbraco.Tags\":\r\n          mutableContent[key] = JSON.stringify(value);\r\n        break;\r\n        case \"Umbraco.Decimal\":\r\n          mutableContent[key] = JSON.stringify(value);\r\n          break;\r\n        case \"Umbraco.ContentPicker\":\r\n          const newItem = `umb://document/${value}`;\r\n          mutableContent[key] = newItem;\r\n        break;\r\n        case \"Umbraco.DropDown.Flexible\": \r\n        mutableContent[key] = JSON.stringify(value);\r\n        break;\r\n        case \"Umbraco.CheckBoxList\": \r\n        mutableContent[key] = JSON.stringify(value);\r\n        break;\r\n\r\n        case \"Umbraco.MultipleTextstring\": \r\n        mutableContent[key] = value.join('\\n');\r\n        break;\r\n        case \"Umbraco.MultiNodeTreePicker\": \r\n          for (let i = 0; i < mutableContent[key].length; i++) {\r\n            const newItem = `umb://${mutableContent[key][i].type}/${mutableContent[key][i].unique}`;\r\n            mutableContent[key][i] = newItem;\r\n          }\r\n          mutableContent[key] = mutableContent[key].join(',');\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return mutableContent as UmbBlockDataType;\r\n}","import { html, customElement, unsafeHTML, css, TemplateResult} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UMB_DOCUMENT_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/document\";\r\nimport { UmbWorkspaceUniqueType } from \"@umbraco-cms/backoffice/workspace\";\r\nimport { debounce } from \"@umbraco-cms/backoffice/utils\";\r\nimport { DocumentTypeService, DataTypeService, DataTypeResponseModel } from \"../api\";\r\n\r\nimport '@umbraco-cms/backoffice/ufm';\r\n\r\nimport { UMB_BLOCK_ENTRY_CONTEXT, UmbBlockDataType } from \"@umbraco-cms/backoffice/block\";\r\nimport { observeMultiple } from \"@umbraco-cms/backoffice/observable-api\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { marryContentAndValue, parseBadKeys } from \"../util/block-content-utils\";\r\n\r\n@customElement('knowit-instant-block-preview')\r\nexport class InstantBlockPreview extends UmbLitElement {\r\n  \r\n  static typeKeys: string[] = [];\r\n  static typeDefinitions: { [editorAlias: string]: DataTypeResponseModel } = {};\r\n\r\n  #propertyType: string | undefined;\r\n  #settings: any | undefined;\r\n  #currentSettings: UmbBlockDataType | undefined;\r\n  #currentContent: UmbBlockDataType | undefined;\r\n  #currentValue: any | undefined;\r\n  #blockType: string | undefined;\r\n  #currentId : UmbWorkspaceUniqueType | undefined;\r\n  #documentTypeId: string | undefined;\r\n  #contentElementTypeKey : string | undefined;\r\n  #contentKey: string | undefined;\r\n  #settingsElementTypeKey : string | null | undefined;\r\n  #label: string | undefined;\r\n  #contentEditPath: string | undefined;\r\n  #settingEditPath: string | undefined;\r\n  #loader = `Loading preview...`;\r\n  #showLoader = false;\r\n  #htmlOutput : TemplateResult | undefined;\r\n  #icon: string | undefined;\r\n  #content: any | undefined;\r\n  #contentTypeKey: string | undefined;\r\n  #contentCache: Map<any,any> | undefined = undefined;\r\n  #culture: string | null | undefined;\r\n  #segment: string | null | undefined;\r\n  constructor() {\r\n    super();\r\n    this.#contentCache = new Map();\r\n    this.#htmlOutput = this.blockBeam();\r\n    this.init();\r\n  }\r\n\r\n  async init() {\r\n    this.#settings = await fetch('/api/blockpreview');\r\n    \r\n    this.consumeContext(UMB_DOCUMENT_WORKSPACE_CONTEXT, (workspaceContext) => {\r\n      this.#currentId = workspaceContext.getUnique();\r\n      this.#documentTypeId = workspaceContext.getContentTypeId();\r\n    });\r\n\r\n    let editorNode = \"\";\r\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\r\n      this.#propertyType = propertyContext.getAlias();\r\n      \r\n      this.observe(propertyContext.value, (value) => {\r\n        this.#currentValue = value;\r\n        this.handleBlock();\r\n      });\r\n\r\n      editorNode = propertyContext.getEditor()?.tagName ?? \"\";\r\n    });\r\n        \r\n    this.consumeContext(UMB_BLOCK_ENTRY_CONTEXT, async (context) => {\r\n      this.#blockType = editorNode == \"UMB-PROPERTY-EDITOR-UI-BLOCK-LIST\" ? \"list\" : \"grid\";\r\n      this.#label = context.getLabel();\r\n      this.#htmlOutput = this.blockBeam();\r\n      this.requestUpdate();\r\n      \r\n      const manager = context._manager;\r\n\r\n      this.observe(manager?.variantId, (variantId) => {\r\n        this.#culture = variantId?.culture;\r\n        this.#segment = variantId?.segment;\r\n      });\r\n      \r\n\r\n      this.observe(observeMultiple(\r\n        [\r\n          context.contentKey,\r\n          context.contentTypeKey, \r\n          context.contentElementTypeKey, \r\n          context.settingsElementTypeKey, \r\n          context.workspaceEditContentPath,\r\n          context.workspaceEditSettingsPath,\r\n          context.contentElementTypeIcon,\r\n        ]), \r\n        (\r\n          [\r\n            contentKey,\r\n            contentTypeKey, \r\n            contentElementTypeKey, \r\n            settingsKey, \r\n            contentEditPath,\r\n            settingsEditPath,\r\n            icon\r\n          ]\r\n        ) => {\r\n          \r\n        this.#contentKey = contentKey;\r\n        this.#contentTypeKey = contentTypeKey;\r\n        this.#contentElementTypeKey = contentElementTypeKey;\r\n        this.#settingsElementTypeKey = settingsKey;\r\n        this.#contentEditPath = contentEditPath;\r\n        this.#settingEditPath = settingsEditPath;\r\n        this.#icon = icon;\r\n      });\r\n;\r\n      // Use a separate array for the promises, await their resolution with Promise.all()\r\n      await this.GetDataTypes();\r\n      \r\n      context.settingsValues().then(async (settings) => {\r\n        this.observe(settings, async (settings) => {\r\n          this.#currentSettings = settings;\r\n          this.handleBlock();\r\n        });\r\n      });\r\n\r\n      context.contentValues().then(async (blockContent) => {\r\n        this.observe(blockContent, async (content) => {\r\n          this.#currentContent = content;\r\n          this.handleBlock();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  async handleBlock() {\r\n    \r\n    this.#showLoader = true;\r\n    \r\n    if(this.#currentContent == null) \r\n      return;\r\n\r\n    const content = this.#currentContent;\r\n    const settings = this.#currentSettings;\r\n\r\n    const marriedContent = marryContentAndValue(content, this.#currentValue.contentData.find((x: { key: string | undefined; }) => x.key === this.#contentKey).values, this.#culture, this.#segment);\r\n\r\n    const marriedSettings = settings ? marryContentAndValue(content, this.#currentValue.settingsData.find((x: { key: string | undefined; }) => x.key === this.#contentKey).values, this.#culture, this.#segment) : settings;\r\n\r\n    const goodContent = parseBadKeys(marriedContent, InstantBlockPreview.typeDefinitions);\r\n    const goodSettings = settings ? parseBadKeys(marriedSettings, InstantBlockPreview.typeDefinitions) : settings;\r\n\r\n    const payload = {\r\n      content: JSON.stringify(goodContent),\r\n      settings: JSON.stringify(goodSettings),\r\n      contentId: this.#currentId,\r\n      propertyTypeAlias: this.#propertyType,\r\n      contentTypeId: this.#documentTypeId,\r\n      contentElementTypeKey: this.#contentElementTypeKey,\r\n      settingsElementTypeKey: this.#settingsElementTypeKey,\r\n      blockType: this.#blockType,\r\n    }\r\n\r\n    const data = await this.fetchBlockPreview(payload);\r\n\r\n    this.buildHtml(data);\r\n    this.requestUpdate();\r\n\r\n    this.parseBlockScriptsAndAttachListeners();\r\n  }\r\n  private async fetchBlockPreview(payload : any) {\r\n    if(this.#contentCache === undefined) this.#contentCache = new Map();\r\n    // Convert the payload to a string to use as a key in the cache\r\n    const payloadKey = JSON.stringify(payload);\r\n\r\n    // Check if we have a cached response for the same payload\r\n    if (this.#contentCache.has(payloadKey)) {\r\n      return this.#contentCache.get(payloadKey); // Return the cached response\r\n    }\r\n\r\n    // If no cached response, make the network request\r\n    const response = await fetch('/api/blockpreview', {\r\n      method: 'POST',\r\n      body: payloadKey, // Reuse the stringified payload\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if(this.#contentCache.values.length > 10) {\r\n      this.#contentCache.delete(this.#contentCache.keys().next().value);\r\n    }\r\n    // Cache the response using the payload as the key\r\n    this.#contentCache.set(payloadKey, data);\r\n\r\n    // Return the response data\r\n    return data;\r\n  }\r\n\r\n  private parseBlockScriptsAndAttachListeners() {\r\n    const debouncedScriptParser = debounce(() => {\r\n      this.manageScripts();\r\n\r\n      const collaps = this.shadowRoot?.querySelector('.kibp_collaps');\r\n      const contentElement = this.shadowRoot?.querySelector('.kibp_content');\r\n\r\n      if (this.#settings.collapsibleBlocks) {\r\n        collaps?.addEventListener('click', (e) => {\r\n\r\n          collaps.classList.toggle('active');\r\n\r\n          contentElement?.classList.toggle('hidden');\r\n          e.preventDefault();\r\n          e.stopImmediatePropagation();\r\n        });\r\n      }\r\n      else {\r\n        collaps?.classList.remove('kibp_collaps');\r\n        collaps?.remove();\r\n      }\r\n    }, 100);\r\n\r\n    debouncedScriptParser();\r\n  }\r\n\r\n  private buildHtml(data: any) {\r\n    this.#showLoader = false;\r\n\r\n    if (data.html === \"blockbeam\")\r\n      this.#htmlOutput = this.blockBeam();\r\n    else {\r\n\r\n      const containsRenderGridAreaSlots = data.html.includes(\"###renderGridAreaSlots\");\r\n      const divStyle = this.#settings.divInlineStyle ? `style=\"${this.#settings.divInlineStyle}\"` : \"\";\r\n      if (containsRenderGridAreaSlots) {\r\n        const areaHtml = this.areas();\r\n        data.html = data.html.replace(\"###renderGridAreaSlots\", areaHtml);\r\n        this.#htmlOutput = html`\r\n            <div class=\"kibp_defaultDivStyle\" ${divStyle}>\r\n              <div class=\"kibp_collaps\"><span class=\"inactive\">- &nbsp;&nbsp; Click to minimize</span><span class=\"active\">+ &nbsp;&nbsp; ${this.#label} &nbsp;&nbsp; (Click to maximize)</span></div>\r\n                <div class=\"kibp_content\">\r\n                ${unsafeHTML(data.html)}\r\n                </div>\r\n              </div>\r\n            </div>`;\r\n      }\r\n      else {\r\n        this.#htmlOutput = html`\r\n            <div class=\"kibp_defaultDivStyle\" ${divStyle}>\r\n              <div id=\"kibp_collapsible\">\r\n                <div class=\"kibp_collaps\"><span class=\"inactive\">- &nbsp;&nbsp; Click to minimize</span><span class=\"active\">+ &nbsp;&nbsp; ${this.#label} &nbsp;&nbsp; (Click to maximize)</span></div>\r\n                  <div class=\"kibp_content\">\r\n                    ${unsafeHTML(data.html)}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>`;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async GetDataTypes() {\r\n    const documentType = await DocumentTypeService.getDocumentTypeById({ id: this.#contentTypeKey as string });\r\n\r\n    const propertyPromises = documentType.properties.map(async (property) => {\r\n      const dataTypeId = property.dataType.id;\r\n\r\n      // Check if the dataType is already in typeDefinitions\r\n      let editorAlias = InstantBlockPreview.typeKeys.find(alias => InstantBlockPreview.typeDefinitions[alias]?.id === dataTypeId);\r\n\r\n      if (!editorAlias) {\r\n        // If not cached, fetch it\r\n        const dataType = await DataTypeService.getDataTypeById({ id: dataTypeId });\r\n        editorAlias = dataType.editorAlias;\r\n\r\n        // Add the fetched dataType to both arrays, ensure the push is synchronous\r\n        InstantBlockPreview.typeKeys.push(this.#contentTypeKey as string);\r\n        InstantBlockPreview.typeDefinitions[property.alias] = dataType;\r\n      }\r\n\r\n      return editorAlias;\r\n    });\r\n\r\n    // Await for all properties to be processed\r\n    await Promise.all(propertyPromises);\r\n  }\r\n\r\n  private manageScripts() {\r\n    const scripts = this.shadowRoot?.querySelectorAll('script');\r\n    scripts?.forEach(oldScript => {\r\n      const newScript = document.createElement('script');\r\n\r\n      // Copy attributes from old script to new script\r\n      Array.from(oldScript.attributes).forEach(attr => {\r\n        newScript.setAttribute(attr.name, attr.value);\r\n      });\r\n\r\n      // Copy the inline script content\r\n      if (oldScript.src) {\r\n        // If the script has a src attribute, set it to the new script\r\n        newScript.src = oldScript.src;\r\n      } else {\r\n        // Otherwise, set the inline script content\r\n        newScript.textContent = oldScript.textContent;\r\n      }\r\n\r\n      // Append the new script to the same parent node\r\n      oldScript?.parentNode?.replaceChild(newScript, oldScript);\r\n    });\r\n  }\r\n\r\n  private areas() {\r\n    \r\n    return `\r\n      <umb-ref-grid-block standalone href=\"${this.#settingEditPath}\">\r\n        <span style=\"margin-right: 20px\">${this.#label}</span> ${this.#showLoader ? this.#loader : ''}\r\n        <umb-block-grid-areas-container slot=\"areas\"></umb-block-grid-areas-container>\r\n      </umb-ref-grid-block>\r\n      `;\r\n\r\n  }\r\n\r\n  private blockBeam() {\r\n    \r\n    return html`\r\n    <umb-ref-grid-block standalone href=\"${this.#contentEditPath}\">\r\n      <umb-icon slot=\"icon\" .name=${this.#icon}></umb-icon>\r\n      <umb-ufm-render inline .markdown=${this.#label} .value=${this.#content}></umb-ufm-render>\r\n      ${this.#showLoader ? this.#loader : ''}\r\n\t\t</umb-ref-grid-block>`\r\n  }\r\n\r\n  render() {\r\n    return html`${this.#htmlOutput}`;\r\n  }\r\n\r\n  static override styles = css`\r\n    .kibp_content.hidden {\r\n      height: 0;\r\n      overflow:hidden;\r\n    }\r\n\r\n    .kibp_defaultDivStyle {\r\n      border: 1px solid var(--uui-color-border,#d8d7d9);\r\n      min-height: 50px; box-sizing: border-box;\r\n    }\r\n\r\n    #kibp_collapsible:hover .kibp_collaps {\r\n      height: 25px;\r\n    }\r\n\r\n    .kibp_collaps {\r\n      height: 0px;\r\n      width: 150px;\r\n      background-color: #1b264f;\r\n      transition: all ease 0.4s;\r\n      color: white;\r\n      font-weight: bold;\r\n      position: absolute;\r\n      top: 0;\r\n      font-size: 12px;\r\n      overflow: hidden;\r\n      display: flex;\r\n      align-items: center;\r\n      opacity: 0.8;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .kibp_collaps span {\r\n      margin-left: 10px;\r\n    }\r\n\r\n    .kibp_collaps .active {\r\n      display: none;\r\n    }\r\n\r\n    .kibp_collaps.active {\r\n      background-color: #86a0ff;\r\n      height: 50px !important;\r\n      width: 100%;\r\n      position: initial;\r\n    }\r\n\r\n    .kibp_collaps.active .inactive {\r\n      display: none;\r\n    }\r\n\r\n    .kibp_collaps.active .active {\r\n      display: inline;\r\n    }\r\n  `\r\n}\r\n\r\nexport default InstantBlockPreview;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'knowit-instant-block-preview': InstantBlockPreview;\r\n  }\r\n}"],"names":["ApiError","request","response","message","CancelError","CancelablePromise","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","encodePair","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","process","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","_b","sendRequest","body","controller","fn","getResponseHeader","responseHeader","content","getResponseBody","contentType","binaryTypes","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","transformedBody","DataTypeService","data","__request","OpenAPI","DocumentTypeService","marryContentAndValue","values","culture","segment","mutableContent","cultureMatches","segmentMatches","parseBadKeys","typeDefinitions","editorAlias","newItem","i","_propertyType","_settings","_currentSettings","_currentContent","_currentValue","_blockType","_currentId","_documentTypeId","_contentElementTypeKey","_contentKey","_settingsElementTypeKey","_label","_contentEditPath","_settingEditPath","_loader","_showLoader","_htmlOutput","_icon","_content","_contentTypeKey","_contentCache","_culture","_segment","InstantBlockPreview","UmbLitElement","__privateAdd","__privateSet","UMB_DOCUMENT_WORKSPACE_CONTEXT","workspaceContext","editorNode","UMB_PROPERTY_CONTEXT","propertyContext","UMB_BLOCK_ENTRY_CONTEXT","context","manager","variantId","observeMultiple","contentKey","contentTypeKey","contentElementTypeKey","settingsKey","contentEditPath","settingsEditPath","icon","settings","blockContent","__privateGet","marriedContent","x","marriedSettings","goodContent","goodSettings","payload","payloadKey","debounce","collaps","contentElement","e","containsRenderGridAreaSlots","divStyle","areaHtml","html","unsafeHTML","propertyPromises","property","dataTypeId","alias","dataType","scripts","oldScript","newScript","attr","css","__decorateClass","customElement","InstantBlockPreview$1"],"mappings":"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"}